%!PS-Adobe-2.0
%%Creator: dvips(k) 2020.1 Copyright 2020 Radical Eye Software
%%Title: test_file.dvi
%%CreationDate: Sun Mar 28 07:08:11 2021
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: LMRoman12-Regular LMRoman10-Regular LMRoman8-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o test_file.ps test_file.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2021.03.28:0908
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 23 2020-09-18 06:29:04Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.32, 2020/09/18
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%

revision 952 gt 
{
  systemdict /.setalphaisshape known not
  {
    (\n\n%%%% WARNING: Transparency operations ignored - need to use -dALLOWPSTRANSPARENCY\n\n) print flush
    /.pushpdf14devicefilter {pop} bind def
    /.begintransparencygroup {pop pop pop pop pop} bind def
    /.endtransparencygroup {} bind def
    /.poppdf14devicefilter {} bind def
    /.setfillconstantalpha {pop} bind def
    /.setstrokeconstantalpha {pop} bind def
    /PageUsesTransparency false def
  }
  {
    systemdict /.setopacityalpha known not 
      { systemdict /.setfillconstantalpha known { /.setopacityalpha /.setfillconstantalpha load def } { /.setopacityalpha { pop } def } ifelse } if
    systemdict /.setblendmode known not { /.setblendmode { pop } def } if
    systemdict /.setshapealpha known not 
      { systemdict /.setstrokeconstantalpha known { /.setshapealpha {dup .setfillconstantalpha .setstrokeconstantalpha true .setalphaisshape } def } { /.setshapealpha { pop } def } ifelse } if
  } ifelse
}
{
  systemdict /.setopacityalpha known not 
  { 
    (\n\n%%%% WARNING: Transparency operations ignored - need to use -dNOSAFER\n\n) print flush
    /.setopacityalpha { pop } bind def 
    /.setshapealpha { pop } bind def 
  } if
} ifelse

%%<bool> .setalphaisshape -
%%    If true, the values set by setstrokeconstantalpha and setfillconstantalpha are interpreted as shape values. The initial value of the AIS flag is false. 

%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/addCoors { 
  3 -1 roll 		% xA xB yB yA
  add			% xA xB yB+yA
  3 1 roll 		% yB+yA xA xB
  add			% yB+yA xA+xB
  exch                  % xA+xB yA+yB
} def
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (original)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul         %	\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { i dx mul dup xGridOffset add y0 moveto % draw the lines
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  /i x1 def 
  GridDX div ceiling cvi 
  { i dx mul GridDX mul dup xGridOffset add y0 moveto % plot the labels
    b 0 gt 
      { gsave c i GridDX mul a cvs dup stringwidth pop /z2 ED  
        w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse exch GridDX div z2 2 div sub exch 
        rmoveto show grestore } if 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  /i y1 def 
  GridDY div ceiling cvi
  { newpath i dy mul GridDY mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i GridDY mul a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse GridDY div b 2 div sub
      rmoveto show grestore } if 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 4 2020-06-09 08:32:19Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 4 2020-06-09 08:32:19Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2021 The LaTeX Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
/color.sc { } def
TeXDict begin
/TeXcolorseparation { setcolor } def
end
true setglobal
/pdf.globaldict 4 dict def
false setglobal
/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setblendmode where {pop} {/.setblendmode{pop}def} ifelse /.setfillconstantalpha
where {pop /.setopacityalpha {.setfillconstantalpha} def} {/.setopacityalpha
where {pop} {/.setopacityalpha {pop} def} ifelse} ifelse /.pgfsetfillopacityalpha{/pgffoa
exch def /.setfillconstantalpha where {pop pgffoa .setfillconstantalpha}
{/pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath
fill grestore newpath}bind def /pgfeofill{gsave pgffoa .setopacityalpha
eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}
ifelse} bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def /.setstrokeconstantalpha
where {pop pgfsoa .setstrokeconstantalpha} {/pgfstr{gsave pgfsoa .setopacityalpha
stroke grestore newpath}bind def} ifelse}bind def /pgffoa 1 def /pgfsoa
1 def /.pushpdf14devicefilter where {pop [userdict /bop-hook known
{userdict /bop-hook get aload pop} if {0 .pushpdf14devicefilter} aload
pop] cvx userdict exch /bop-hook exch put [userdict /eop-hook known
{userdict /eop-hook get aload pop} if {.poppdf14devicefilter} aload
pop] cvx userdict exch /eop-hook exch put} if systemdict /pdfmark known
not {userdict /pdfmark systemdict /cleartomark get put} if end

  /pgfwritesamplecmyk { 4 index 0 5 index pgfcheckcolorrange 255 mul
round cvi put 4 index 1 4 index pgfcheckcolorrange 255 mul round cvi
put 4 index 2 3 index pgfcheckcolorrange 255 mul round cvi put 4 index
3 2 index pgfcheckcolorrange 255 mul round cvi put pop pop pop pop
} bind def /pgfwritesamplergb { 3 index 0 4 index pgfcheckcolorrange
255 mul round cvi put 3 index 1 3 index pgfcheckcolorrange 255 mul
round cvi put 3 index 2 2 index pgfcheckcolorrange 255 mul round cvi
put pop pop pop } bind def /pgfwritesamplegray { pgfcheckcolorrange
16777215 mul round cvi 1 index 0 2 index -16 bitshift put 1 index 1
2 index 65535 and -8 bitshift put 1 index 2 2 index 255 and put pop
} bind def /pgfcheckcolorrange { dup 0.0 lt {pop 0.0} if dup 1.0 gt
{pop 1.0} if } bind def /pgfchanneldepthcmyk 8 def /pgfchanneldepthrgb
8 def /pgfchanneldepthgray 24 def /pgfcolorsamplecmyk 4 string def
/pgfcolorsamplergb 3 string def /pgfcolorsamplegray 3 string def /pgfrangecmyk
[0 1 0 1 0 1 0 1] def /pgfrangergb [0 1 0 1 0 1] def /pgfrangegray
[0 1] def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DF7740107CE11D9F1E95F04ACAA904AECA8C
66082082F59CB8E5E7A96FFD63BF90F69931F3D5B5F81C3E234904D5FE5CCAD9
17381670D1548D72FE715FFA30FEBAC715513E0525049188B9D91BF7EBFF4444
ABA5490DC6A5CD8C1BF3EF1341A126980C7890794A85EF6CE32D227A9532B61E
E1FDB83CCE8849508A3EA0FDABE92387B526ED0C9A92315083DF5BE16201B404
07019A28B699901B1A6F7C9D6981CD0DC5CBD97109E9E4E462E58A293CD1BC4E
240FF934EAE9355F75676B21D53206AB65DD1F7D423FB9FA7332AAF569948EC5
5BAD355BBD85D66D616844C0DAA6DD5D5492CA1736A52B8B9D95AE23A9C62EA6
A323C0FB989D53EB4A5AC25A0858B10DC043CC9D5E8CE27B8C4B6E8B4F056867
F1C0B014E2B65B5C3158BF4870481D8FA433728039209E7FDD13ADBB921F3715
DC8998AC0E556F16DB74C13D05E062FF9089F981D89FFDEA459395AEB1FD2A23
13C4619C3924D516D06D7C952B12E6646662A651EE4185C5725607F457AE1E83
C41C6AB175C3200BE7F1396F9CAF46C80BB7C866CD45B80656513B6871E5258B
4F80702ADB01E522A4FFE4E1A156DDF0127E2C87A8AD82DEE1B8090D5B0E4BA8
59C4668A7EAC8CFEDABB124F8CBF10A621372FAA078DC8AAB00146550EE703A1
4B531D522B476453DE7C661ED5D3477A95C24980073E63DD9C90CA8D00E81400
9234E2A36EFBD854F868BC9301D33D0762434E5810C493EEEC7F9BE98C8E56CF
86C591B705CAF70989799D9D24281EC83E6536996D29B4A70F4A479D38E0ECB7
3664581BA1552F680511B5FE3EAF7C61513691DC7010505C0F1C9BDDF1747CA2
F97096DFB28E72BEF671339F900E204FDA3CA9C2B6D2FEC695D860792433C3DF
19EE7B5C27E7BE0538ACEEDA4C755FCA8F3572C613CCC6B7436CB4445C100492
702A703EE13DCF5C2E244DC85556F666C7ED81894089B685DC8E9A731E079875
29DF23EC188A2FA2C09C41BFF8C7A113D5B796A6A62D6E8252305668494B4A74
57EB664B2262988EB310E93581AD3EA8F003B9EAFB7975741FB1F4063CEC6275
C76DE288DBA107D65FCF751C774B9B08CD2D57BA598B113BBA881782845B8A24
DD727267116D0B6F94B31AE4EDE823814D4AE8CE5BF99135ADD9A0941F443567
EF0BAAFA416C0AD7D6AB86E633726485816287751B41F348377A602A2D5CEE4A
409E83188D1E6C395BBD0F42D0CBEE87AE6D68A4C0336BE904ECD3104D0DB5CE
C19492B8498D81D982800318D338D884EA3AA8F36F17AEA7B3CF3B80E235C0C7
0C895EDF6B06A5AE0FD8755324C32808C36F09348083188D680E4353F95693A5
DC3207DBCBD73B067552BD50DC53426AB829EF0CD6495A7D1F18FC4E184AB013
8C55F58EE0B0785835070A9D8B87FD17440C828B6DDBFD43EE0DFC4330C584BF
E5F7EA7494DFCB3128BB928CB1E671C3DC1FD13D5DE9B840FDD96372799EBF4C
9FC600A9440DFAF270C91679C516D2062B949A8D91BD5C8C1CE1444B6DF528FC
A00A4CE5BB7C3E53EB9E4F129371A5BEE78D169C5D1ABA0AB0CA7F8BE2959008
DEAB3A14B39265582E5E691018CFF8D23E9C082986275483553D8A07FE60B2E8
5D5ADA1125B5E9F17B4E039CFB556F43AEDEA439FBF139A16A55342A9120AB86
377A8D401B8BD6149067CBABDE9701D657DEFB58CC51647721D4F7F3FB37F364
72F6B02B8A839E5FE1609C8111412825F41ECFCE0BCA12B0D2FDBE67B673EFFD
F8F0815D7853C6F61278341A10182862D9073240736B4F1BCE96F57A97F83184
2958E6B6567EA69EF3D840B66E2A469C54C116DCF63631E2C3E0E935E77FC076
20C1DC238085DC4E78C139FF3A8FB5FE13BDE7A2897E69408B6925AC50729A53
90AD5502B72A75EB16BCD26BD752DE5BB21DC9C7FCBF815D3166F934AED1BCC9
07868E8C5D194C8D15683EABBBC00E4F8B1F6004F89B3DE9F6FF6ED7CBE0420D
E457EE415AF56C9ED991D70B5EAAC7A6B9ABC63E49E8FA141C5A0DD35B53B2D6
935CD13B97A8784E032A84F6CF55635026597F80FF4A2967E8D917E62C98DFB0
4ECE73F5E1E9809CE9BEF643C2568A3365B3C1540A2FA248F82B9B5DAB612451
7827491FBBF0363061CA3D670328E5CF1112FFF253065E2EF911A5F51C801F28
FD33778F803BA06826F2D74C286E34F733D2AFAB8475D03A38D11BF9A3E8B0E5
080A1994B7689E5EC50F562F21563212B299C296401C85FCEFCB9B92D2B264B5
FAD42B86273D30CE80C424CB288CBB7155E850C1441D45D2F5BD0ED0868159FD
FB3820D02F460E2C2A3A8ADB5170FC710F29B4CF6AB780A4E2A1732B3620B99C
0EF79AAA866A8A7C28275E5901FE36E3E00527E6E90BDE98DA5E4D2BC78ED4EB
A41C83C1D5DA810F835D7C1D09FC3085B4B3468B6FCE2EFBA1C6F5C0EF18ED5A
E7BA60B9974A0A2C7449C76238BAD444D12BB28A533C51765E9FD912FEC68596
FDC4B7A9919594E7687D91EB5B8F0E20A4FD5984624C21F595F9DDF1D8BE745B
CA2104F0A28816B184277891B9231F2832FB3D71007387C697011834635F8609
5CF4ACDCC4C038511EBE5F047EE68288BF3DE1225D981C287FA9B5D68DEF261C
3CE14538C0AF5D07EEFCACD74368BDA00E9E9FE66E7E93F104E59979F5E38926
18A1D6D53FFFD3B7470B94624512485C1D560032862BC7FC1D40DA65CF0A519F
B5A109CA9D14EB30F6F4C1B85C7C5E074A0442E910EE2D7511DB1D70576C6942
0C33679135012B5ED6C2DCBC742C4B8EA64508AF6897483A26FFE842E222CA48
0F1F22089A38079692312519392BDDADD71BC2C8C582E13D3963EC786A6F81B2
61B532E7C406929E48045A055B9F4ADD89458DF1F326D4F23606C6B8FC607D92
DA9CCB2920FCD23AB28D932EEFF25B5D70F45018920ED59DFDA2268C726F0765
88AA122CC299D7F4C4C26AD9B5252D2C52F35DFA76D8BD28B2DD16C22B540BD2
E3D7C0B86BD25C13CB52DD4DEB99259FD77E1C34DD428D5DA022F1AFD8CCF422
55F33B399C2204BF771CEDC1ECC1EED43910CC0458A4F2E670B4F385D40ABE3C
641A9473F8BEE13C2D0B1B96D7F06197A6F6ACAED25B1D5C3E1F0F2312BDD1F2
E214177FB453C13AB1365B18BF8300E8B9ED082C66600323B2A981F6FA4A71C7
4683F2B041CC569F78BD73D380C572E5087A5556397E485D1BB4DA111FB26250
69E57129652E16BDEAE32DD467200CB15F64E9D8CBBC9C0FDC4E1CF1B461902F
D93DB83283CE63468E0AB1620CF517E98EE8437F47D2A1F30D9C5B31AE17B3A5
F26C726618551ED6F3B85C5DB458FEE7213CC5ECCA686818060AD02A38890882
836514F59717B6B023F30BDA21AB8C8AD7F1F7F6455E4CBD4CEED62960E23C18
9818822E6CD053D8118AAA25FC998752DA9FC032BD7E0F9B25F3B83258577605
2FF4259FCEB7018DCA16DD09DCC0036BC505B1CF781858BB4E0744C0205050C6
257FE1A1C18C8CF9E9596383F7C721A02DAFFB4998A327FBA3E1DBDEC1F3CE9A
5AD6E6F5099188C960BC8C90C1B132B11563CC6F2ACE52FF958AB8B6C7858C06
8ED009D8BE872C4E07B72F3DA93330C41AD12AE1057991478CD587D08576EF5B
4A94B001F198E33152FE0F2EBBB1972248F0E4BB8AE3948A408FAA0CB540634E
91B8167212FB2D1F27F55E67DB8A021F37873BCF91128D0C9D92CE1AC3301B7E
99A4A14404AF24867D952870ED2F6229EBB4FD0CDA78C655E71003C12938ACD3
2E67706E51CB96E8561C64782374B5BB113B860B5E42481E0DDA0D4DEDABCEEF
BB94D35FD6AA23331BD1EA84C63672546AF3EDE43B35792D80CE15A6BEF1CE58
11D491B35F62D185F051EC5EA7FE37F49D7B9A7192A22FEB739B5357DDF12BD0
3B73301F26B4FBF514C6B17D82A1754ECCA835959913E0EBC550382A10C46227
A84A8CD9C85745042ED8855F3D5E9ACFC243B1423E49694324B8829A252D77E7
9AD37BF59624DA9B7A940A8F4B3E4DCC91BDB8CD53112F977A392B7C51E521A2
9AB9F8A89828410C34B2DC68CB0F03583DC0C2243A6156F14D2EF64BB4FBCDEE
E2DD064CE344608BEFC72FA3BC09B6446DC57AFBDCFE76E6FEB489213AB54F67
0B84052E96573D5CC6D1E2BCE00279474109AC67B7D0A034352C6FFC043CC6EF
BA5BE1F043F38C1E3B3CB2173152213DF78933C334560610DD15BFC537D54637
0C27D93395AE33034FE164EAF1E40C7FAFDE5C8CA66AEA3143B5707EE9818382
43F7CC1A5FF27FC1322BEF37962CA9DB039EF9B7CB7F1D174B5329909255448A
22224CF4F468285D1978FAAAC9543651A9592AC279801F323729C9FF291574EE
9AF239E9AEEFDD9146B438DFD56FCAFDC0A37BDFF53084589D76D53CFA7BA445
BA0468E18F946DF99C0D652ACFA3867D0608A6B90E08CB0465F0870DBAD64134
540E4DA9BAFBB253AE742213A98151BC4C4C24B6FFB6FC050C64240F81D6FEFE
ED1C2FE09E0AF9A42040C86E1230BE93E102D32E0FAE5DC8F3BAC23F2EE866F9
92111236F434EED9E053EEC4FDC93D0FEEC7A0409376D1F43936279D7644BEDE
6B8BA09F5113888629B9DA76F4ACAC9E7F75C86EE557077EAAC299CE945C5D04
9BF9B0C16328F8992A1287FBE4016ECACDD9E5DBBA03548CECD9D12CA669D16A
0C25A85CF598BEDE4CD43EF412EEA1488622F560512DD5FCFDBA9199FB417CA3
40911B183955048D808915D7BA588590785C3635BE2FA8FB5AE053A92B95B480
BCF32568643D68501E25F590874B9887FD76E6303E404F673D424112ED9EC735
1EB03DE375C1AB93D839DC4F2D41639E03C463B9D538F4EF7E163A41E6E7BA87
1647E3928FA328E62A30BFB1050FF41D29EA8262E689C52530CB43926685FF50
2BBEDC2A762B12581287CA52C91C95FFD23F6A47CF740F5712FD0E931A6CB14F
B39D0E8BC77B1ED4E832AB9A0DB67B0F3DD5A24BCDDE98E22CFB40A99FE06830
5C740DD13E70A4B7B9995C5539CB2A58832AA92DA5F34F197E3EFBF17115FB06
568EFFC4E2DFB76CAEF16CD3EC1B045ABD80A941EDD9CD2025F12147C5C8D5E3
9937B03356D453D819AB09E2EB0E3DA7FA3B3D360E533AB579875F36487D54CF
0D5362D4410060824D13F79652B119EE55207B3DC19A590357615960AC334A5E
3CCB2F8DCA630494BBFED0BA285B550EA460E36E1FCC24D0148C458B745876A5
FE591BA6FD79902CD32D6AEC688F02A7365B66797DE1EA022AFD1BB094A39F0A
C8535F07BA31C71CA5D158A149F931273EBDBC4262A26D679ED4D87F89B2D3FF
1A88AEC671E8F063F63D112DFDDD7FF4E0CEE68EB3082D159051488834B773EE
C15EB9CB4C32BF24D23A2C04A02598ADD5C10C65F140E43A7EA1495801320823
17DD4A19E976C265FB17C6F616E761C946A648F86773E5929E1BB1D4C3842196
FA78D778FEC5D66460D04955DFEA71460082A643AB97F434E3524EF72D4C5EE0
DF31808CECB597CFFC2F175FA968D454AC3CD06F4C079ACE1DDCA6F51DC6F246
A0D4A4A2055CD35D520B40E15FBE17A440784E4F57D176C573C5A7EEA60AC017
A3CBD6BA59A1AC2BACF152FD4BA35D43C4A831D03FCB1124534E05AD6F4C749D
FE76E4D4CC7DED2405EE490294E01303458F742E5D68393E9D06B11BC67975A2
DA68BFAD5210039E61598ECE5F0F989118A07B458D5A131A130DEF03869DEE29
146B547BCF0571898E217B591D115579FA3BF7C9B6E0D3D4FBF1320C845F3FB7
7B959B6C956A504D23D6DA659C99662C93DAE979AAA1DE3496DAA9C7A3248204
BAAEAA4853054622379B9018FC97EA48DC749FB5B9CC854F3A959B239DA49D23
EC2BB5E9080FEBA1C8F911AEDE793A435F04B0A8BFEE7C64ED56BE0BFEE14336
FC9DA7B204022166F1C1DC489D5F2342CA5F31DDE304F2498F905D1D74E554B6
1CC07CBE503272B6E5880522F4837C25D4A33FD6693CDCA2BDBDBB790BBCFA1A
23212556673BEDD05620B4AC7ED4A60011BC208E79AA1D23212556673BEDD02B
F2BE3133DBE4B004C48A7A0FDF1D62A284F65741B1017E96CC1FFC998EE38557
32DD7DC86ADDA1E014D481B4DB647B11B5705056436DCA2BEB8F78745A02DE46
4B6F6566CA4FA3E36F22409D884AFCCD3B642C0A146E6069BF76C5EE35D36E88
3E3362E8151A38AD6FA6A7C85396D0BF5E6784149C85FDA1FC19AAA54C49F6F0
B588D5662E48F649117CA18CA484E11F30598F44A65E2D9ED3B7A6B429489275
571F6B7615B13EFC3101D7CDED48D88EC7A3C6E0901F595D24202DE22DE3D1C7
2ED100C5C1640A870F02D282D91027980B70C1F429DE136CB51F74CA291A09FF
43B943338D442F64F168B93FBB1CFB16EB1C421EDB7A32B298BD9B107D2A0CDC
7A6C18D0F3A6DB604D39EE99D02D3FE7C02D0BF476D768D438A2C18831DB8E02
835E748597CD52F41C780BAD637C4D75835F46FAE24907573C2C7A684F5B3391
8BCBDC61EB37DDCD9D26D8FF7AF6E0E6E181AB858313D2F697474CBE5641E20B
89596FC8F4FEB2C582024503754847E28D80D2735CF6F56CFB6FDA12DD94D583
7F8101D3D65F56FC76C95224AEF93D86C1A0DA6BA58119FCA2570964C905425C
640C8526BEDF26F171C5F4C80871ACD7CD327CB2134894473A6531EF4F23468F
57D052B226A961A088A49D6A527B8DAF584E040F89694E7E7977975282962120
B9F2694B306672481FC77B5C6D7843D0CD59C28E408A938C6E18BAE295057EE5
9E3D2F372B87A9C9DEE25CBB8B9C7488125CFE99B5A0257F0D0E3595C2F2F772
B9BA1D85B4E3003F179D5CF38CE3AD91324BC7389AE2391E456A5318B8ABBE34
548BA12DF2A750C82AEEA335B5BDE39CAFC58F6CA8228F29E7E73BC9CA5E20B1
B2C5ACB70752AA66353911FD032BE7E564473F851F794504BF7C7371DD297CE2
0CA5DC30047038A61200A874EAE77412E80782E82AA89FB909880B99D9CA7FFA
F13E7F2BD3FA0A5D5F881FFE9B414C45B06FBC491330279C671334298D02EEF9
EB42A6F3428012077754BA3854A60A3676CE5BD064CF7B9B31610B918ACBE6C1
B4F5419C8704101CCE7BD2F4516895203B8B15293B65444080B62ADDDCA6FE7D
3BD06444FA5C990EF446A30009A7DEBE36A84A8188BBAAAEDF031E76C4DE35D4
08FACB8510AABB489BF46D3D2E7D1DAF8473EE2767CB54BCC2EDF8E29F24577C
85B10FBC0452FB99C4190B4297DFC9B4A2CF19A4AC6ED467C7E14A1E65E65A8E
D13E0A65E4E64ADA9DB1DDD530D28D902F9850B1E071372B6BCF391E58BF827D
CBDC88CC1AB764CF1DCE3D95F87F1ACFC209EA16B2A6A5D0BD22E94386E83F2E
7BA8EAD71FC5CBC75AF2DBC9E30AD7F2B98B04EEDA1263577D0D75215866236E
5FC6C284B45AC7BC21D9C251BDF71BAD45A7796DC14E05E21ABCA2E78C2787AA
65287E47552DB1D42FE663580ABB54114781FEDAA5926EA5679791D474BC0B79
39D43C0AA387BDC865FE185C0962BAB12D247676FDCE51B2C79A29F57AFA174A
E34CA73B1499B395127BF2453FB7F04A266A9049007251032597B9AFA1B3FF32
0C672715B6FCCE554DEDEF0E3F9FE749AB039FA29165B50ADA66B10A8B41A3B3
87A7745256DC9C88264BA9CE0CB845C83C0C234851D29EE5174D7B154EB46E84
E385A9143111682831293C11CD2E4FAE61EA1D3E2DA8EF502EF888B7009B1D93
9154BB0190201C3829DB22E0317D73DB9E2CEEA0F1FAB1E6A0FEACCFE55830A7
6C6B243487AE5A649D850B6E23ABA5DAE500A0C90453F042B71ABEBC19EED2A4
EAFE743703FE139D653820FB3EEA998267FB51CF42EEAD7BB0A053340B37288C
A08255BCDFD9CA2916B54B0A1F4B3B95AFBBB3CC59D3FBE6A84F1F9521B6E05D
0A0B2E0FC9A4AD8320061D0D899EE1D159EC5B7845762DFE0037B98F87B10927
8BCECF4B659DBABB4AC20EB75E7EF41A4ACCA74C034238FB747EB6E236A366D8
046477D04EBE579FDB1CB56A574738360B1A6C03DB434D9AEC6AC60E678B9CAF
6B99D5EDBE2499BF00ECB6C5C0F3CB6F2433FB040A12DCD840C0DB82DFEA436D
EB4794ACD823CA8A14FE7260A9AEBAF74FF120E81AF13B3BAB884BB606362C95
E16103DFD7836FE742785B93336E939EB40A8E2119237B3F7834D125F12A97B9
5F6A354624C31C68A7AE97461DEFC0E88AF09C8E66A6F27EE257E88F34E6654E
DA490D21DD48C10C8ABA3F9256FEC0FE2F17E6C5678B877F77AE2FBC99BEC7CD
386990155D3F3F222A54D73F80B71B5DD13AFA703B5A9586C03FC96CC8119F83
194F0502B7E610DCFA488B335C3172DCFF4F82A8D7AE49E5E8174A8495A573F0
1807A82D6A0C634658F1BCAB5D8B17ADC676E012A737EFA5B743C0FEDB224E36
0B05D583BED7274A1E87749F6B1B05B6CD5047BF5B6F6AD0DC1CDB2E6FEFFD6D
732F98B149F5F0FA2C40F32C788ED78A3529BC281516BD1A6C353C9BDE6BCBBF
DF17286591BB317ACFCCA3C746EAF40469E99A48A7862A1246B52310314A268E
9A30EB41F7C771758410E7D1179567B721C79BC7C0F4C7A421734301813921B9
71F6B6E7B41EAABEE91D7D802FB65F4066B638056F697BA89C4DBFFD8F789B33
33AD3BC0392B050B9540BDA7E41941A3FCB3BC99C0B96915C2ADD25EBF77DBC3
19F814A38BC018675DB47DC325BEDF738EB6D550863099C9AE6A1D3DBB5D14B9
4817DB232CF42BFD5FC04ECC5218D4C7264564CB92D8F54E6E96E97520EE266E
21EE88740E10DE655749E318A202CAEC8CBCA4BB45C49782D9B2884339D885C7
3D85703C9C47AA9D6753E1FB20ECC1C9369A36F8951CA980B57EEA86ED95F381
1AD256DFFE665809102BA7131D3F07F541869E3AE9CC7B6087C9F370E2431E28
C32AEE2758766E5744E5F40A0F5DBA2A66F682D4AA923DC8E36A3B750631B0E7
6083832E083EF17DE3C42A87CFE9DF624619A4EE1A5CA99AD4D51FF975CD8ADB
E47F6AB56A93608B289F60FFF8C732825DA065D7C95992607C9FEEAFC0D4990C
C5130EC9F6DE383C674C24816DAE80EDB9018A952BE760F64560F50B146EC0F3
B3FFB1F9D7B419169C2B7EDCD5136921BB9116855F20B0DE9F99A91AB260FDF7
5E42189D550A9F9807D58480946C9E0ED107E076AA8FF8597B279B8FD1B911FD
BB4D30735E62DDA88DA0871510FB3661D8B5F4D9120A155D32DB5C681FB3CFC7
4FCCA8483943FEFD671409BBB2769C8ABD0E1D2E629369CA824B117CD9933462
6049A9AD892D4D31764C87E6BC2591A87D0CE5AEDA30DA4F11EEEA1031376181
330453F60EE0BB86C4FEE17290D7535F0BAD8499A55E8A27075A8DA55F73FB96
48B668BB084B0990A5BC4E350292C4ADF09FCAC9F334426B38188E5098329A8F
6B24CC94A37E5D8D7100D9EE9F3341359BDF696CE1A7D458C7011010B1FECFFE
0F45EEF3CF6CF84697FE12092D1751A957AAFEEA79FEC8CF98C5828F2671C091
446F1DB0DEACB995CB64615812DBC2DA499035CE561C1F88940D4037B8125119
97C2BC8A9459F59BD206690FE892719EE495520D9D0106783A5CC0F34A894F55
1A6EB2B7D28E7CC38B56E76CC07CCB3A4A70E92AA0A44B7DF8B5599466558D4B
276110BCA39FC72A2D4ED99696FDF0798A4397FC16D881F6BF25081BB5F92A6C
446263EFF14733E3B857A5E8C50A26F1D3861E1D799628816A876C6FBAAAF827
0E0080CE2D24DB44795B8A0E1BEFD383D8280DFB565176F5104C31C19698C0C0
C9683827A13C1735D2C649C0D4A583E700942526F12590D8A239B8AC70E31926
2AF6A41D93D76C686967470985AC22D7873925F1C44C35973784707A8E217398
26750855816309A71C82A089CD2DF10E454DF62EBC28DA96447F7F934EDCF05E
C8CDFB2C261560D8D2FBB63DE146E1AC092E3FE888245721D1A09936DC5453E0
404213C6A94A7AC4F217E3AB4BBA8870B2F6463A5AF77E9C396B60AC5143932D
62BD7454D7C4A190021A807D539C91F3FD1AFB8E35446EDAB21346AF2FED3D71
FD5C8356184088CB97755F3116CE5E9F6A43919D7E8B0F5B4ABCFC637803167E
A6E1027FF8BB76E9A5974724B91FF0437ABABA9A0D0316F88245A78056FBBFAB
29BFFEDE49FFA847654F564E1AEA4D2EC2DF16622A2429523BAF37BF555A0E2E
8EA5610ED0DE91985A236F4FA4B911A65539707FA4F66CA22F388B0BD6D57932
7DEAAB3A3EF313DA6EFC55D3AF10B647078CA66EB88EEA8E9B10FD57C4B2F686
ADFB72757FEE03A5D4B906997D57954A9202DCB7D6E5072511EA5EE12897B256
91DEE76790060DF52F752A1A312D0D8462C9389D0D7275D2BAF984A7BD8AD999
4E963269C3DDF1A67170CB45F2AC14C9CBBAF28D9B618529F7CD8EA038A4EE4D
C836F31EDEE844E2FF455F34F89764223F7DC55BA669B8793F48CA8E9FA6A593
0535277050AE35FDD9142B447900FDB1DA01F439DF170A3AF187C72B119BE5F1
9E2D9777719D6D169913DD90B90DA35A18C332D39E16F9F5AB7D81B729A6C836
F09AC718F307E80B29885BD8B971C8670EB6567AC29F1AEBF22F7CC829A95B90
E4D2AE72DE0693356B577AB830E3D8EA2FAEC76664ACDD2626B15FE526F0C628
5F7504E63B542F83821C56B4F4B8DAEC5355C5E3563AE7AA7F7EDAEB65D4C468
23E508F35C6B43C7C81B91C676DC564E456C4CE164EB16BEC026060167498735
295CFFA5275FBD6DFEBCE03A8E365AC6E1C941F994204D08706745E0E62375F2
A114F7BFA956A041F4BD73AFCE72BB502606610206D020115CAD32513D92566E
E90D0ADD345519DDAA4EFBF1D0D67991789F4B942C90D9FC0115D85BD7B8DDE2
71A0D13042DBFFA73E7C8537A5FCD09950C59D0B79467CED736D9EE1FC660486
A2193A1BF363855450A17C8992099875EB2CE7A8617184CABBB06F48159CF4EF
8690A2B50E739854F421F9AF8204F4A9F56AF89398AD5BEAE92F354A9D2A57ED
267707E16BAEFBAC5641828BC5190A4B2BEFB1750803D77710100B556812C6BB
0AEA2BAA23F39C7E68A73057005AE1633C8085ECF572713053E9222838472960
96BE1D77B862B9F111E663E7538F927A87C3FCB97298CA3712A5191B4D7908FA
753D997501EA15183EB324BA32F3259220A27CBD23A3057371330B4041566CF5
A666F3482A9FF563441C51E317A1C20944C84C955F1A89A13F2CB9198EB076A4
029497905BD4FE34394358212CB5E4DAD0698ECBE3210D354EE0C9414A490786
C04073D13898BE07DDED01318BC9A9C8A9E8D714B1A1D6BF89D4CC4937C5B6A9
5A1958EED1B1A35F21271D10FCE1045F505CEE705C3F01CDDFED987C8BA8B72D
68CA6B490E990D748FAF8CEF2A277D9F0F8229E041D85DFF60479439B959C6C3
C278BB858369D6D37C8814620146E27E3EB2BD600E815E4B59FBC32679188117
A12E9700B7EFE75E9D0A428270E1C017E33650E24F353E423A9254DC034E6A52
B28B062696D70B11E726BCB1551DC4A3348F9E2974800E6246849EDF70EF99B1
C95A296106DE15CF1B4D70F83C5F73E64910D1C29D15ACEDC458049F7B638059
7FD402B07EED26EC0AFF52F658087D5C67D702AEBF0B8E2F89B7E16817CD828E
6DB40B86A47A27C033E27BAACB473C78C1F0021E46CA77856A05A144DD0BC77C
BFAC40D30BA14DA5BD9E017D60FC01124BABE23FF62E75FCA2E923ED82B2F9D5
CB5D32B93F2CA8FA546DB1A5A2BF33C52075614978239F35C4B188CD14CA94EA
B055D0C89323B04D915DADC1B84A51A47BC4B37430AF88A3F85132DA00251F5A
4E3AD99E45067157B8D8BE7938866A90C39F3248962614614373B200825C05D0
5159B171C9034EDBD0E861C5A26F2DD38556C9AE3FC2B4FEECC7F8F63FBAE064
8833A8A814E536A56690C165FB39B8F0596BDE0D50274A1CD0DF7223534054B4
FC04E017597D1E99ED342D03E0C4B5D0A21DD2B94DDEB1F697D86AAE5286A0EA
A15D560501A4A39A2EFD22ADCCADA33D971AD09BB3CD3F0B7CA95D9DFCDDF72A
9117BA30602EBDBB815DB995569B3E9E6F95C41DEF146BA2ADDE6F26A46CBAD6
56899D01B503CDDCEEC86BF2BC594EFBA262EB2C414E43D8ACC9CB195D12F3B2
AF1D04D5EC474E7CE6AF8E5C9A33F4E490CCF863692101426A6A64F8BFE75DE0
BE2B368F46AE001303C0A8AC13EC20ED503815316CCEC391025FFF8E6838E92A
EEF0BE75EF21F35B725E4ACB5ED51FC702B8385C5CC30EC3F87B839D5D4EFFD8
613B50B2DF38EEF34AD0B05A9F13D86FCC931083C850C04BC1F7AD4479096446
E4FE0C6A3B9327380774B94A95A7DF70A4AD4FF3A6CE3B66E429E09E30ECC71B
411C533A5CC6E235B63CEF024C8BA292946383EC1E317C38738BD6A91FDF9E1C
C278145AA01E7F1410F42B94A43FCB541391F4952C8CC7CD303237D2A2D160DF
09A73861FA00291890482B8DE3E3117875E5A7F471C0287AD45948B2225F0183
BD481A526F5680F6A72AE88F51B5D7BC7DD0F437F1C1A89AFCBF166B5E882DC7
5FA05ADE88FBF2D6B94F12E4EA3A9BDB285BED83213ADC309CF4A677AA4C9C18
66F183AF78CDEC59A4699D457256F5098FEAE629DED7BC7DF8B3E12873A023AD
806C615EA1F11B8FE226AE94AEDA6C5911D9A0E6336E365C0AD3643461C09049
8AA7064CD84DC256855A3DFCCA8097A7B240A8362813974AAAABC799660EA942
EE4C05C7EAD9FAE31C48BF614B8334D94920C6ED826DADA4954E15008EA8FEC3
E81B8D3532498E7875E1593E1DF8C7B87BCFAAEA1E34B8938673AA6D760A80C3
8EFAE4126FA10EA8E1CC861B8131DCEBC3DD83D4918D2C6FF35AD43CF797B554
FBCB62F90A0A80260CCF63AAE519616F2372C30D6301C4C4F6D85252A14F0370
B44FF5EF5CBA63BD7B97C2D7019C9D7DB4E0B1ED0B680FB004DDC92731350453
40E6298B3B7A30E87F9D6EF48AFBE10EED9B1814687DD7BAD6C8CF1D70B9CA43
81DA2CCE50261937EF4988E7873DBB40270A199BF4E164BA835ED8A878735F49
09BFFA6FF61693FAF103AAC05C4BE35E62AE2E81125DF5EF1341A126980C7890
794A85EF6CE32D227A9535385366761E290D9E1774A0955F7A1770C2F25785DB
6E6118AF0336E38390D473C371FB1F39FC9A6EB3FCB5DBC4F9A58E88F04C3B65
660594E0C6B30B918A0DC8FB6D577AFB04FFC130DB27879AF2191145B1E92638
5E9AA69E554AC6C52E6C67FF1AF9B6754DB7CA7FCEE64CE0488A456F07342ECC
66E68B983E966FCFB745795C4D2C84B08F403D6A88CDF4E0C8D41C64B9B1DEB7
2F0E9058E1EE2E11F22B48101F2E0E89BCDD8B5F3CC6792459C051700212DE0F
2DECF50026C2CE0EA143A330D02BF42187450F1EFB412C14EBB08548C09B8594
FA27E14DDF8870E613E2C2823903980506A9F523F673BA8CF49FF6291D544F4A
780D4E8C2E7C08210E5CA3853F09523028105C2CF5A833247E900925AB5E6CEE
75B1741A3DD9230A4D6D8BA7D1E170C47AE4059FE85CABBB066949A02C4E3602
BF3BC82B897C7A9CE0513B4F6ECFB861950F9DE73BB3050026AB90EE57BC1719
1E745696CAB5C2BC92E5EB957C9E36680ABAEAAD15FCC0DE88213B28CA601D37
EDDAB3B8EBD67DD487340D1EA9E65A892A5AE88E593C73C31FB21204776A715D
E0C28F61B1C5B1B6CDE7CEF52EACD46FCA71692EDD0042913BDAED8DA7D7C801
6D0FBB00B80A001E4C647E2F6ED22B5745CDBF73203755E93290F350622A6193
571C38E6ADE19950D3A040283ABD9C3A16AE29E7706B4EFFB51B647A1A37AB38
7BDD3C1964019B72047991F13B71F527D425312BFD58FCD53D79FD0743AF94A4
BB66F40FD286D9769861DFE1683E2CBBFFEAFF5B2E565CFA592C54A42801A142
883EBF015FA81C1137F1F2C83C47168665599D948896FB43C31F703201843259
92D95DB9B45BFA74F9361A0D65BD272128AC738F96EE3094BC95AEE6F1BE238B
28F879C77F4A5C066C7C92B71201D625F00EEBB6FA5D427979ACBF85B44CA813
B50B9345DAC334501EA44EBA4529207463D3E93306BBF1450B0BDBA1789FBF48
822B33BFC5FAD73A5F0279D380C86A8C6A322C7FB4E132582BFB1566DDCCBD1F
5DA1434905C482B190C7FEB04E13FC963C0478D72B621C89D0EE4608A524C4F1
A641735601161669B687EB8F73171CF2722A8A64D56F9D6F5536ECACEAF139EE
9AFCECF6DA60127EBC1F408930DA173B4CA5A62F687C9C0E21F4DC65998C53F2
8426E5E4E2EF70665FA751137683D60698A3191D04A56EF39F058FFCD7E18920
6F6568173EAD97B8A6B47C1782CEFF81A78A8A42BD1C36397A2A285C4C650748
FFA9A3F5DA590132556490AA61A240D726BECA04F40E52362457EA58E510BAAB
41A1A7F349E237F52FADC2B4CE6CDDB4BAA9EBC266AECA66192930CE13565D09
82730A18055ED807EF70EBE57F1FB810A9FF291C64783B4A2CB9347E2251CAF0
8F5D36DD56EEF77CED335430E50BEE73E6D0A48998527FAEA033B10548BDAFBD
000C7D8AF83A20F9F5DB0FF74793F3C5263756C50B657BE012A4ED81A8493B15
3CEC0FAFAAED622EF1906F4017D3CC7E89BA81EE6E462B186BDFDB94FA42FBD8
94336FBD653E7D055B889245BB6661679F7EF91967AF1A659646C08C4908E723
D17040EAD128DB37141ACA92AAF43C014BC32FD730F22927CBA09B8CD2167352
E6BA2B7068E8793F1C76C3A2577467242CC0BA47B411DF2A9CEC3AA9D7DC4D94
16C47C0CA011F85308F5CE10B99E19A13AF67B93BE909C4403FE3258790FF1B3
FF67F4C958C9622C8FDEA1B0DB4E681C77F9494B0A27DADA058272996C60949B
7B5EE9B80D37D0EBD157481C66507725A0ED4A0BCC4BDCAB243252E9C4763668
573D30B09DFF1CD3E17E124378C3831944967B1FD708F9EA78FB55C05C32F94A
244D9C62352A2CF2DB8831D815BFC5CCB48C3E2DC36EDBDF4FC7DE2392905875
FC28D07872F48FED6814D3ACFE8D730216129FDA997193E779293A1C911AA94F
FBC52BE2AE157BA062086CAF2EA14B0C75E8E5D8785789DF9A6609219685284F
E6A4E39C4EE44BE4AB58ECC44A5F27105260CF2CDAEEEFEBD12888FF26D3263B
0B2469F8AE583976BB788E9B26324FA489E2DB14A9C2E1989EA4A1EDDF6A0122
789BF66501B14680A3B9650D6A4A06FBB205E243C953608656A6EA9191FB546B
B3433DD5E7BB7167FA243BFB37AE424572A24EFC245742B438E585638E1CEF24
0677571C65640378033A2EFAC8C4620EE68B793A259DAD2B970B9DA222F7B00A
29DF94657A86BE2B6A429FDCDC16A22EF6E1D59F1CC4D51744A45D997F3EB7E9
2A2386B678179EE7279BF20CFCFC70378A12690E0387E2694CA97578BD38F3DA
DCBD623C58374447AEAF3797C2EE47AD35BBA52F360E387AA6DBD6AF843C48BE
16A730E9A1E3EE6A8B541D6019ABC39591932A075A5F8DD5FC1640FCB2723544
574BE6FE1505687BC6D85E3C563E6EEB73BA022089A4C47ECF01BC0546393005
98A4A1EDDF6A0122789BF66501B14680A3B9650D6A4B310128E6EA1FBF971CCA
E4F84C16417C62E5891603D96E0BA462BADF76E107548BA0552E4D03D2F128BD
66B034BE9C77E57EFDAB7374603762EAAA72B0B40EAF78A558DFD21DBE1EB344
E7ECCD28B98FBB721C2095CA9E6E368E9227FAE260AB5109DB147FD7244018F9
B4B87C91324982E0F489D72EF60183D8F2A79A3AA765C18E01DB8FEF1D2C0B19
60B286C97EB43BDF9710A69FE60AD7E02148C3434BACCE7484B9F8E71428A645
1D7BCB8B75CC96E2E542186BF255B2894F3FE445439F65967C51EFAF41DB0235
C7B7C1D182C9CFF6BF212142E5DC4AB2B64E8DB62D5A9E7CDE0A4687DF29504D
ED589783E90868AD527C100DEB0C7D98EB67CE9C25F62632EB30BDE3A9C7CB02
BE50CB662CB93907D38FF8EEB225EB90EFE18D966FD332BEF4530B351B697B29
C3DFEA3E474F6287C87A28D5166AC107F3AA081661CB91E004CEE7220A24C161
6F138292F2F3BD650E492ECA67D539F5618E255701EF3AAE814FB2C017C88E47
8F892B195D82AB304A5263B0A81E0B593129AEC60243662D6BA88DACA0475A65
5E67FE158F4177AEF0B44D466103BDAE0D6DF3697FF03EF5D50FE6C5949E50BF
2533ACA643785CBCA1DC27157466DC2BFA3DBF496A99DCC954BE39E51507B12E
CDD92DDEC4F670A309901C67ABBC61FDF2ADD52E1773E48CCCCFA63DB5657C79
A4D8CB345C907AD35EB430EF00E0BF25E4AE612BCCE43458A673545480800471
0523E45435FF11922BDF2E74519F043C7CD8FA2E6C749D88789C51C25214B673
1BE0B8824D2C9D5B6CBFF1A9034F40380C23191D6BE40DBD21C85CCC6C44FB2A
DBBA8F7D43B332DE56D4A9FA975F2A33549F16748F7B1B043BC3A9BF72ECFAAA
DAFEE78E1D8D2B9E94AF57AE0A20570D88E14387DC5CD7640E6F9E5046DB1E53
D45DD080DB55540CB078B1921F6DE29913D2B6F1AE4F6DB85E249AC346F487B3
21AC8EF73111212085AB3D2D06CF50AECD5CB007B0B806DE5AACB3B40C2AD2AC
B2A3204F03427D0C1ED063F935C93FEC0118A7769B0E559735B6D2645F8EA27F
25C4422B243192B9041EECB10477DF43E91706ADA1B5B7C7B719C10C5A1B5B3D
54A879A753952B33B4669F562097A2EC39A7CE24DD0C11615D50D41B54CDC810
6E47AC23B920F7B535193DB8FA65557C100DEB0C7D98EB67CE9C25F62632EB30
BDE3A800D87A409E3AA30836AF4FB165FE08F16214F6DAC9E4743E0FD26FA976
3D1FD97BC35A2DA583AD57D3DDD01EF4265D882B3CFC3CD9CD8BE635B351BC0C
D505F47BF513B666CFFD1C50E9BCD1885D95B60048D2EFAC8D2CC30CD60E8D0E
067E2A3D0BE8B2D378E5E3EAAD4EA0CAAA2B13B24C7F82297BA7530C442B5E22
F23C7CC8F7E465B22793EF95F5CEFF173F2489F4F89E7B06D64F37B54A1B7BD3
85D9EFB01B024F768B5B88A93A38F93B29D9CC68ABC58F6CA8228F29E7E73BC9
CA5E20B1B2C5ACB7008FA7DD16D8820AC61CB9D9AE77DA6D70022E0D5A8E54FE
D45D6EB6A63CBA788D18B0976D0581EAAAEB4173E5A73A1A7A723E9192487494
B2E54ED83A61AD78BA441521B74B21C9F3D6882E3E909D80E0762C58ECC4E243
CD997285E67FC314037C7E13F3D146873CB848F7B16C9D20D8F785603AFB76B5
5C10426C6B620BF1890A7406C1F2D2C8479149B8F71D794844779E3E75A3B587
ECEB8350E252D3CE37E2F63D1B34FB1EBDC9A60F4AB8C27EF512F497FBF9633F
89417C286FB98AB2D2D3A6081AB50173A10F8B8EC1202C05C19AEE115A46C49A
663A888F8CE0A5F0D5FF99461F3A9DA8509E7EE6AB98B4BB88F674096A2A07D8
7E6D6EEEB3E0B000F04FB364F133445F9C935C718C421391BC4E0BDBECE4A7FC
58DCC2F00B5F24444C78F788CFD92119D251D849ED08C441FF305ABE6FFF334D
45238DD0FA9F678D4929D69D192707B1BA6A2BD2EE7E10FE9F30998217113414
AF854A8EC0F2711370C62D173C9382A085A2924AFA002FA83DD86D63E9FF5652
5C8B4B95D090CDFF8E001A877DD85F70B84D5618E5BCB7EDA43DD2ECA72702A4
357D241AA942314ED22A7E72D85C0B144E32263F5185BC8D9743E4144180D453
742E2F2A4089F04CEE35C0B41847C41C143A8ADC78D79BF9C74F798B2719D9BA
F6807337B8BBE3F300287451189B1B994FE998985E08F174464F63F952998C3E
D88624E8282F7B5230E7D8E6A2F20D8B4AD01B5C57AACA10BF7AF8245870BEF7
4C9E4F13E53738592F3693928402E8F72F56688B4CE4CE5A22C8DE2B88B70725
6FB5CF7087C41A53FD820BC9D6781BF275553D74BC0620B43981FCB5220A8F95
6C6EE3D3022BAC91E69FBD52FC3A58E651AAC14ED7D68DAD6C1C9A9D92397F76
0A3704F53CA8D5F03C3D9F176F6510B9526E94D4E38E62F8B9B96E2D20C3AC5B
8C7F1B25AB58E9494F503B3173BE4D4C48519904604D0F226054E588E464377E
8AE40E82E691D65FF8E0B31FB677B794DB2150CED6DF33254A6F34549201D74C
C6E41A619A6731D925E823F24FD02743A011A73815D792CCE38AFCF2B8619A7B
3889010C85B67B1293C4EADD990C8267B910D6A91761D00BEE1D55C650B06D98
7E974B3D05844540B49258AC85B3D065C37DC7268C88B10E15936B9D6996A31F
62AB33C815FA2983B7C3CFDA88A18BEEBB53A80CBADAECE82A3058836D03C5DF
ED192BFF3D1DED687C5025F9C4C27688B2FFF3F0377EB35E06463312D48584EA
1598B47E90268D1736F418FC7193127782371D3D4884B50E1295C517FC56BE00
5474C836A0A50D8BBB2E0EF842E744D6F2588DF12C804600B56497589A27735F
F3B9EB0A1BE8206426CA40C7F3A4A85661E18ADF577A7AF35D41A333B6E59942
95919F04C898AEE1CA2D6ED5112A7E67D718A1691F6A9FA20E758247355868BD
41CD7D18A25093E80B6B407F83A0364BA98C51D337115369B5CFD218652D4FB7
D50C17A3487FD2B14418E9D6D53C00701ECEFE821572BCA0DFF070EFDCFE8152
8DE0C7368A458EAC9388D39DBDAFE14015DAE49A11FD54E01BF3A2CAD66241DA
DC192686B6CAECFFCF287DAF70138DDEDE21159D90F8746F6D963D03D41C7E7F
0F79B216267CF81D2188516675A3EC77DF3CA2D83D7E517579C93C12E3F80E1A
B2B50446B30B31DFB9A5454E75F7C5F8F168231BC2D1D03E81F42D2CA653669F
010BE72AB60D7A00A2D1EE335AAEFF2780BFA07D77178F10FC477E27C780AC02
449E28A9844B267B7610A6D157EA3ADA7CF63EAE1CDEBED6E5CDB3D4837D5C61
442D7AE3543F3EC5C349D20D4CB4EC0A9B392729CD435B3D4CF6C5D452A51046
621D3645BB819D8C0F3DC32DF5542F877A14C85B1F12FF22794C96FF1AAD2247
8BE98D0CD6403A8C9885434D1A3B8CFD6129A8124C2B9F9559EEDA7A2229189A
3C107B6CA8758EC4448456D8F3243A64C811ED39D365849BC9BD8CB5EB1689D2
A9F6A87985E3B608FBD05AFB48BE99637818C6DA8AD6B8BEA3D2241A5BF8BD6C
D50744F2ED1866D50107820423330C27EED9832D3215B3B1C180712B4A6F4B7E
A870585E1052C8EE2B3B2B10399CA17B715C8A6DA4099DE693A71C6D0742E87C
841EA0267D10E5959961893ED525475F7908DDED57631ED27445862484D58C78
EDF6C2650B10200EFF9E8D6EBF66746CDACEED55FF7A4E26CD6CCD6346A0FE23
01C72CDB2334AE6D267A009BD0A11514B42CBA73734418A4A802B852FCD1E62A
7C503538F9EB684777298FB32B1B26325BB60D366F9F1BECC1893CDA50C92B82
51B45554A814D486398010E03B7B8C6BF7A17496B86DAD07A4C551076C7BA7F7
8CDFDC7015C27D78EC12078EAD75387774C835D13BC3565C99E5077EA55E3CC1
016A099016514AC7D85311A344432957EBFDA19A502E2CC0E9DAC44B994C1453
B84AA6759953B83813C9BC6DA0B17372105F841A259EF699DB0CD08D81478BA5
733A0E36527F6A177F5C15648503E34EAA16E2E85FB09BD5BFA8E1364E23D98D
DD5269E773AECBD593C4D7241629AEBBB1E1BEE36E654265AA048DB605B7E4E3
D4E737858D480BEC339727EEF300F2F9F46BF588F341F7F30441657113193A02
1661E4C8E29F487BACE537740A4FFB0807DEBE284E73D9D7A9CB869E34544A63
FAE6F3F3BC4DA9CA50DE61AE7A9288ED9289BA9835E4FAA631A9356C67AE4FC2
D225A0FB9CE832B9FE2ECEB383094A12BC15D95011AD571062AA370CDF22BCAC
AC6B2846EE200539F53F833F07277F4B9368DBFABD9C7300D3C2260F16403B59
EE51602342373870372657C5E84739BE9009067CBE38300192EED85D0ACE9EDB
14EAB77BE8F8E43C62752E52C38162572CA0E7C39D14FCC64D7E28D29F88FA3A
B0B71E3975EAC8C4A9FBCA385E701DF4F6CD25BDD46EF192F5D04FBE725284BF
19FC952FF8D47D723DCAE7E031BC6CAA66F1BC8B1AD14D60862AAB2F2AA9A9B7
F03F530456D6A2387A400C829552843B5D9A3073EF409FE1E0BFFF8D4F1056B1
8DAF06AF60F442BCF8DD242611A181E81292B6AFECE8D99D51BF85C630FD734F
51A450E5E8F261D14423545D097BB7C8DA522B23EC692230FC29DAAD83DDE73F
E877F8839134B934E08221807C2BEECBBBC3ADE8B8A4F274D24551F52FF4CF18
C78EEBAA02790DDA4FBA2693F5455BB10DC043C84A15F9C188FF1D9C3BA73A8A
85887A7B273A60D565A6F62EF6924B9A64C704103BDB20EF602CAC30E4FE9E45
F299EFF8FC80D699581ABA7D9D6F98BBDA827BF8D40654EE39A54A04B118AF10
776110E318873BED624E3B037536B5502C46DF4A11ACA54D221B44224932D25E
0EB454C6DC4E926352B57E7DAE80060272B7EDC9492C1FD9268DBEEA512B1FC5
5E137D23FE61B7D69D1EE48363101DA2C2527ABE1BD6452AF6152EE973DD1A12
AEACDAD98C8F77F4D100499847E1102CC075FA1210881D95D6E89666912171C1
B58B5FE8506C4330DA185CE61BE5B9311EAEAEDDCC8D794E5C43A108C7EF0086
63290F10C98D2B1BFA3AE03B452139F4E7D1E598FD6413CA1D5A257CFD3F1CB1
B2C991E35B1B8CDAA339F9BC3E575CE433B7275238CC326BF63BA1331B9C1D9C
FE9B875E8F942D62D08649C5C3A80DC5E3CEACD449EF85D68E16B5AE0AC88DAC
0775A3F971147F03E4C46915B00329A509EFD1DF7D84E6A0988C56A71701327F
3123ED0ECDF2560422F440289580730B8197C423312669E4B3F5007A5C4CD14A
589DBA43C39DF8A664335F67B9DDE36DBA793EC77E594A99CB6F9C79CF91E2F2
3F53483867B28723C5B6D838527901CE964232068106C283CA6EF3544D6D39EF
C993D7E6E59903E4C2DD633EB4094825AD48ABBB172E719BFA4C7A4D3AE856A8
DD167325A71637E2E92F094F4FCE9FCEC400034EDDA896D6075C4246AE841AD6
A54680825267D023FC3381A9A2CD89BAB8C9138793AD2B57A35AA33B5B047A53
60273F9D31AE43DB1A30250CC03493B12594C2028BE191D58D0BF8530DC04E28
52BD6C753851CB3588E2296A1FB4DE30AC9365B1C466151B065C5F5C6552A4BB
658B7FA0629888C1F8421FA081536B8F54FC01C04DA783F147C5D6156425A733
67BA06C9F34452627797818C1854EDF4A3A7EF4A4408103F69C049BD67CCEBBA
E5B09A27B108D571643BB54798D0B587DFABAC17578264282228ED7BDAC7360F
9F7F3BD2779C2C6F3321E65976588BA3E06B15B160D292EA850EAB71E7D557AB
CE84C4D6B4B817B122CE21F36E4B7B22A124B257F63681AD51E09CDB3ADD490C
306573DBCBB1B0862BDC0508C867FD1BE057821BD33C72184C294CF173FE1239
491352A80EC7377F7EBD25E0D19546C10DF547D3529C109CCE1864549E581985
35EA5900C0F4E45FB6D1A0B2B781EA1714CBB8EF011768F01AE2206E4D672D13
06407D69F633E5C7B79CE97EFA314B96C550016D504DDD4A952944A2F6CE7DC1
33ACE8E6EE5C040A1E996245BF51EB4895D4358CB69DCD788077D72445617BFC
36D07E89110A0E44CFA2460615EB10B0859D6CA9194A2EB640F2E213494457C4
32214A3172F4BF64878D79CAF427454F554B6B6182B53B81600AB819F8FFCAC5
9BA02A0CA7652FEDB14391A08D3E34061F9063FF0487AF093B263945EF22E686
C5BBB2FDFB71C20F400E05AFE3DC207C637F63A1F68C6D5A2C2369388CD4C973
2D1DE8C9A6F35977B13748FC54F228DFA267308C72460ABA48B2BE5A83FBE336
D8487E83085A65D41888114921048B0DC7A916CC0B41CA1E9391A3F3897755B6
2E1D6D0028F9A787727166AC25690069E426179BE8B6D5ADA064523E0CA23DF3
473D9875FCC11919602173302E7A8703A70517C9FE24A6930AC314870AC4DF7E
EC40458600B1A87AE31E65B7EFE7B1CB025613E53340F6E9D6C70A9F2C9E7252
BE1D248AB69549E7E411C539F556A3886969D17E57EA78AD5E0DCF6FDCD74B20
483D8DE549181454004F18A348FDA4446E35C019B5DEA80922FA81013478FA5F
3EF565FD467054F186AF09BEBDD8FCFC81C42C1A71B67E0453AD84AE83D1FF79
39A1123F7FE4565F94D372EF9AD5CAF181F3D89F58C9E8046BD61A8D95ACDFD8
3095F12138B5F48C5EC53F4CEB73912C9B769C772FB4880C0A85FDD4AA59D7B6
4AD40E0E8B0D19951515A6EF4DF74F010277DEC27C2DA43A817662FDF1896DB2
04DCF5140161C27980C0B833315629060D58E961B9CB7015A19980AE9B03EA67
877FDDED97FD7C9E73DE4D6D4ED370EFA5B66CAE4EC64D8234BEB4BBDDCEEBD9
A89D932E55F14BFEDE892EA84F4D412B79E8BEA7A874EB87BB445B41C630B24D
AFFD7E650438288069D628D6C6432B3DB333A2E205210E615B56BCDDEB8E6889
33804EFBC6E426304294D25A3D7256D18948A1809D2DBA95373E39D2ABEFE980
2C6B34B5457E6E48141D58E82D248A206E80EDC58ED081EE6B063A416ACB9550
790198029F2205E51C059FA4EB2B420D2DEE2C6D4ABF100A811C890C3C91643A
8E97BE33E0E0486A1E7DF2DF921FA19149319AC9EAFFE0620B053F6B7C7413D8
C4004F3D9DF8ACBEF58F5C3EF8B4E517A4ADF12EC18C2E8EEF843ED96AD6A069
A7DD0AD9BAD53E4F646EBB7E641E5DA8DAB3783A1C786E83CFFFA66D1C3CD574
500FD2FE540BA2788C932D6C9C5F29AE7C893FD921D33DCB33DB8F8399029F62
79A810596487E75ED2E852BC1E2CECCB517109806DD2CB6704EBB0D4389D1217
080B71CA657E3502691CF790EB99F57B180C4BC71579F931A98487406EFEDE2A
2CD2042C90ADED9A98ABAA446EC08C05CDBB9C8642FBC085461C1F5C08F42511
73001AC87F435FCF938729214C68FFEFCAC997EC286F30AD0245F17F9E0E9E31
55CB94633C9CA212ADDBDCBDDDA4E87A99D8F6B2813F3E8130E33961FE59835F
21DC12BA2187816B5225803AC6C3532C8392799D7238BA4E404B7D6D1F2B1CF6
36704F0E95633C6E65A6507983B4F3E713B1FC461A431D1E90D75AE565E857D6
92570D2C6951438E3840954739AEE6D7F0F17E613C8EB4385862257D5F9A72F8
64398C839ED8D858AD4C773175799B685B89D4019AF201BE8C5822318FF299F6
967B7B4020B64FF37AE7FE03B2BAF6C01409650E70010C2E00EF49B371BB12C5
CD8D2863BEC18DD5BA0988D92C18E7A4142F2BABC8A90D8BDF58A62B0B65350C
331DBB76C2CDAAC30CDFE5DA4D3025E2FF4E6D0619D0CF07773ABA7B3172B6B8
8FBD341CCF6BE5258B4F80702ADB06D3B54DAC05EF13006A116C82E1319A636C
7D42C6CAAEA8F7C5FD4CCB61CC8B279A83B37EECE68CE511975D6DFDA3840649
A16A26F5B8E1ABE5801C1779BAFD298E2656769CC2E07EC3CE9F66ADC963C8DB
41268A921F6C1C87E03C7A913D223062D97F00F34F32A882F4AEC19C3A80D9BA
16D3ED13167524122412918F76EC614BEA4E8C50D023699E32F903296B80F806
7993D8515F931B0FB6577DB4F466257169EBEACDCD05DAC09309DA380617FA6F
D19A010DF2210B0175D5A076E128DC61CA98DE03B5497A81D68F1C89650DD101
76D040D4A59BF74D1818954E554478F19A26D9BEC6A777904EDD6949D621BE87
9C3F919FD172E1160FA3192D02B42E1A706A9BCD086545624119655F0C550D62
DE4356990653FB467B0187BE466372CE7D440690CEC6D8F706168889EA49BD5A
2DFAB27F36D098C68EF3919FE465EB9062FD65FB576024A49017238F7E14B664
BF15DD89A0C4DE78B5DDAFA9B3A1AA0DCFD3084041EEB3FB09643D346C85D389
DBCCBBE4CDB47B982542A634CE0B60E80398A58BCA6B4D2C0ABFD1652B8A4951
17176884F20FBB7EE5B5AFFE6548A8B4951BBF5BD79C997F2B2DE373802504D4
51E63BC860B2DE8CFD8F3154B536280CE93FC884EFBEF80943F7692E2DB714AE
2FF18085EAEAE51E4D7B7D66B4481823B60F897803F21AD31A41F2B4CCCA221C
3A82A0D22737C29949B8DC5439B0B9F7E3F235D70E925257C00FEB6A9572EED1
6A25B6048118C5EA0028662897A5699DF8A35B6A4B600C1F59DBA1A19E96181E
F4C989C7B3A74727AD2AA6306C89D289A05C03587AD72FF30455B7E6447D19E2
611C39EC0DE9AA9AFA16CCFBF267D24F99D24AC9D5C68EF6AFA266D0935A3C5C
AA865047F3FE900978937F5C97252EECA5CA374B61BB55B81D7C8E44625D0544
60A511969D22D006CCF5CF9247B52021A099C3A90E01BE3C12D20BFDB10EA12A
950C5D06119DC4FD9EA19869206E8F3F21E687F2CB6EA298ACBDFB0B8BDD8642
1400B49D57E5AE8FDDED5D706EEBEA78A6B3216CEEDB1DC252214E944F88E390
23E2C046AB1DDB7FD9F40D12C0D6DDD6E89A3BA6468B6322EF1EDB60717F39C0
FF5C49D1AD996A67AB0914D83D859C06A898FC9686AEA33CBBC14A90191909AF
AEA9BDCE7871DEC6C971B934A2A15779591F6C524E567539F9755A15D6B96CFE
BD0E659522BF22518338C587CA29D15DEEB454E85D9F63262128D6DC76A39D1F
9976A51D4B6D520DC129B815AB87B6868F0D17CA47E17CC3DE52D67EB724A88A
A18F1C1EDEC10D069FBA4689F41DEA930145DA9867B7F0B0630A0A9A58E88293
2ED1E4292517107A32A2EAC63B2BEFCA6E17741DF67FAE0F0348D3C3EA3B0359
857697C94BDEB5DD87563AEA655AECECCCFAEE257464E95D40742D9B5C025405
47A3BE723F2374DC822B9A93A165292E8C9CD7F72DC87B7D52323EBA9C5561B6
7746420C46123162295E5C1B8D5B1F8E0AC21F2EA065FA83499DD64475216C6D
F39E82A6AF85616554DD298CE8B1C767B5EFDDDF04A4D7B4A327D228D4B1121B
69777873FFA3CE946C40B4A6BEE3B6989CBB5160A162EBDD333C8A60E409E47D
C3E9505A3B5D6021D156DF88FBD611623CC7436D9FE778B3858CBB257ACEAA34
38FAC6FED58A77266B06B756BACEB5FCD36A0F153536DAD78AFBDB61C96989C8
87314DAC65BD948453194CF67772E6C8D918C05186F56A089E390113DAF618B3
39808C173E0F1483A474546E37FD699818647DD35544509FBBD85CE709D8AFFF
0D1623C49F3A52C4EDA18B7B6BE5C494D3BDB679DBE77748287874E7DB593866
FB52EB9EF208B1E3BA50C71A40D7AED32A610FE0495715743C9519AD6A1C7632
66FAAD8EF6D6DD77674A3480CBFA62794496BF3C5BFF68A3688AC93D924B3D3C
F5002F91C3255FD92C06BE3058BE14B4C59A1AD1EFBD0B82213FD463BC757AFD
B1D27EE6D7BE7A1311BA3AD03B0A0B872E5EA8412EBDCB9B4085E7065FB50E28
631D2A286B9862B0C69172A87E6A5F3E725306177D891088643D903CB61F15D3
F92ACA8A4A801ADB04F4C74BE0C7CA9C36E787862910C4D664D97E1B7B1B1505
B3F1266FB8568E4BFF0410C077520BC1926F051D0EE5EDD68840C6134EB89984
A6F108643A52D35415BF8CDC08CAAB216004EF466C70EA68992921A4E132AEE5
BDF71E90DA34D547ACCA61BE6D41EC33B774876DB808E242A05D015A9AC04210
86644A3D901D9DB26F16D7AA211A1F42775B78A580BD474A191C69A10172E3A9
ED98AC9BCD9348FE0756ED5627E1C049C74EE60F13F2CA6C20352FDFD48E76C5
737253FB5D2AE6A9BF73C0924B4833509E1FD13764C388C1701DEE69807DF564
84C0EB309F2880061C3A9806310B42B9F583A598CC4010AF8BEA1DD87B2DEF27
C813256B70E7582358EBC03588E4573E0ED910DDB31E7B4B4B6529CF2EFACEC9
4B27EDECD6D245F8A3D527418B5A668DF06463201B00F833E0BA2B6DB1BFB84F
A980E06FE4DB4778ED1E2057402F913F8C64B68E84AB3FCC5AEF37DB709AF088
DF32159094E5D70D7AD6FF6713EA292EC1AE9E2DCD9DE0EB684D4AEE90E9E86E
61B0482F8FF93B7F1799AE4E4B23467EA133125298BC85BD9A4913F440E31B12
57E66CB43C6129ABDE7EC66EF5DE7A5397E7B6A1F52341529321ED40B9A12827
E0FE615262963BB73F8C407C183E0047942C30D0690D29372103FD8A2DEFB637
1422CDD07263005CD5709C1A0BCD3A3AE97EFA7854C7045849DAED8F29F582ED
851D8C5CE99930FA1EE2C24693E3CC7275ED0C46468A672BF2C6B459631D0B09
7082E735F9D1283C7177850CF4EEC56514FA81E1ED5B29D1B083587C6876A14A
76040F445F43FACFE8DF1F7B0A69CF2E21D1192D110D083804EDAB0BDB4E39C6
C5BE8ED9B7AADA48E5ED3A2BA43BA9064D59C171AE87BB22E47578A2B1EE5E4A
97080AE32BC92B743550AA16B2AC817E73DED183E84CE1BF8F83F59D19204580
00AA7477BE91719E6BE6CBEB98041B197FACD07A7E4A5D5A409438162507FB01
8964439FA7B3877858BBA8A26697C5929DFBDD45D8A3A09D09EBFEDF3197A579
6A23B927227E51EE1DE59290A078C85A84003435A91198648A941C64D12FB95C
8CA1C4A297E4782B90379F6445BCF144A9DB59187763E0E1C8005B187D8321A0
A2E2727BBE8AB6B5B12EBDDE457DBD6DEA9512FBCA29385BB166B59B9D275B80
E929E16EBA03C74773CC7E21368FF176399BEF9EB82E6BD016871B1147B362BF
40B39A424D71AFBB26D61E5570EA404F52028ACE28D99D12CC60A57719C7288E
99872B907D5AB583B082EEED8AB079C005B4942319C28B522ABAF817F506EF45
F7262128F933031FEC625D8BFCCBA22989B5EF327086076DA15AF3869F3A0819
3772BEE2854B571F9A985507EF4ABC1A7FF58DCABECE3E39354BABBC6606B1DF
DF91D076228D1487646D225EAE85E5CE593D4FFCD7265AEFE9BE36A4736AD582
A1C7028DB9A3509F974F409FA0B95E779F2E90905E4C45112EB2514544F94114
01FEF77C14FA64B9665550C9D24D23DF79874EDFFD683599494F1332307F1395
19BBC569D9F80305E6C1C2C634E83B6570EBC5B25A62FADF6268CA71BB04D032
3445D7B0D148E1843D354DE9CC8EA923049847881947ECEBAE94FA366C4D4821
54A0B8594CFB6FDA31D6CD94A54CC5328E9F3F8810132423033C8D9538D80BFB
60BE92F0564DC2D7B0DA6294775595ADCA18755EE07CD09E659AFCA8880AE784
071E6B3E2101F0B663DE14DB1ABF8B7A036E43021301D083753323D1726E22C0
4895627F005752E19419BACF04FFFF38E09A1337FBF361E35F61C3870E48DC7A
C4D4B4C56E14EFF907A412323CC89CF70587928AA9FAEB3F82F7477A180FF32A
9FCC71B2BE6627A363F6E56492EB7CF0ACFE08BA148281BC3253339CEE5AB22C
B9A6A03E80DEE3F0D6CEBD754FA42984269355B641D8458A5242D904A89FDF93
A8C0241B757AF754BCB41E76D0E325ED474535FDAEE928681EF627A2AE2CC3BA
BA111186A0F38F642261843011FB3389DD944F0741E3EC779A517C4D6040629F
A35ECF5F72BC11EC545E872FF871077ECD6D1576A4D251D16BB472BBB8FB315B
EA8DF7F3FDD6AD5C4676556705347B62B0A331CE6C70A26A001D0AD6BC5ACCCB
BC4B7FC43831FD101E68430032D2E13A87CFD96F84E2217976237E6931B2B1B3
9FE969E6827F61C86A04CA80453CECF7DC9347A8B3B7936BE149CBA9BF159EAB
1127EA69CE677700D948C231607FE829CC65E0C02E0F680C6DFCDE0AE9FD7B37
3A6FD60A7386846C9400E70CA0E6E114DD647EA20144637E97F8985B6823BC95
500AA1711E0010118D32AD38C788FA12D3CAF0134F9E19DF8F5ABD86CB0F8CD8
33BB389A3238758A19661381D5725DA60EA15931ACD471EC740C47909E922340
68D477AD5E0723B56DBAB84396FBED9A4F0B1DE1C9A6E8795A982063AFD6DB5F
0D2464F6E2B0DBCD892EB313433E9F14D19AC467D943E6840FF65A7F1FFE2892
0E6A56DFF7B23D8A22E7E607932186EDB22A115403A2E98751D63EA6B85C2662
702FD59210214F885322208260BE6928F42E3A65C2C5B0C7A8CBC01F885A346A
D0BCB540FF5D3D13C722603FD1A9BABDB6D613BBB42CE83E4546F0351CDD7703
2774ED6DB52AE859135DBB27457FB4CAE16197347611DFE63DA3C7CAD03E819E
AC5FA15D4CC6CE9D649FA991943BDBF66C0FC4DB76325215AD4ADA1BD57073D3
599C70DBE028D8E8CCDC9AEDFF832696F5CA0D4BD71FC54A1D783BF12589CC05
EE0222548F777C6F46D9DB9FF3EE0E30C3F4E3010C569D965199B413A3A5A7A1
0D1BFCF234E51DD318CD61E6A9A737FFD256F1721BD3E6C9402E603F49A26F9E
5F210B14FD085B9D03597AC3B18B05B7D271BEF9B8173A6C4B9D8BF7AAE1EB3E
34869AD5A9FEE87CB3C125AE6CC4F3ED44BCC5D29F88AEE951C2452D22AA967D
32C3F37A926C6AAFA38426BEDF26F171C5F4476D13F21A10EFEFD6335F573406
56AD0AD918478A0A5723CE2F2327863896A212E39C9709ACEB98FAE930232779
D72737A8E928778827329D9896B3397BDC3E29ACF32F3DDCB4DFAE3CF5D81C5E
4F00EB378B49330703010D4E05902A7C8C4B8267E697159970131FC01DC474FB
0F3625D327174F3D02613C32B0549273DC7789E792F012CC10486C74A4B5A35D
A0BE7B50430E38009182BA284584520897A5597C22983343269E8ACD6D71F59C
D9EAB0A228BED66720A335670FFE852DE1E90FFE9325EB3E9F8552091831DD66
E40A7CA0D16DF1D7F7DA574A22DE55DB53FCFF7C3CCD33DFDFE50CC8821F712F
88F0AD61BC875165F222C9932AADDAAF0877909FE1D0BA8720C1A79360150284
80F2CE7EE814B92E5BF5A8FDE9FB408F222758ACA18D93D034D2C6FCDDCB303F
109538F61E5FBAE613B8F5874447F68EBF491EC591939D3D0EDA0F4F7211B5B5
CC0A348F325F3E455317817E89B3226F5E1F4560A4C061DD345142D8F2F4A85C
D4B937B3BF4E30B7F299551C64CDC751AF70E5CFB610D08B3C32A76031EABCBC
E4FFD0FCF3B0B3B7A7E6E1AF9250DB16E97039C5B076F16A3A6411A3D4BF6AB7
84505E4A705A4EFA8616E5BB1DD3BAB615DCE159D6202519CA94BA0197C44A96
F6CD2A907CD9C568452EEF79D82CBBD43E2C84884AA977E5C1758756801EDFE4
C8BBE2482A44745921653201A8230C66DEBA105E89909D76D034CCC5AE0CFA85
6D378DB18B9B53B5CE3D6502E618C15A99F59B003164894A6EBE602AB3516E55
F2DEFC513C5325370239122D053571DA8E024D71908160B1EE7C648F246AA8FB
60C78E17A20539035081D3C4E787A2615DDC9B82074D8BD9BF9FBCD32E828091
F08A979A57E42CB409B95856713367D03B45CE402700E4F6522AC928BB0867AA
56FADF3E6B333E311DE51A405899C9A7E5040AFBAC5DE1EFBE831BBC2E726F95
9C04D04EC6CCC6D5C4515070E4EB6AD12CACD71DD8CC8E92B8B2113F18BDEEDA
C05326BD8683BFD2C68B35CB48DA6611E0ED9D102FC5598792E6234F866F663A
16A1FF36A58BB760E6EF4D9FD9B9448A7DD55EFCD63E50065176F940F1D27ACE
24FA4FA7A0003AA4B1AF59E6453DF094D14F4872A43313DCBC5C1783618B011F
86C9490704010EE379908BCDA0CCF76E2AB18FCFD76548FD63B8AB41F3EC4985
238DD59FB0FF0C7BDC027A34721EBF9414261E4D0239A817E17BEA1391033591
0CA61F5B4984C9A127C4BFEF9A37AFB047323A08AC7AD4E9217EAF912C86CB6C
D5BBDF8E33D23F4B11BB195452F6D1A1689A2BBAE0007448F083D0FC5031E42B
976BF76149CEE298FA46B57981087E3BEEF94B1B997B5F1221071122721945DE
6356BA976B0706891C88BFFA914D4F014978CD1B82677EDFE86FE96FCBCA1F49
F00229D451A1EF41606741B4D4B66EA98DD36C7821DEFCADF80827847082B56A
464A1678323D1170745E934B3AF7B1F129E5AC8D5A08F412AF8517FF58B5DDE7
0E3C799041CB947DFB1B7AF164186EA9C5E4B14BF26A5DC40551FDC72EDDF858
2A0190A4380917962C18EFFC6774F6DB08B799C59665CBC269273A8F41970BAB
2954362E6044ADEB48F0897F23FCA38124FECC7FE8EC0B4E8A2E1751B3F8DF5F
77D27542FE4E1A580F98F4F66C7DC21C2259DCBC688CFD5AB16724BEDBDE6AB1
CF0D1A2BEE1E1B87180B5989F1706873C97E4690B102B3BF7DEF41CA3B9DB089
C0995E743FAA61DE893D5572C513E842F42BFBD3511F4ADEB1E990D07CD9D96C
68F85DBAEEF21A985298438ED1C323A62C08651B2319873430F7A77AEBA7AD8C
EAFBD24C3E32A0FF57D067A939E626587E6290AB1C4B10165DE8C3E9109949A8
FC60CB10A54905318C251DDC89D151D76CE55800D3D730F0AA1EE5DA3CBF626B
54567266EA2F4411EAF07AAB49611D77D744B4F0D4BDE28886E9CC715784C7BF
7F0AF6DB243DC26F7E78A183793198838A2416018B583A55803F83C46A77BFE9
4D5F6B36133B9FFAF07082110264E4B8239A109EB96FF071BC1C3B8023F9F47A
64E9F02623E0997204F9DAA696FA9B3C3E63A7C4DAC907E3B5CB7A371359987B
EF99111BABBBEDB83B50CB2D6E44036DA3DE4A6271724CF132253C51B9E6E27E
63511004A58EFD38E70DAB7E0EB4BF568943DE1A68599EE7FB05AB9CA7EF6AF7
AC1080171805995CE8A8784D627CA29D308EC57E780E8AB335EAD7599B795CCC
50A0B7FFFB7DE0552ADA3E14BC325A202745BFC6F8A96514E8E3944BBA140F2E
2B088A99EE3D643F465F279331AFE6727D172CF5DCFABFB73E4152C23C1D4F3A
E318FCF4D6FFDD61725EB560043129C52772AE011E8D6B64E33B706CE5CE11C2
F56B0CD00F8D7F261B88F5A8C73C72061D9C3DF3C8DE35F9BE0DAD9A5CD25D03
BC8F791EBA56F1F2A4F3432E34E5CF9E5E3FA70B901CD5D2C49144778CFFF1D5
B63E0996E1AFEAABFCA6808BB06DC14D7944DAE807BCC76E544B18C125A6847F
CEC335A1126ADD87E781DEE29449C6C8051F0839525FA2CD9E359873B36FF811
229EA669C11B24C2574799E750EA50DA229B295EAB9A6868F247C32E1AF3FDFC
F57B30BA74FD38B809A9F29B119D684EB5E119223D0B5FA38C209AF97FD8CE36
486C08C13FA59846364CD8E02AA5A317218DD1D5EA6436A0224D41C842816A59
F02A5610AE8838EFBDA5D7B525C23E2C78194447371F903ABFBDAAE1BEC4ECFE
B38C54549BF4C27D2C9F792B3263DD1F6B68B75C375DCF494DF36482B9FA386E
206881801B2A9F3A9ADCFCF2099128D1C3565C6F5FC2D898DF566406EB7005A5
26481C611D9AA7AE34F17DC740742D351A4140ABE963649785F697D2DF5F0241
C05C449D8DEE803827FEF845B6BE5E2D7E3FEE447977657E7523CFA48B4BACC9
29F6ADAEEF5E7BAD6D744227137D55E6CBC5BBB47E6B882EFEDDC7E7567F1166
54EF98052AFA608D66182FC24D958EEE7916B8F61E80C24FABF65D4971C1C4D7
39B98F0520E9FC0BE0D2AE0BDFCC5423AFCCA766BC9781CBA70892142F38F2E8
88245721D1A0993C892190BB9D558E1BBF66C0839F5FF759E791EF3D8B4D349C
E609E95DA8AAE4A6F8B0B2ED3A99469BCF9EBD0DDD40FBC7C446AD7AD4B729CC
8A83FE931F3FAA1BF23A0AB1328863294B30F15695D26DB6721C4902FC3D09D4
92524EC52CDA5E1657E4537B85E735BB1BD8A4CC1FFE7945BFF9106EEF27F93D
BB0D1FBA3FDE58928B59A875DA76C25BD6AC1B65C5315027F8428A37E456A434
71215B28A47BC34E8F14FCED37A5BA9D6EE10F7A3EC03DBC1045CDBCCCC3950C
6C443E12E88EBEBF84FC98ADD44640348FCC6E9DC8D2AE48137CFF0EE7706806
5DA97D68F8C6D3D04ABB46F4D5BD40BA8B4F0B783C1B88EB56B891EB1B77A489
A8B334B871A77E1A149DE2E1F7A245FD601220810E608BB23B16F0B5F097DCAF
A7769D1C34150B85ACF426ABADE00E38283AC3B77F8E1CFC96DEC689CBADDF0C
DF11F7A5B001BB000C1A13AEF83EA3B3C446908BAEA7402C869C96FE84F3B3CE
6AFC58C3861921902E1449012FAE1A125B67C35124F7023E174EA2E40C5DFFC2
9081D8B7A384A091707C311DAC69AC55FA60AAE2D7B8043F60563EA293F3B8E4
8345FC7CD0268AE9703CB0B8EB1F74EF96BF7F0D6560CA92BA7115F3DA8D793C
576CB76694E65C5978D51605227F3877891FD2C7946A294535256455C0CD6697
98CDC4F9C991598A442F5E753BE84DE55DE53D7F539D950F0A2EF4A597C5C5B6
0ACDA971FFBEE3FCD4F2669AF6310773AD327A121BCF25DA29F310C79BC8CCBD
FB89A5A625971DF13A45B9F29FBC5FFF48486CB00DDED73DE0F53691D8CBEE81
61AFB4B7D6297FA5065F8A3756EEF1B469B33A0273D67B80759B971A0180BECD
61AE57B340190F11C953C3C840F9AA9A81ED27E1F1CC43278C4536B421422219
F66765273DA98B40B217D417FC1671431850EAEB9D5D3134A258E9BAE086A201
F3F645B7240252FF8AB59913BA845E2F30C6DF5FA2097AA316736E7606829EB9
4E1A0961EB0A15279E4B6C610D2AE01BFF9AF25665AB08B30A1DFD75D77B2C92
BD3B098CCE53DF66787012BD3B76B164C4829B9DC49F73A2FD6D64576AD8B5CF
5682AE78C13D204C45DE18036A435FA9FB13D99634D3BDE3E416E13D6B81D385
ABB2A7EC6C2ACD1BABD1A329BC5CD86B3AB41159F5013466FE35AA58EA2E08D6
82C8DEA74D828CBD301223C286892BBE62A0E8AD4CC1A2382F3B05074D4D5FB3
71E5BDEF74D10FDBDAA879AA9E3599F34BB70B9DF73D172C07E5378B12A51BE1
400C58FFF6BED14AF900E839024558941C04EAB3557C5DD9D5F2D413C3428866
3059560BABE1000F4B6F61103AF57ED0F5B6AE2AD63A97B5223D0238EC7B1231
B01303218F0606B8DAD81F6052F42D48FB4DB79014D450656871D2E3A632225E
B32FD12B06029590608C642004D60A31B904FFD92111370B75B869EF38C5F045
3A383AF2DD6D4E50A9FA8A4A16C4290E9F49EE808927A366F4140BF9F77130B1
4F10E7F12880A3D2EFB533317418A8E967497A7AD2966889A4E4D49EBBA6321C
0D063C939DF29026E83A124A570B365420E2BDF7B40B901EC631ED4D51E5DC52
B0B1CC3184445BC1F06D53972F77405C73FD4060EE8A895195A237D07B135469
599F7448C14A2C2678C38EC07D0975BE3F554C4C8B46FEF21875B7E880786606
51EF4103344E75BBA297ED8A9C6A2F9E16DE8D008A4CCC5C904A3A38A7903174
8186BCC54809F1CF0E6BFC78FF8DD4161F04235FEBACF1E0FB120C7B2BD3A3E2
F9A51A377E4C70072041D5CAF306FEA112983DE9773F6AFCBFAEB238260793B0
CE014BB6980C4A8DDA27F19D50CFF1C8E6F1ECEC1B38DE1451C32BF8AC988930
52CDDDF5397BC78F7216ADA21CC16C258376CCC9879C4691BEF801721B77CF73
A83728FEE4EB7DEDBA87864489A72F238A55A5A3DF5F010E59BA2CE21646DF0F
8EE0B4FD7165E6B70F1811723CF7278B4E5B79E2F1EB91E8328FF2FA56B2296C
B085274D81933E3ED8C5EFE9A010C8912CF8012DB74438B36429B0F10DC929AF
81FD31E6CD1CB8E8CE8EB575B1704F818310322C9092F874F8053C30D80F5A47
1C1AD8641F5A34BBFA8CFE382A08332747AA433E27F30AC6807B714B97E6178D
3FD8218E1DFC05F7366355592451B9C5351C855341C52B52D4FAF5A2D1D8894E
3CC6D99F28EF6044FA401BD03E8A58AA84FA53136C003264DA88D949C75E9006
57F018FF2277BECFA4AEBDD3F63DB19D235DC218D25966A4C06E0465FC6D6447
01D28393C9F440B76C5037E674C852ECDE5EF957730A4F2A4472A55FD0DEC2D4
C154023884571D30890AB8D41D661554EE8A240688DD74CFAE7D96156EE4C498
C5020F6BE490335921A92EB04D52A426861FB9F4EB29067EF2A339EBAFB5973E
131322CE72EB417E9440593926F41F100F5A740460BFCE9AED5DB6D9853B2C26
9A90B94A4F1A0ED689E02ABDF5C475B0A8BF9F1D9E6132B5A785E7C38A205DAC
44063744EB10FD551A46E464D3F767336D2311D259A5E54D46ABB0F8A0E162B7
EA5D8E4F27CEFF7C1F581E23AE0FEEEB644E21203A1E60E3A07C23C74E7DA8A0
966F9B663E31E89E57B70AD207CA88A24BC537BFE49426E325588CB5B5C21502
923ED51D33BD247A3142F20E83196D9557
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C2D74449CAC20DBDDD3380C5439DCB36E82A5A
72E24259E976632937402347FE0E201D60308E19DEA3902F3C361CBED5CFF784
282EF746A5C778F2C04047A5CBDB888C84AD3CF84D54A2CAB96E83FFA40604A0
1EC8E8810CCF5AFC45FD42ACE7AF59B50DC33F7A65D806A3FD22988D44043964
7B2BA0C7BC5A9BAA7896608E7C20CFA05F71EE0B7C7B67D8C7AEF4721E7BB6D8
AFFDC6C60F4F30BDAD96F4316349A0C9B26D646AE3703B6892B61D3CB4AB4187
842AEFF43B202FB9C5CFBABEDDC1257ACE67CBE6928F02D22F3D0EC630CFA02C
0F9C4E60E3A54474E96780A532F3F6B1F8FF071E03D1BB27C6A591AAF6BEBA12
81240CC0667E2ED796A8D6BC9CE98F2B71D9862113C69F0ABD2C8E0CD7C39008
6369D35D3E5A083C3E82E9BC568943DE1A68599E2F3EF62EA528B388FB28E80F
116D6062165B9EE0BA0C870AB44BB1683934B4D4429450A21C9EA0419C3A9D9E
4014CC17E17E0CA2B89117411197AA294D99144EF52364BBEF00969C9FA34784
61D1319CF4B7FFAA33E67189A63DFEBB88CCFE63251C667912F605356788B310
59712DFECD2A63DDEA51BCC61B14C231ECBC73C511681AD69F4B470F2ECB11C3
5BA9D7B664BEA7448A6B067FE9BCAA3B24E051FE87B31B6B7BB613ED01CA4D65
F79C7CE47DAD329C8020A4D71BE0F7AACCB3BE5EF63B1C4E79B49BED733F52A5
3D468179AC6BA242538EC564F080D8F2D112116C9B9732C4AF86476579DF658A
C6B29DFE3FED2EF67B28A1DD29D10C7BEEDAE714ACF1277D793D674E60F47D9F
89D1C1D46AF5304326F7002E83160972074FB6F90585C75CD51EDB22B4AA3644
E0B7B8CB2A919122800171B474419D914DDFDEFA36EDF85949E44024E035D446
8AE5C73036F3704B16222179BC125FB2A341ED546BB25A11C28B5846B2474652
31691DD7E1FA97D2920568999A59AD14685C049D0ADFE3ABFD04852B9606E8E0
74B6742A1847C136340CD545E53D67DC709556101053958976A09D4D8F15D141
6F278BF7C5416109CCEFEC324FD2DF976CFC21F029256926C39829DC8A2ABDFC
584BBBC8AB8932CBFDFB9FBE0269B68A357DDA4E9A4396479FD092AA676650FF
0BDE0BF634E2E96A083378107344FDEC2A1324ED781467AFD9C6B8612064088F
CC4B30D4DFB3EB1E58EC97A5F617E7831D0309FC06C6CE580564F6B90D2D374D
18181410FB6167E2955AC798BB373A6F933FA2EA68EF9D5BCD4C4FB87316BC32
7ABA5D5F5FF14BFAABDAAFF2259E1A12F791CF64CF7BD79623962FB0309E6E84
391E09FE53FAA4CD9E8C779273D47755CAB6FFF04078266A6A1133D8151A000D
95E13EEBAD4F215628C30F1A5B6C282CD2B7284B83AFD2E33DEA0218424EB16D
60F1DD6EAAA05069536268C92FB0729C26A6619E55124C58E6471FC04A203EBD
502D6C566B0425564CBBB7D252F2854291E6187C1796B0B28917D4D32AABE30A
EEB73BF979B76603510EB77DADC3A90F91F2AF4A64AE823BA1F14749B68E2B1C
F93711A744226081131E105AD89529EBBCBA731385F8462D0CDA1D4800C7450D
833CC54309BB9A7B79C4E91724F312EAE87FBB14725E4813E05782683C877C7E
C4C86D6FD37C58A5709C80980C93D33ACF90ACEF63A98362133AFB9EA70CE201
53395D1F42ACA59D013E64C2FC91D0F560ABF6B06BE4473D026CDC9CC58B25A7
09172FB03C68D6D8B617ED74243FE51E6BAD891BC2CCACF0C9E1BC50307523F9
4CC4DCCFA7D52DEA507E5D026AAE08682594C85A245A39A7FD55D42E3FFFE439
D20EF38EA4183C5D716F96B850D6FF61144F6A9E51CC1B8A86A350861F28DE39
6A0028B3296D6DDFD72ADA2801A8E30DB3E31EC9602D4654DEB38E8E94225D8F
864E791EA66890192077D7CE0A28D81DCD1E8D94F55FA1F21AD44B06600AD6CD
F4235C9298EFA851B91D5A4FCD68E107707DBE0D853B0FA15A4D58DEF4812FDF
9458012EC1AB66353911FD032BE7E564473F851F794504BF7C774E3C38D574BA
9A237BD00A733EA05D613301D6A4D0EA769E545928DDD1FBC289A18A4B9627E8
33A471EFCED484E59CDF6ED7F482F6056F4864EAC69C58860EA04A36A3BD6DFE
D9BC3104B7D31460E3FA77DE5FE5153809B0AF19ED917C49C7460B2C1E8DA886
6E52676A8EF5C892966ADC9AC306D01B6E24DBB2CFFBEF205E3A1E08C23145D5
6FDDA94D6C05701424A6D49E4DEEE399A7BAF3256EDDFCE5F0DCCA5162F7A61A
2CF30C4ABAF2E72109A764DB70C0C2B6A928553E7F0FD281122739CF2CC73F89
825E2087C5BB61C6C9FD252BEBED931F56CDC90C677070565126AD56CB4E65D9
B88E3F2968FF726EB83685DDB4D90069DB7C9F7DA84414A8FE9026B4F9F6FA14
603226BDD342BE1666E63D3CA43FA3CF732F443D1B302755CA7C1A3014CD898B
048FE3A8E1CB81221F5C1A14D41ACD313D783C2BC9C8F9A1656B85982FFAD6E2
889C7A667DB07ADDE07F1A6F2D32A270159C138B2409D3A79E946E5680042F32
6F831A69254A546B6DA8EECA492D56B2F9F55B399D36E9C7F8A9A62866F4E857
F4EA7D25CC8749B0743ED54070C80AF82DC8CCC76C007B90466167D1AB7DD3FA
96F38E5F3B91656FCEEA5466934B7B24AAD0069E1645631CA225811B174959C0
DCBC8B95F1B879CB720575618562DABD7DB8E7F400207340E5B3AB6265EDEF74
CE2B5AEF26AFE672AC811AD7326AE12B896F411E09C15B0506D1F8055A53A570
9C80980C93D33ACF90ACEF63A98362133AF7439D7B8B274B84BB526F68F932A9
6A11C32D2AE1A4C90FE98236360548F75D58871FEE5164282E9A50334FE53811
3E5BC6BCCBCE4D0F09A5DC24D41FDD14A20DA8B5A3259B2FBC52122E79F4418F
3561DA59DF57F86CF5989022DC463B7536856D831ADA61B11F5EC2A7D2C1CEE1
4D1A67BCB8CF14E5AF8026D15411CD48CC6C3D7E0E41EAF61191F8A9BB009B09
A4C293ECEB28980BBE80093D74FC73CC7A6E841922FF9B20CFBF4CE9B9353827
7EE0BB74F5C21602F35D0F54F815D0B0AD37CA58CE08B25D363D89AE740022F7
64C49FE9B49A108931E3CB077A9C53C4D8956486C96942AD652B9188F2FFA149
549397822116081691F99CB068EC99B0F5292E5450773EE17695386493D8CDAF
251045D2C257859F5DCC8C604F07F199DF379AF85714824E939267229AAFDE9C
8C387F15F064F42A8F889765C4A31A899598D22EA55DE76735D3C2DAB8ABC2D1
55984F2C2E5939F7FBD5EFBA078A330AA3D47D5D443C553A9D3FA7C7612CE528
15250A472B8DC7C58EAAAC4D94EF709930ECA646B2F07D8358D48D0A768B6BC0
47C4D34A483CDFE067EE6B3F7DFE0ABCEA24D63DBB389C85CDE9A053D6FECAD8
593BDFF25FD48046DC78E168AD4A355FBA4E4E99A88103935A91A910B6AC680A
8D82353B4D9438C2D541657DC358F6305450C4A820C8732234852F2D4A4D45BA
A85754EDDF9EC01F28EC7B1CB5FD4D2770B43776BF34BBC2FC5095D9BEBCA430
AE2068CDB5FC3D5330E6FD9BA5490A43152CFDA8CCC94C032261273E41A33F45
DF6684D3DCBDCA5537ABC8C2B536D47BBA15341E42E6366E02817082BE6FE0B0
4249A4840AA428097B59ECB9ED4D16EFFBCCFF0CF648981BB0F888CD9C8C61E3
7748CE08A60064CB42F4B5DD688729F3F2551E9EAA9885472587284CAE46FDDF
5CD68DF5A2AA0B3CB1DD2CE9FA739A2E6443BDDD8AB8BF4806C61442FBA0B1A6
8D8348723DAF4A7688F8FA1276B030E8711E213495C8304EDFFA803800B5D375
25247C5C189C065B9781EE3B26AE30EDCB46ED7952DD4F10F3A2F4EA31540D0E
785FCA8F3572C613CCC6B7436CB4445C100492702891B3BA245E8BF37CFB4BED
1C16575BF519FC93753331E25315A88FAB1C999BD8C391F4F045EE1155E8E993
3529C210725C300BA2FB19A603ECB41DC86E8ACD2DA44E3BC7EA8976F522C889
AA3F48827DD9280D36D6987358A5D1CCEA1AB910FF57513810E439B5705D8987
D32CB305380D35319E2C674C07B0C87EA3885BC505BB0A5E9854B745E7075233
49225E6B8EB758ECEDE8173B87B4ADBF310FBD37C170E37F4EDB7BFA4BA312D3
6DB126F3F767920A7799D3B4157FD1CFB3541063ED6DDE509CC734C5EAB95E50
B1D94A1015DA1F1505CDD37755796CD5FECC213A8DF6D5EB3D2751503D159D37
82053293E9ED0C1CF4FADA219D372F01CC90343FE1258E92C87FF22464C28EFB
6BA42D64A1609E07F378A1AE072D1E66EA6A8E5E8565A9AB1A0323DA3A5F6B05
A1F353A17E1A3496D1ADB584E18505891086618044B4EE0F4C3D3AB7CC8FCC42
060CCDBE18D9A9003DF1EA7A2F228667319B6262F09837D1899A47E6E69EDB17
BC08CA1B092D4F20BE1AA08540DFC17BD9B7A268F55CD5423525A001FB54EDD9
521B6B0DFDA7BF98C5632B31D9509AF593CBCB7B0B261AD7EC53659C2C8779E6
FF88BDC632ECCE672D5A6EC1128C81F22ECCBDBDB5A63297B06E72C8929D5202
D6A34CB17D81F2F662252C0709FC2C8B228CBA5632C5C642A1A387049E443835
4CC6B692896971F28513592B2818D14374234C0A8CCB717FCBA052088FF01513
6D44AB75725488A0BC7DA6FE56FB44DF02452CC4BF7E37F9117E9D940CEE01DE
39FE83DBC1A06B49DC5E9A9FFD534CD2D4A05FE319D61413D43312587BD2D16F
265FD71A55FCA4CE43165605AE3703C3F096A04154F8A7384570B8A0A3B37377
D2939F24A13BE4C74F78384E7FD399CC47BB260228A3CA9A0EAA200C1BB9070C
FFE5F27D46FD5A874C783EC73B529A8A3DFBA918D106959EBBD9B870A6E5708A
0F4C33015C8D417C0C33EB54B7A2B52527D3A8DE36AF482F2E48AA56435A4BFC
57904CDBA6BB2FB797EA19E47AE9E2B9BCE3ABE6EC68FFE98B8597A6480B6F95
EAC3A4FCCC29386254DE597AE4C6A8897F9E44E54761A75A8C17EE6E339E5C32
79B78C4BF98B23BA5E8FCB344623503EC814F522E81BDAF02C8A76BD7CAD08F6
AED8B002671EDDD247A356EF1F09DEEB5B7798D02A7DF3CA41D533C8D68D0696
621D7C1479469DCBDEA1F0AD7F53B1F9CF94C24746C3FDA17F2C848A47115838
262D4C4BD10193B73D2C7D6C71A1FBC04F6E98581B5D753BDCD4465492780B56
0D7A64F4AACF00DD611A0D4AA2A26677F05D59976EB80A650E2F6951FF4CBEB1
93B070835F9A0E9D7A0546E34F8BF633F656FE32F1FF4532326221FFED7AF2A9
13FB2CE66241C5102CAEC3992BEEF19998A0C4955C7691B72AD442BDDAD18F30
DB190E4D004300C26F6CDFBEA8F56A2BCA48DBD42C11E120CBD1E6BE48A0EE99
D6EAE72FB04C6D2B44641BEBE0A6E8A62717868E7401ABF7315851B113391FA7
94098F3F063416D4214F56DF2F6591BA911706D3AFABBF86B72A80A1482AD2BC
39DCFBB8B36B101C9796565869F375D0905B79DA5F3469BFC41E342FF7CD42F6
B821E75DADFFFC89DB5D3CEF127DB53383AA2FFAC31D3058E6044EAFD1DBA1F3
041269F715A374FA5F0478D6FBD7F0835871AF91A6288F20F47EA3BF4C901BEE
4B08759E95A8672CCF96D57350CEDE8D8720A80DB951D1D9FAC8ED3EF4D4B29C
01EC3581E275BC94ECEB7B517E88F6126B8A392F9F65CF23576A523D336C8523
AACC8882547AC619B7153AC7F91AA195D9F12E03463930D05A3D71E1E9830AC1
A75B62D699B6E927E8494ED12C35F6AE4CCC6B4D451E2F86782AE3DC264C9B58
E9057C7C31ECCF837941C0D95E5AE403770D7F40E6350594AF310CE1E9533461
F6CDF547E987A6000E77F176F7D9F36CF368FE63621F060FA8F92265A1FF6BB0
F2519C1A0486A536C3F902A6A9F2AF1C8DACE62B25324959B46661FA8917D518
51498AD5DFBBDFD2AD3A45C0FC93D273C16FDC0A6A0C69348DE5BC5F443EC06A
1BBE8E6481A48A9E0FE19BFC45A1D4C5B764583A99748056B896A27FF97F49AE
BFCAB32249871871BD55E515F7FC9F4DE75B2CC3F90DCD3BFF447255A99CCE4E
C0E8B418284452650AC9F152442521EA9578696F57047C7CE41C119A58C91E9E
8B945E36442C20E14598F0BFA3B6C2011B842784111027A50C265EF669047B3F
E1143CC184FCA7CF55E0A28F72543089F2F9D4AD0E3F3F3A4407CB3200C869DD
C5AAE04253AC240F7A64999F242193F4BAD3F33E0E13DEC23F367F3CDAADB9A3
70228BDD72D3685477F1D1B294824781CD883EABB77A8D8A93CE85F52ABE85A2
5FC2EF78FF074AEE2D574F2F1413B4C6B706E0A77D4B05540EDA577F3759A940
D23E73451C9675B14DDFC6E9A7B5EDA26186578223C50EB478AC4131EF3E9BCE
C05F698D0E71E9DE151465E0D790578EC532FD07385A4540A35CF347DAD4613F
91AEE64B11F62A03F9E6CBF7696F7B08049AA54889D43B95104214B86E9F3C39
D61CE7E43AA7FF6CC707893A4CD34B4A1D8A15B5B63E020118C720B6329B6339
4AFD15347DC7AF1347F5A1CAD9953444B29D7CB004560D0685F73E8772FDDAB8
72D2EC7BB624069C9C4288D7C772785564E019F13CA5BF779FDF345C143EB8F2
A289EA703C24663DD7C2033896ECB0F56FAC14CC191D57882855C3939CB6FA9A
DA4A6FC3F6FB52DA232DCFB65F66B2FF61B4380D93ACBB9EEC4635D9014102CA
922C49DE8429FA026796EB130B5C40C0E455BCDFAF6D1B30C9499E1D9BDAD32E
10DA7F6F6DD82D89EB71D7CA53FA5D8F6DB11C0E9D4C0DCAA264EA774750A50D
D561FFF7E3669A392CC6F47981F4D01BABA26D1743E2EC204EA0883B4272A2E6
FFFE12A187496A2D75057DDC6D246C967D9922A77F582E2B4187126B5B90D392
35C7430364163AEC6E911191B06F159BBBE9A00226DD788C8C23E5A620F4FD4B
DD641715A50B543CA52F0A4ED8DC99FE33F7A05469EE84164E7DA8ED1557A25E
ABCB7825E2156387ED859C90CD6F29A21F72B102FFA6DF8160B61716B044E5EB
7629141E928065F100485A0C9B936ABF6580C629A7592A909A4F89FBE2E3EEFC
8D2C19F0241EEAC306DB1C2695D6DAFCD4F28DF3EEA1A50C8F89883F4B3AA069
0A4194719604D655F83392CE8784EEB703E33FFF9D78591EEBE7AE8E745F8986
516493AF1470E10DA34D207E2D344277E00DEDB53F6E2B4D0732655584BEB0D0
F8488FE1851E4D2218F93467C904656C4B978E98C381556B32D9C378B348CE87
43825823F754C998AB1EBCE160ACB6D82AB81483F5A1915A280688215D43D3B2
EF67FB6AFC6817B8B15B0FA72FA7A271E8DD2F625EDA3D3CE4E4682145749830
1C03ACF66F2F79DE2FD6A95599770732EBB5A44792004E125FEE4463A3F93586
B770A532801E9DA5E812EF756E96EE74ED62A1FB8F0E317930DFA18ADFB81C8E
B75B0BFB3A2D301EF84772B9094808F6F1115CA55B7BE5F2018ACC72A4B7087D
456CD4A84360DC9B6ECB0543A5143464DF9B406DA23E71D9AA56B6AA8C7DDCC3
41E0DD06F394C35AFF99791A538A5673B23AE113B27C840C2A5C22FB0CAAB9C8
8897BE58530D5D4DEDA1E64E8F09BF449A98DB91A2A8028EFCE2EAB4676EC88D
AEE1BCCCA10DC1124EC4DFC75455A2200DBC805F99EC797F49979E2086C044AB
D19E66502FB01BB3684D274B6896EA3FC50827DBBC8BD4D92DACE0A7B4068772
E5278DC121518356983334DA7AC5BD0F503D3ABE63C3D4530E353E5270D5FA68
17A5E946E39856B07D81DF2D0C98672BD99C91405C7EF89932B38E256682C68F
3DA790E9B0ADF4D5EF841E7CE98AE9EB227FFEC63AFAB6C4C03FA6A71FC346A1
485117DCEFEE96974374BB6E9D392B51363C384BBCDAA3572D2595A07CBF1BD0
5B68870AA4FE5CEAEFF2DCF004640A5F9EF833A4B1B51E56065ABFEF1036EEAB
8E04F327D1354BA4D0877645B9308173B8732C4565BDFA3007E961806E6B3FD4
34FDE1329BEFE5A0C84E3977329138C40FBB2694CA6709EE19C11515E6E96704
3F9162C39D9E04BDA85F2BF3190FFF5B3236F14977546B1D3C5FCD2ECC0C0254
C27B0A0F8D3ECD1B056A35C37842C492DD3C7F35AA5C7691B72AD442BDDAD18F
30DB190E4D0040F9DE7D202BB69739202BD31EDAA120CE54ED0DE7EAAC53894A
801ADB04F4C74BE0C7CA9C36E787862910C4D3DD86969CD1AC9FEA3E44617753
48B3D83E1B59CC4F216CF8C3A48AA4D732405A6CC68EEA00EDB0DAB677F5EA96
80FBE092701641522CD25A8D665AB77ECF4D059C69D4AF6CA9F04D7B3A383934
E08856CE35E812EDB26D73D944E82342C9142F875ABBF0B4DA2A814D14DC1361
CC9554DB2E46B161E4E498CB067C5A78D48AD4A103B90599289C9AA58E4726F3
6D0249234EB51EB6E52C6840365835E3C5F9582E3BDEF6453567EF0BAAFA416C
0AD7D6AB86E633726485816349C498AB1EBCE160ACB6D82AB81483F5A1915A28
068825A867280B865E25B0FA38A6356EC5262F82A10575439CA62600AA098B44
C0A422D25FD07EAD975D4C14CBDFFCDD539C4F177CA5CAEA90D1B947242CE481
1DD1797530D4D3E4492E7D4C8766EB4F2B742F7643EE4CF762927CFCCCD87699
05F0F6CFF798BDB48DBB14D3A0C5FB48201578146A0398875225D8B82A82D2BC
DEEAB4147211DF02F563B1B0E65B1286946DDCEED0D97BEB1ABEED9E395F1F1D
D95ECC8B4432266F9167D37E5BC024835129BC973464E42088642FACFD91D0DF
4E88E096ECD3B8D6F6F508EC1F59EE227E4F6A352AE8B13E93B78D5A80A6327A
35B2741B0FBA3CE446FC361583D845C5C52C376833CC9C07D19BB08A569FB8D2
AA1AB3E1F6B9BD413D4CC15B85509750AF485DE8DCE8D6F4AAF465CD8674717E
87E6481701FD1E1B8705C512C016BAF69C6202E3372A2A58AAEA294648DB1347
F42BAC77371422CC273C435E3D5D1888046B04E77002CEFCCA0711FD2CD04488
D639D423941364192AA53E84DA5A4DE40149479EEF9C03F89E026963830B08E9
BED0FDF83EDC83D5847D03ECC3F54B6D594F074C140C7D5ED6AFAD053970B814
8137CBF8B8E42F059715079C80C962D5D7BE90379F32AF7261E19E0B78B3EB85
8A932B26CE562FC840B4F23AA609995849AE4ECE16BB108289F8CC85E58EA5A5
1A5BEDE899A33A846BF364150A232C718145A1FCCBE19B19FFF32D483CE98D96
CE215431E016CD116D7E782BDE113598DD48BA8FA1032486E7CD2BB34AAA7821
836F4126BFB84DC4B3D77B63E54344F80D589438BB8AA51657E0899A2116C69D
D2E11AEF151F68A978656397F0FB0D9F6D1634585BC98F38CD281C040714C328
B831F1FF08C8F7C2CFD6B56B485C2576912814545EB4C9191CA240C9AB7C5047
040ED5D4B9E13A466FB2F8ECBC0C52019F55265AF662C04C5536562FFF26C1CB
5FD8E91869E0A83A556074DF97B252722950F1216BE4DDCCD51327D1BACEB010
80956FA4D64ABB59B854532483B8ACFC184F8868FE10E9884BE43DBFFB0C6D14
EE78FC84B1BD61C526475C35A9AF7D65929D199AB424136E7DBFA4BACA9C3864
17683082F19B47E871B05E8ADA834E775AD6948BE41E7CE193388DA5C99BF5A1
B462BEF910CF31255442BF04AD5AC1C750520BBE0ABFCD9878FD7160F8660B49
C1EBD4BEC7AFB8A37DCC221CE80014F807A53945E21FB4794956FFAAD7D4E3FB
13343F286E505014A567733A950B86CD027089A44A0757EFFC671FCFE41CDF60
A34B00B0F3D28F5F842AF43D57F70718498FD85E7A99EAB7423DAA57368DDF6E
4D672D1306407D69F633E5C7B79CE97EFA34D6BC3640745A0B2E51B1B7800EB1
B22A54B24B3485E6772877E3328017107CA00D0752C1E9A19C49904081F25DD4
E366A721AEC716AD2358AE18DD2EF7767E50C447AA2E341167A07B6BA482AA61
99B185491196BBDE507ECEE8AD0EE5F36F6CD5776D5DB1B74D3FC87DDFA45128
C2A472B58F7CB544E01D0385CC21C26CCBA3C4F8CCC024B14DF03F8FFC7C8AC3
BE38506A74046DC933CD8588DF4C1E0F10AE5994B972FE9A7B8DA24FB6607154
E6B8741330E26B968D408D444449DB76A321ED9E85F875D448B3C84979E7B4B8
DF6C8B4C0716E17F6830C67C4883621CA300ECCB25BF1330E865801A5A5CEB0B
D1418FA1C2EB6BBE1AD828DCA8EE703B1BB9F607E522C7108845E0D957FC2B4F
6DAFDCA3EA36017EAA8F1F4A786B45F773517B790FFB540FC1AB69BA768310F5
37D16A450F869A48C9A8894D29C23D28871812FA17AB4681161D80C04908F595
816387879D6569D2E42BA1351FA688EE441E61FC59ECE8FF86E5068EB1C90211
676F658D909BA62EF42340AE1622BE6C34C82424E1627E053530DA9CAC3F1000
3F7FDF6FA87C5C26C06BC86EA3DE3D0B95CD35EC3EE73A7EA149580132082317
DD4A19E976C084A02FF3F71E5E5E966DFB605D18E4B1CA2F59697989C36C0897
4CB5187A516614FFA086067DB7B8D79EB492D6E794EA5B249B7A07735A36737C
99E1B7D6043FEC3AC8F2130D6EF52F14202317FC40F6C9E49FEBC2B0D193BBAB
85DED842C2A0642F862E14B66919AFD491F98D85C9E2708B9045050673930281
6399B8C8357C1F0EEC2855B440CE91F39076EE06BFD3C04FF933CE48AE61ED5A
98C59707C49D2A572DEA8CE4BF3911AA57A9D9BEDD1C6742FD4EDC533A575B32
E6A9A58F94065724341F907C5AB70F54D334C1FB8CE7C6CFA4536829527A8716
75FB7DC6FFE245B4D5889C9730D6ACFB73B7ECF503EA4B2E8671A36C2D80E7E3
2A732ECF3856D43066A459E4322AB604234492D7F4DBE3C41DB9F9DC99116C12
24EE53A1B85C2D0551DDFD1B445C6BDFA438D70A555F767B7923998F7A814008
155FBF4ADD4F2D8EA4169C9682696B3143311E2560D97EE9008373A9D2C02A63
E2E41F3E9542CBE4F180782F4AC8C68E473CD0F8C7AE272F8CF645E1651FBE3E
295284B1FF01C814878F0C177F552BDC9BB43845DD5882CA53A2CF19DD076C94
3E28A960194648994D02D1FFB1583129FB837AFE9EAD2E7AB2900C1DDB3B5B63
D82858951857C6A9E49D1D2D41749A942880D34BD13605ED1672C9A742508333
2BDA82C4109E89E7CFD5C7E6C184E7BB763095F9C5FCCB5E7F9D9F6D462A3C32
39C9397C79645EE4D487D89AB8A2F81D9A9D3BAA712A0A56D9636B62813AD276
809C75D22373802023DD465F60E5E5492F1761599056F870A1716B4DC3D868BD
E539079576E5CDFFAC35AB65806CE627529201F1A70ED484FE92F0C684F4A047
4EEC2D6FB9C6EA7FCE6A387A1572B379E2B0F9F79399A45ACEBFC1A3B4228D65
26D50E59B5135B8CAA9F3EF32257CFC2969B1167135C7417CFC430FE7C8016B3
ECB7A843C1AD011D0985932814A716D8401EC872E2222477DB65ED173A46B371
9D7280A90EA7038A2F6390BC183D642C571C437ACDBC56D765E2C7F61226CFC5
613463DE4490DC57BB2BF90C6F5C5E7BDE3B6219A8B2DD4249FB92F8604049D3
9F50717E4670442DBC451B029ED37E24E883195AB6AD13AB3CCFEC63A901A9B3
B9A5C5F43471EEB04E8018569F67C865E244FB22B99E4297887C5804ED0E0933
C19F36D5557E8CDE9B86BB0D7806B03A4DBE46B4D40191FF42EF52D058ECBC2D
37B7A8D05B1D00B7552BA424073F982C9EC093D7F96770C73499AC0AFC3FD628
7AB3A1DD266A5E7349145F1547C49AD1852FE7BEA0715F377C51A8FF392A8222
44F5550DDDE2FA039488D58A5A6DC2AE4C627276365855F11CBBA6D747BFCF44
F56577AAC8583B1FB0BC61C7A26294870255E4A960F889B3023B7CFD7BC19B74
56A83B17083469EE367CC1FA667EB67C666E254938BF6A44706AFC1CC092741B
A7FAEB5D869765B17F7A9B49860D3EDED3CA0B29DC5BFA8C66DDC7833BFD9778
2599BF53A5E98877AEBB4F2B057CD22D7EBBD5193878AF0D3EE755BD5958FD36
32E6703111E0DCF7A2359122F3E9F7099EF323D25D3F3E547AB2D4052EBFC628
F3181385AB916E2703E48117AD594833060686D3DC4FC1E20A83DFAE731EAD03
63A7BBEC37D8A81889B3B60737C546E9A01A591EA3B121B082110C6ACC20F030
45ABC9A5E9FE04F0D6F9EFAD10B421AB29DD056D66DDA4031A8E608B103688D2
E860B9BDBCD50DEC7B44730FA8817294EFF9C89AB74DC4418F77DB1E421A5685
8594AECAFA6BCB9525C67AE8129CEEE93D0E443A12E10E386F32B5BC0788181F
511102AB15CDC60F6EF11EA511C77BDED2B8F8AF3E78EFEBAFDC88074933F8A2
E7680ED4F0A5D956F69B4B2ECB5B720B5CEA5B78ED3A7F706E36EA3E0AE6D944
08A45E5F6B12921B80696C58E83CC2D3995C6C5A645EF436498CFC3ED5156D12
DE4DF260C1A1D3241D90E8850AB5144766498457EB73E1159984CAA1BF17BBFA
4E9D98849E6AB20FAEFA93C3F0A400CAE2AF82ABBF59E7E01EB6A7FBA4F7E2CB
0727559C29740D88D628814DA7F9A3B711FE5F7E13D6E20F68B13191D6F4EEEE
809BCD936FF4B76DDB821EFFF0BF941EC9526DDA5E76C3D5400158C27289E20C
373A057CD514DB271840299D659144AFEF2C34824615385C77FF85DEAA71C74F
0993E3447C926E20390C33B759168843DCD4E57B42467B373760BC57A72FAA1C
D068777D347A8B645A2229984E45911A2FA16D8104CAFD1564D3B589B585C885
C2455D7C0DD3BB0AB14C9FC65A584CBD3C65762F150AEBDD7A96133B2E41002B
812F8E1AE5C8B8A9DDBD1A5CAA5986F04D17BE7FF0A4839E595B9C517AA0A830
CE15E32638D350F86FA328363D1B4FE236DDDD5D327C120D56F15192E10DCF5E
A55C12219C8AF09C7FEA6FD00394C0BBEEFFFB52CFF48DC639DD9A89D4B210AD
BC8BF881650B079CF9D096F0A14DD3A276916C2B7511F985BC969D5589C52B01
8E46EBE636B6214175D6C3850D93801209C9C9CA768F3A1F8E41F0090D8ACC32
0AA4307AC0E58926317766B100C21EBBCC6C6A9AAAD525FE80226F2286EAF130
825F3AFE76608695CFE97AB3C6AFC8F02FD833AF49B4CB901556E63BD6391B3C
3C3C80C46740FA27EE1A78FBCD55AFD5FB30944EE4F182641F051980EC0077B9
E3B6FCB6764227AACBD15214654422D7C88384BA485A88D8AB7374E485E944CF
50142B0C84B72B2E6CF295D837E0B2E643F33539F5018462944E108062383CE7
6C37DF2447C343BAB5CF6D6F7B82AE7FA98BF3654B45DB0C2D4E80FFD5F88B43
266A672CFCD697B42FECE458D08A9ED3E42F346F6CD76FEB460B4D6C03B7C24F
4BE27F7666DC78AB35AB252E997A735E96485E6D35B99430CBFD3BE97D9FD776
E8BD0C85430AD13990FFCDB2D4F08340AA9A61DED2E1DE62B8ECE240DBD1DC8B
E38428FF1136E5C76F823D29D35078412923DBB3A32176ED6B8624517ABC1951
B2F5FEB44F59C055C5D6087F1FE036DDBBCA49EB4131D9796D5E9A6CCA98D3BA
AA326A7E2AC5A5FC5B4DEECAFD111614267B7A44683D07E37FE33C21FC09F2A2
3D9835CAC736F607207AC573291E6E5376B924358EAC006A594AFCB839778FD0
925E2DAABE71A09F911208B258E1F1DA5B86C8D277F8134D0136CA2E9577B45D
9EEC232E5A1E70301EA5201EEFAAEE178CD2EF9B0B3C29536DCB6D816B53B453
85444EE30D969A1E58F69A142958C6A919FEA02F5D20D2605E4AE05405BBB717
A6C4465B80F38210033BAF01D8F12547FE7AE4136338C739477EB1F5370DD1D2
6E6DE100B060B7E57DAA7A6733F2749C5ABEBF4605EAF9BC3D8611E3607832D6
878C72DEC59D297CC24DB89EC76930D071A679EDCE7F3D6F138D0BE636CDDE88
3E1CB4ADF94B4DFFE102DB0DEF11F42B476B322B43D601DADA1DE6C35BCBE545
93D0676D5DED50E264B14FCE5DFB40F7EC7E46B6E9DA84BF57816278E938D444
72C1F01883D05533EFBDACB6C7678F37109089E1016DF8FA12A8A16143D6FA33
885C9B9ABCE14A5A873CA0A32864F262D4F64C91525C1DC0284503CCB86C38CF
5F8E1554E4B6108B1BCFB5C7E9E70F8EA3236C895B9329DF559EE4F73496FDD2
B58F8B140D40F7CD7014196EF241654B81CF0C6959C077BFF8C37BE5EAD4AA70
9960E30F055ADBDCC7FDF641920A9FA279AB533F38B3362BDE4FC9E600BD41E3
0B56D88F2DB4AAA452732BC19AD4C97685981E2493E404604BC4A0A97D3DD35E
A7495DDE0FBC9B11349A03CB50C3C6E5F571A541957D7AD3C58004805E2F6077
9FF767AF2CFFAAA7F2FB1996DF6663C717536ACC410871C952C783144C542041
FF4B129340E3A486C039AA0810C27EF11AAB6C22FC9DA784FB6E27C2FB99B97F
2312B6455CB547B771F0F0E166D1EA3117ADA2CF91C6557EE2ED5B4CDFAB2976
D79A7EE313D0E82FC861C0D9ED98E873821095C6BE6CA90CC360068B2120BEA9
927D9A78BA84F40188C27BBE3F478B246EC47A239DFD8824F52EB30D25A9940F
CC74C45AB1618CBE626B87CF0AF0211035F415C5B593CA786F57C99372D7CF83
F981822020847F53C4901AE23B20461AD8A603EDDC21219F392DDBEA601D6DDC
E7A8645953235DA2C3E13281F8A4E0DEFDBA01DDDDEF0125E3465D459E432D0F
009098A4B6E0567AE9A9C245F841E744B6768DBE3EDA4CAFB3DAE3C39B1E9D52
22A83F9E39E4E85D2CD5E8489435A1D116CEC6657727EEA5AEE64DC20E6CCA27
FA8098B0DF87DF883F9EEC9EB616F9350EACAAADCF67DEE6F4059B764CABE282
BCF201A00C06829558B179AF2E3EA826C8C1B277C4770A0CC3EF0599B2DEE156
39F30434C3077A2428BEB3FA5E46ED9C413EF195DB365F40EDBF0CEF41E2E467
ED1518D82B08130625B70FFF6198F22A1434E7D661083C7F8D02F91CCD580EA1
9FC26127115C48E8A3CE743729E6C7A602EFA8343EB64417AE64FAE54A5D3FD3
AB69E247AC2F1758689851A9537B1A70E98CFA10A67EC1382813E02E7D39EBA8
12C50D0E3FB3A65CC080D414F3A6138865BE994C6C74228EBDE98CFC2A984DA9
73A1690BC030E6B9994F0DB9A2BCFB833DC70B17ACD50C6D8989B3E8688D2A74
E9C9F9A5A88092FCBB73EB127855B8849431DA4E0D14DE737964EB1B42CD25DF
BDD6CE0B44841C58E8E054B9BC7419E45ECA22B1C0EC2F626498A0F0C355F94E
92659245514FB483956798F440E5A3CFDDA5A71F8DB20E14DC06904F06859365
485615B913A00461E8A7DD2946468FA6CC0A0615C4D93BF6990BA00B058A1C5C
34638E09A21350BF64EF017DF5C59075B9BDCEFC4B659E93BACF45D1A4984575
B3A5224212F6086D865C491EADBE21EF5DAEA5041C604F4511BF6D56A1F0B72D
203A7C5FF3017508DF9821E07110BE98BF1F3312B4ABDCB2CF777595158CBABD
B644AFC734F4A6767064EA4E5F469E48F5AD2885076AFE14571608D679FE6C78
EA43F8CBB8763319637257BFB4DF27E4736A5C39A6E22F1B5117C49C6AC5B8EB
C8C27117B49AB5AA758162328979CD3ECC032BEADE20C001B5D79F73AFBB26D6
1E5570EA404F52028ACE28D99D12CC6339C2656DF4B213F43E7E565C737532B1
6B0C2B1D11E8EA35F678DAE5837FF6A42C21893F4FA98854D55FC993AA1990D3
894D4E5BC8240049B266753B194C29B93138C5C73B2E26E96B6F0556D49923D6
3173C465D725223F929DCC5BDF1642206044F4707F3F4239774EC5D2A53039D4
FA6074CD669B124A8333FC4173EDC8861F00421C87F1060C5081A47B223BF13C
0D6E72189EC212204E91DCC76313FDE2A91445EF7A5754713BEC6CFBE152CF09
FFD2693C2DEF0AADA7436FB16103C8E0D0D3F83D6DA2105A730A70DEAF9D6A80
EA0E6F4883E39FF433F53312C4452AD33DA5F0E0E54A39325730A438A6EBB464
931A3D3FFA6F1C1F12A645A8906E524CAF38F5613DDA0C467DD2177C02069900
5F6C0D10D78585740BB798449CF068C3A52CBDB6164D9810B7F051F8FE81B828
028E263652BDB0F795CC6D377F09A17FB2C3F45B2E98C37EC1F2739933B97964
04E186AEF93732E6BCFDDC80F39F89F9C8461D8B7790DFD1FC31D5878E3D6536
EA9B9EA11DD7D4D8090896635030197722AB644595F7860F1538363E0574D9C5
3731DDDBFA0A0B019593BF22319C02486B33A51A922E16CD2FA670101359376A
5587CB6364E90F8D1ED505B49F7CF1BC4BABE5DA495EF9EF7BC53AA53AC83CE4
A0DC2E700FA0A721748E0F4F02E605F9EC6EDDC2511D7DB45EF620469675DDAD
8976DE4CF47B93FC6CD2361C3991F38E8A011FDBCE922A16CB785948643D0590
CC25AA63B2DADEEA8C4193BF94834F9F1A8646DEB04C9C40BCDAB4F38A44C189
BFBB5CBA860F9CC900EBA7EF6263F3F042BE49B872FFB60F14DF51EAB2ECF6C2
B3FC14D3048DA2E9134E43358A1BE68E4C0DC54C87637B77264352F257E3733A
7CAB1F0C21D28BF894334254229970DC1B50B9A16545A27E0FFA72D79C7D48B5
A11B07D41301B48E2446E4AF11C73D52910F14BEF067F255C444CABDA65D410D
9F9BF7165218F0C90C55B3D9BE5338BA3ECA440493662D137336A6CAECDB5D61
97989455792D8C43353171B8060DAE8A58AF29A28A5E7AFF8DF1AFC8B418F14F
F11071451A49EFD130227754FA1BC2150EBBD6F7349A71216EF16A28469B6B0C
248EEC80946CB3D3C2ABB74C7B33F3109B5EFF068D6189EC26A07D761188C196
FB61F519825659E854A83D4E6F02B610E5B65F1F493DA608FB6772F6BF07764C
0C519F264A899C83995E466381417A1B16610253CF9AB210F04E9C256FA52B42
D28B8C85FF3F30B6EC51C08D9B4F547298E65EE3D707ACBD4122606B568D2DAA
AA8A072209EEDDC3986FFE28692E88F61C3849543D3C75088DD2EA623324F8A4
4CC2ECB273A3D4C222B2F41A5B13195B662126CF97B8EB2D09C71C4F80598937
ECAAD0FE2A9EC2744C84C939845CD66C6CB2835B77B564586905D558A3CFAB0F
1F342659B00FC72E6384292A2E1CD06130A091F8AFB70C0D2C288835B4C997B3
FE3D863BD1FE2D56BD513E5BE907EDBDC601B8F085FC7A58576F23CD19CEF83E
D66EABA8CF11D33F2EEC50FDDCD73F2E287FE61B3AC6E94EF7B3A3B629F6D22D
BF4E006F303EADF1E26987E4B9CBC486B9416CF67CC1A15DC14530341A1CFFEA
243FEBAC6BD4F64E7965068EA4A2F4EAB6C4248C541C5DCEE10C45F01236F016
4E7703909EE04A1398B7099C43E177F5D36E7AE7FC7690AA7DAC6B285A4CB005
7689E72DE1D7D5770F0DAAA58962E8A8CB29C6584BD23C0C34D077E4EEED50C7
213EC8134939CD28AF21976B42B06A63719C44432BDD20778E82FBFF5F294B5D
0D796A90FB81A5A18E98E97F3AC41B5470133F24B7EB6B0A4C88BD415FF70F0B
F58576F7971101815CEE9018765F8DF8ECB0A02D9EED1922E8F3B7B8DC087429
A3D69116B933F366F7930FEC7364B1D3E97DF65B0612857F360BA1F06AF09DE5
CAFD23D10D08D6913F9101D522DA03412A6C4C6B34EEA836994AA5B85E67BF88
0AB2CBFB7909B93FBE74BEE6955D3E4E5D870E63F394C4C8430BBD1F3153BB1E
66022BCB537FA2F6E9D748B724F859C717553B6E62097C0A408651B63BF8DC20
C8D6E6B127A3809FF2D5693C2E7A4517FE0DBC7688431FA1E99468E5BF42ED89
315CDAF8B686861D9CEB24FD04E12BFA3A0B18E836B51A7CF5F297CDEE396A56
8036B06C33F7273ADF8875EA0E53899CAA8CCD66DF5E4889141651A5DEA6262F
D54F422E7F9553C125FA5B7EB782F24BF7ED544AE148467180DC2293FA812D81
7C7A0C37B62D3D1BF8537CFCE40CA18283494E800D9FA5E36D5E86078B95597C
88D44E617C5F530D6C43226030BB44812DAAEBBB8006F056F294A4A5B77983DF
1D189681C1602259E6390F359CF18F039F3026354F553B180E590D11FF7E8260
D9A06D9CEE441958AFA39747B9C66111852F380C5E7D82160258183035F0CB68
898B3108CEB016199DD92E36BC5E4981D89EC0EFC029001AAD2FB7CFA7215B8E
795556D3FCD453927273093052E03F0FCA8E340E0E25180D78156BCD09ADA304
3AF4EC1C28C3B9D221ECBACB62C8F2F6A6647D53EE88BA04F42702C2271550EB
893BEBB97D18D06A69A0F20AA3864CAD2FE404C473C0D60DFF13F4B2BFF0C2D4
8D73A369A4A30AEF829DE058AA2F25BCDC92F98CFF9F3D5881095B96FBB30E87
0A090BB89FA7D46FF165FE342BBC3F74CDF13021C6ABBEF4D85A37020776D279
25E2828C98F004D871DE6592C102481BE0431169D1D72522B3E6184B95D3FC13
0A7104D097CD4F4B8CE59595E54AD2AD015D4203DF964BF07FF7C606B449E2D2
C9A19E693AEB6F0FEB32AF13AEC70D8EB8625B6B3C0F2812C94961060C48BE1E
184AB2B1C799B37E4E7548B70456F9724E6970D5F6B8002890F8CC8042262240
1CB84EB87D284384D6AD086EB10A8F576BA5E9ADC16B89EE979687F99EF12BD7
DDD0825F69FF53A4C2DC03B6ABE85EFBDD19F2A89208FFDB57C1501215FAB644
110845EE2E7142CA0CBB4E2FC263A52DAB009CD42B50B0631BFF72AAA6ED8987
EF1DECBEA9E98189CD700B27837E29EAB14F0AD875F295F74363557D6455DF2C
64213611F4129C37BBAABE299774434DEC09453448FA1342C87306F39143413F
F3F98479500B63FF54441ED08E151289F0E62B89F54030EE867238D61D75F043
7499D49B3C1846FF96CD13EDEB17493F0396CEF43BFA8203807C238B1116F230
53C7CCBC0B06CE3AF4C560DF495B58D53E718D8974191D543233F7EB95A02F86
E9BC231EE5FC58FDC990C3D99C3BE69FC024AC8CF5ACABBA90B4240083BAA897
1EBE0505E2A76B08D05625A009B2DD07679229974127BCADB9A076CB20BB3CBD
5F4AE697D1A15B39FF3D7EC9D85E0EE6BB873869BA33549B2A9EA5A38ED92ADB
F22025410ABE18BA4C7C613F447B57D845D5FEE5AAD3D71AE96BA509F577B35A
26B23A7D13F030A031D53838A8C6D35D2580398B3BB3226F6A68F40E59CD0574
8EE287D705B060EEDC575AED59B5511037EF0ED4E87E431A65E478F28B756F14
A7E26D043300B9628944E210E2BA4E584D10B097AED19CFDF430F8365C10C7E6
F5710FBA343D16C8260A8F1106F98799495DBB3A05C04BD649053FD293843CF1
1D03708D1935EA2E69C1EC6EBC648DA1E2FB3A047A334344F50361F289B380E4
1E6A986CF2AB652CFEB9AFC3D6000E2F1A2F16C98F3F6F29CB97659382B803A2
5AD66B0EEC5BA8B40258E56469BBE19C870CE19A0CA83C96B9A502FF6EC32140
2A37CC1C03223C78E0DB9FFCBE93758D0551685FD436530D533212A2585DC11E
E9157099AA6EBF838C9C0E8C896A99C349869E59977224A6D5D17BEA3A01F55D
AFC693ED2B44B1EC0D652E68147EEEC689A853130C1166EE98ED152595503082
13597BA3F10B16F3BA05F15AB776E80632727F6B887D83F8776E76346699BD3B
F24A57A8797BB2E41E99DEC48FF875F36FF8453525F3585D54BBF8504FFB9A15
AA5610C82FE9B6F9C2CCBC0FF2E710146CB198F0738192BD7F2546B222880AA3
DA9472A22295C9BB43317718151E9716A8B8BCE2287032CB6B1E58C4D6BC4EC2
48C7A4C72A2D3B45A9F218BB51BB4FE540F81F6B4824B8ED5088190B4103B461
1176040884A16CCD23732E346F358F956DFB6172E81802E632FDA21766477004
94F4013A48A881851B3C08A04119A4C6F5994FD8203F7927C3F8AA882AA1A325
202493FED90E9E29A3811AD7326AE12B896F411E09C15B0506D1F80557C7073F
C4681906BD573C7A473787910AC263CAC0EAC63F23A1F72C6B470701C381E335
C2364CFCEBACDD20CE79995A78A8B27BD2869D59778999DAD55652CF8B3D7AA3
48F34FF074D3C2790A24CAC71A4186F17220066A6C762F5D58C8AB649B9388B7
91AAC5982FD39545D6A565378478FA9F06127CBAB87C1972145E9E72443619AF
D2A257CB6E5F74CAA17B6BD24671FB73C73B83D3D69251D4626715940CEE8698
8B1AB77596A2FB49DC160FD047741E96B4C8279234FBFD0D10BD8016386728F5
FA9841AD92542E9A4317D9466A46D6E1E1F0B11E12FE6F8C7D4591F8FD09F2F1
C2208673A3ED3D91ACE4B124110BEAD0CE305C702FE35DA2CDD1FB80987AA162
5BE96300BC0A502D3979C77A24D5FC81E9B9C3FA269C8553905A0D80F52A71C6
FDF28FA577B39003387F79289C663EDF22047C93F19198D5EE9A7DB22D584FC7
B6F9C35C47D639FA431E5C9C15965283A557A996D0EA9ED008589BD53044AD29
E2CB77B486CE89C50FAAE2AD1E8539A58463EA5BF29EE6D0A67AC014A31040DE
CB5D2900563CDEDE126EA47B7FA2CA37A2BDF6DBDB04F830C1FF117E01C73080
BA744BDBFB3B9BC5F8533047F6EEA8665E788616A1907C8990D982359E875AC3
204968373A1BDB11F7A412323CC89CF7058533D3BF3CA3B929414B1B29EDB53F
00CFCEF86DB4F0C4FDA82E6EEA7D38726F2A1891340BF1DA9F49EDA513D506C8
B0A73A8DD94D43340B7E408EAD4E43B24137C66BD2A0A9511094B7D2DB2C726B
63EF3A983B84C7B062CCF15329F1D102860A54D8E656ECEA88768396EFEC282E
F5E0AC4599B3FCC5AF57C1F3E16541D2EC1561421727F9A1CAD6BD84A5074B58
32023E809B80408BB9B61C2DDD0942221FD0ECA5100F4FEE2DF1F839B2A5D900
EC890CB10DEE7E713FDFB10EE93517665826A01E9F0C9B401D8CFE7AFF196103
1A81A012D0104698BA30854D6D0D0DF2186A70BF89FE798B0A5928F74EB5FFC2
D80C9EC30CDEA47A9F2EFCA8CCFC7544B38417DDEE95256B528C2FDF82F63A7E
1574181C7D82FFF4C9A9F886E67B5F272906530483FFEACE1925739B08783299
2AC2DD7AF74E7E28A818A92F991F91FFC890A5948DC70F449918C2ADE3067CF2
AD5F005F18FD3A578AC25487EA97D941DAC5A7010B6E748FD03772C588357472
CBC0889E8DE74CA73B1499B39512F0058CF2FBA31663F01113CC4F3845D43250
74FBC65FCB585047D70BF0516E8E39615E9169B174A4132FB6A9B5014DD15228
B8969681EC3CD02E5E1E0681BFB85688DBF318831AC5EED54CED025A1F5B5501
3FB28AAB0F1B56F3F133179916564E81F40C81E428F73094667548B36190D2CE
0DAC37A534AACAD2D36EDE20B10EE9359CAA2A6AC6646BA090DFDD1CD4ECC09C
26D71E458769BC497898D016339F2A688902FA3FA9E6670C8C9940D037985393
9EE95D8CFD039D828B3CF965073A09DEBA2E237A9E3A3DB96F13A4DC89786CE3
9662F0B41AE6BCE3739D58B88AD82EB08573898B994DCA2B6960B0B583A0A641
BEE8E0C264271ED6E9CDAB6C133AC3DB55A9E502D237B04DF5EC040F301510F3
367206AA0B64A692241F315C706A63D4E868BF3875EC6AD482DA0DF439C56DF1
724D566DB0C15641C55B1D4E0A295D1DFECBE39D9FF712C85C748311C9CB87B2
763261B578D2574388D48F17FDBF84B4F2033A85B200DAD241AEE94D5F6B3613
3B9FFA03DBE65CED6760F438FDA8BB79A19976DE370238C5B246373C2DC7FF7C
3DB0C2F80198DA3EEDB21C1CC2DE019E335FA4785BB7DC6E5A20EAE38DB6750C
7977816FFF6F994D990437E5785054E3AC66A702916DC3C784414DAD89F47DD9
C98E0179DACC5CF42C5668532322A900FBB023C210385FD72FDE491A37F03E39
BD49697D30B8BCE8B9341D2DAA72F7FDE4063453510645FF66168961B7D66288
CF36C97474DF11437B7F8B9FCCCCDB9F327097EFE73DBA9E508070C5EF4ABDC8
9AD08FAB3A14213EFB6D602C098E76E62A5EC5101B151BD82968B0B15A5FFB4E
A63944C6C33736FAF0982F762D2D4B60D7A3E379BF000C72C3891E4D22B39100
048370534CA562A06A98ADFCAF9D29989D2306690BE57582B63F5F229B7C4F8B
CEC0565D0BF938A75C79F0B70C5BA96B75992D4B60F1CFA989A08FD2A8CFAFB7
D00740606E08F30998D4C5AABC95068BE7A9DAA9F9DF7D4C2A160A6ACBF9C2DE
66992CF4DAB3368A64C98FAB5F7BF981DA63277A28B6891DDC5350D347DB0724
353AFF2BAE4768D3448467B6252BA3AE1EEA82ED248BCABB37B9EA7499455B79
DEE55AC54C2DF1651F26B369764E5A04A6914604E34D914BA444D2E46DC87B5A
9E879F4BBB1918EE2437C5776D7844FDA74E6E66142EF709DD5A974277CE2EBE
E3DFB670B5C4CF576E7F6A6DDC6F4E4F712346CC1535C3BC9641C6B69C3E19D3
BBB61D8D8A82E199EDBDE77C067A52CB0D511D40F34ADCE3F6075D3044CE65BB
C3256B639D5387A15247C85B260CD9AF6056A4F66796C6B79DF8CEFDC0FA2A5E
0E6CF8C3A48AA4D732449A6D6138883A9959E2377C1B663EB6E64083D7EA5E9A
0A6E0C9E3106C682E0D9A3BBAFDA592A6F36610CF1C2F91F66E555F34E426E86
5DC8BA58B73B8D16A23C338907B571D95C38F2E3318BE79DF989B3D1A228D5A2
037F02C40F520349D96E995B1667003587A235F890780C57F6B0DD07ED2066FB
7FB56CB2F50F32E1E3EFD8CE981C2C60CD978D6AC89C5D7D11D6BEBFBE5A4915
B2F2CBCE480C6CEA4B76B41A748D9897C77D118FA83ACE8F139FAEA951CA3592
0176BD1EA5D79132AD4EAF4B741DB1E94F0059D289A3DBD48DAA0E8A76A7022D
DE36A1D32DC13EF721BD656F5752CFDE4500C84123B8EA6D147D264E48E69939
FDF48DF49CBE4C7E0783DF55429E396C9C0AF8D0AC0CE02F15E45F1353E3F80C
5D2A5099C0FF489438BE89DA50BFAC7999BE4A27BFD6E720FAE7571F9542FC06
3B35579C73EB8B80508FB0ACB8A07828702857EDDDC1030D19928F2E260434DE
76F82BFF29C668B8081D81891456B5C2A458062AE89D4497A6155BB0695CB857
D7D18E788D2DF9753691F485430EA6AB0D63050DAFEF2B2B970EA384CB6EA25D
04E58D3064AF5AA364DDE7579E59AB8F63B4E0D1C4D5047A27836CCC0007BD95
BBF88379F413BE60C6CA25AE8C24ECEA89F3986E99374770DF61DF6C8619889C
AA3A54DFFBD94B06B9B14430A07AB625B16993CE202A5DBF62951607A2D6EC68
330660124E1C3258859317FB58DA05218047A9986794B83227FD4117B27984A1
41A4B19E695EF47828644C3FBC75583A7943ED882DC2C6ABDAF38CA840EE5813
BE0FDD6D704EBF12819DB3A790D521A76E0138C90FEC05242DBFF4BC8B67AEFD
8E69441FE11F56E54AA126D1C9DD766FD65D3A9CD4503AF4114D06702D26C89A
406A0635F4D60C3D5A5D5AA54D4566C36A1DE47FF6210C0ACBD5FDAD9448B616
C1A2AC048C04EC131FAC6ADD2A826FCE49A38C299F94BAD0126091EF1E08F8A9
C7EA3ACC3053926BF4350D36D28E2E8B90CF14F0639F7961EF6E7C97350B893E
F62A75CCF43BE77361CEDA0218BC45F82D52F921628DE7E98B50DF6F25D1BB4F
3D5A9EA575131735F93F0895E0072591A530393E0EF9FDE733E4DE7FEEC2446A
CE741C2D06CF989858C45A915B43A7216DE21294B59BE135A88195FA65AB6364
1336AE12BBABFCF568BF66A41F3B3AB8D7E33C4FEDDD970231A02B9BB8C75918
7CF9112E3619F9ACCAD376725BFF27648DF2E6C7AC7ADB2BA6B75F4F038FF6AE
864A2170296232B5E436F3DAB6811B1027FDA8EC97348342FBE9930B4C12E8B3
71F8039DD5AE3E242EE9704CB59074A7929A4F68AE1B1FC0963D19876D07807B
1EFD07F6F8BD1883710DEF91E2104BD93B1A101D533588E54897E8B9F0A0E733
00686A2EEA2E5002D7CC4525D9A91DD007AC7D759CE74D6A9F75B373FC7031B4
5EBB896D578FDAE49D71676C77EBE2D09016E1AB71D7C93ABFA10BC47E59D475
EC12451F7BACA032DDDFC1FCFDC3DD2BB7515A4CCE0A21281D315563895972BE
E88BBB45945E6EB58AE03B17825065A7D17F4815CA118A1F4B7A15D1F43EFFC3
5BA38B0EF54AEE2E8E33ACE1F665EAF0C1160CEBC4F8E80A54D110435B8D61DF
BDBE592A165ACBBE781B8631A37DBFF50EC66AD74DCD4EBC1CC4BA228065D8C6
D6B7A727742EEBB6EFB9A5A239C8C5AA0B1DD0C2D9661E46178BD25DEA9EADC2
4CBA0812BFA2FD88FA61DF5771717EA9BE35F22282E7EED85012819DD2F97FB7
DC9BD09E67394AEC643774FD764D99E501F0ABF2812E6F0934B1E8C8BD2272D2
B54E515BBD74D9BACC9DD8F3DA9D561D581E02FF71436FCCDC070D18337AFA8F
C7F11EEE0D947914957061B5D49BF275556665128B99C206E5336614FA323174
45B8B17258BFEC3F9566DE3A93D88B67B5E9E1260F6699D945A611A7EA348DB3
C86BE4B4D2CF71BF23B5C8302500D3F3428D883D166829B22390AD4953E8ABE6
A6FBD131E1691F749DEBB18A5B5B90D278B6DD23D9288D07CB27623F09C66E99
ED3899422564593FFBD732CDF56675766287AB754392427926B9ADD6C0BC514B
23C984DA4476FEAADC98EA7FD3DBC8128E873523346BD5A991D00BAEE2F2A82E
2D45D4587AB973C101262A711742C32F3F5A1C25F7D6A8D961E356D68DBD1FAD
A5AA86EE07E447D8FED8BFDB270079066F20B0A34288A49CA23BA885D1C34836
249AEF8ADE9B1402770BA127BD4B9E4F5EC52314B25837FD1180626F341BE572
8DAF271377FA7A0B3BE567F630F989B8F242D209C1EEB328E08ADF89735A59A4
A4B48ABF4B835D30D49634CDB5E5E32533B70D1E617E255A4A7A43966ED6B195
84EB8115BFB080B2E13090929978105673588C1DB5431986461CDF084B59B578
6859662242E4FB891859F173B2D497BD3BDE3321BEE5212E82C465991CA96AEA
B444C93F471D6CFFBEA7688D068B7E0042361CB5E3BAEE387F4E8ED1C7CF66B2
5B18D4058D60DCBCE79471D0CA4DC7AA32B48A8E00A9F8542C98DB691FB17E10
342EFFE68AB5100361F32D7BE0840C35FF2A964A6D5ABBACCE69775DA6C48DD6
435F118C799C34B50840E0DE2ABB0DAA2463EC7B5C67341AE169A334736D24CF
EC8BF8E7F0206FF63B67A74CFE778149E5795166423DBE5D30C0453E411C9393
61D349346C3079B29055B18C857995ABABB9715C492D8377065465257FAC9F7E
E6EA74F7C07916C7B7569E64DE2E78641424814F2BCF083E0B5BCC7BFF6D08F6
1C99A9463AEE72BD5CF46386D6975B70E30002CEB0144F2E01D43CEBEDF43387
0C0523C3C8A7F3AF5DE044750BFCDEA5CED8F5284B730B33CB7C3EA0AE08492B
397CAE838F32E57652C3275885620061EBDF87FA773CD215915A7DC5CEA6724E
72477F0C0B3BBB6040F2C7107D6CBCA0F8293BC3BE603D6BDFE17BF9B620C983
C01215499D05DE9037EFB267FEC47604DE8C8A743C5A5BF33ED1E1A3310E3CD4
33D6E8DAB548FAEE5C67092149C83069C3B48748A7F0D4DDBDC49915502DB5CA
8557D4A9EEDADC0814487E67AF3608547E1CB72DD33B92A53D58C697C487E3C9
F825B5BD086A6F111C9CFD29C70C899E14087CCC98F595F2C64AC365C7FD793C
CFE73E0B0F42BEB8396D03C6ABD18F70784AF895C683BC31CDFC0DFB5D8C14F7
8D70E6B9048F3940082165A382E750152A94A0A0DABC97B4B2A944138C54178F
BB11A65539707FA4F66CA22F388B0BD6D579327DEEE45449E1C84AE6E32B58AB
6BA4BA2FBB5CA6D2DE2B252688466532AF71DBDA671CCABE69652A7A0E48CD62
CBBC65B2BC961B806063B735900768E75D440300F0BB495D5AF40C89B75E7FBC
53EF85680076F0A90CBC58D0627ADD191EFFC574588DEC1E180341DC959F8EF5
6ED5B74C12DCEFEE96974374BB6E9D392B51363C384BBCDAA6FCC1B83E7A2B47
C10C95FFFF6F55524C8964CE1CA8A154A7252C572AAAB15FEF7E934F5D0498C4
BE4D042DBB756CBE5992DA15B29CA142C73BA10292D0754E475343A5A356B3A7
D086CD86CDC90F418D86E8B704D37E19D5A5588FB9A6036715EC18FD6FAC8DDB
7302547D450326158D949FC7D9FA79F32D52BAA9BC1D5174CB45F1A82D338E8E
EA16D247D6D3A4545905730D5ECFF6A53718E4BEC0954E13911272789134502F
0978605C5E2B6F92BB55E34C8F016B5F91CD7BD3C736C32D8624E1FCA54BB577
F401B4D232A8BA6A0A6505F8516E8EC8426FEC458D2C2AFDCCAB87B90081919E
01B8C1D88A4CBEFE5BD31C5B14B003F38EA1D7463ED69ACC6BA5AC5B5FCF3A21
1021A15A328C151D5598D5C19DEE5B8335AB3A61FB3C873145863BEC1B5E8CAB
5304103B0B3EE2F3B97181AEDC88F1D875E5523F3D2AFF386B9525D84327CAAD
11A769127CD2D04893D0746AFB81B6B63BB2405D8C11BEACC5DCE371CE0F825A
65B22E682E4C6981F1F3C0E9B2EECAA01EA5C1DFEC6681A641428C62E5435619
08E48B2B603B1F08587E81D3EFACC0A599875368FC2C666FA0A35C4C8596AD22
AE7F7C5F36F1042FEF9BAD9DE1D97865F8C2D9B55C114BD8277BDD2E85DCB776
DC7ED250F98A9D54B9F2AF8132B8E428CCFDA427E2FA7DC3EFAFEE0F00BBE72F
7BC9DBF8350951EBBA6E911F33CAFF807F256B31120CF711DE24CAB53C62484E
0BC8031D505D69DBB5F5AD46B06CB8429E2CEF1DE512A60F3E1DF278C46A4F26
DE2E100C3D4C9D4B88741A72099797CEA95428844AD4E450427A92DBFB6061F8
B7F2BFDC99B2AD1DA3A35E032B8E1D2064BA0B2EEE00A37E4E909EC8E734475D
D6B32BC6B6A3F44CDD725F9AA654255655AE2B5647CB5CD00EBC7635AEDB3F00
A55FB22D2D9B672D764D2F51B2393ADC71A36AC0FF19688AAFCA591A445244F3
38D090137284F4DD0C3FAA11C1548D07D698C052BFC0B40FBFCA767F3B1EEA76
B1520772E7068D0B812141083A67AE2001F137F7BBC1C5B682179340BF4A92BE
6783A7FE49E9118C94F79ADB280E5CC381FBEDF150E92112CCBD815A60CA119E
BE7E37AC81F9D15AF7F217E907C79DB9CF3744EB03FEBA08935FE077982AB95E
90528AB4D939F05DA6175AF8A37C2A4A4CDA6A29DB989780708F7D4FDD2789F5
7A6585929BF1028026FCAB3580E315F57C2C8D2492246BDD86DB936D479ECD8F
3B9D4B2F3D95477FC12ED9995399EB66829AB49A43C90692FD7D332DB4097FEF
E402D3DB0E617B120CB7F2A64600B4E36A89586CE50FC9C168281F59F45D49BE
81531871AE8346399477A2BFB3D7E65C04EE0553402D168F8DC825E8B2EFB8E2
803754084084CF308B047CD43CD5B2CC8BB0867DE7CA55C54DB2D6B2CA2FFE02
B6E5112E4532250C17C02A844CD9F42A31F6710DB8CE763A39247E51A2583CC1
F6D4C1D2E5EA316A091C458AD39667F41AFD558D5735B892A1F69C8C1A81CEC4
4E02384CF72EC92B1EEC07707515C98EBDC2768107C74AB503E5577719F27D16
5264869A4D5EC574FFF64076FD6BE21011D036B3BAA3217EE0DAD89D3DFC2D42
0C6A12D63EE1C6F65AEF5523D6EE9BC66EF49BA3F2E9C583DA5729C57988A6D8
AE0E1C9828C293837334C0BD8008943710FC65445489A34A007D82C75B81149C
64456A88F88F754C3FA442398B839A69555C48F9FD9BD16061A98DB4A69260EF
9FC551826A537FBE9B5F897B957CDB27ABA4802F0E34EC6267C21FA581E86060
A00DF7E387FE4360955D6B40948FC166975ED6FB9DEE4585381F74DD1E8BE9F6
E732E35A83020E2DEDD1593FB0DC23AD0C12F312CCE7509AFA91532E035A65EF
F88AD05DDF6D726CCF288A27F32BBBB40D609FFC29FD565D68BF89BD37A2E4A0
B6BE71A47B68657AB4C1C0D54811C6686F56856DE24A3DA645F5B797DC127E0C
15208D1993E7DD05530DB6583D6FDBD9B88CC93C4CF4E93AC238288C127BBEA0
82DE33FA87A83DAB9E233065F4CDA3F5E40246DE10DF2BF4DB56F9758591EACA
E8A6DEE81B0A41EBD0CC6D71A2E4B5528296D8827B8E9DF61064658A058E2344
68B01FE40756ED5627E1C049C7470AB0ABFA6979C0AEA235474A2581C01C4AAF
34A4F38F970605595400D89642FD874209635F566ECD661D7BD33B487CC65DE1
D661D58585D675467E6606632B9E57AAF054203496AAD69A05A3349349C965D9
025A5318E6C14F4B50D74D647D3426CED42B69FE1F617426738912AA61F320A5
D28216384F61DB0CD008AB7A26A46FF9CECD38647C5F531173262DA2DBA680F9
240B8C62DFD256EA1A753DCCB18277AD919493833AC73ACA7B5E0259133A974B
F91D608F98FC3D68A453F4BD22339E88CAC826DD76A1136BFFA3B0957C190534
8ACEA2471AB4CA5909A326CE44873FF17704C4D368DDE2B930D4CFBEB9FD0A02
3A8B691B62C6CE8209C642C88F642E274124FAB7199AEFF76104D76978B921AA
F1E522B0134527426997DF617A071EA58A0D10AFF07F15A799749C255C27EBF3
17ACDEB89904A846BEB906269EF691B4B66A9FBF2F42F5C125B2FD29DAA9FF60
D639DE060E978D288A770C159C2A30EE7EC6D6677595C1140E0E0CE79710EB5A
BA69DCCE0B5A565A7CE197617451EE9261946B010A792B357622538A1130A56A
1749003222F63D071091A4CFFBE3419F5A5A4C1E1DBAEEB25061E64831C19698
C0C0C9683827A13C1735D2C649C0D4AFFAE4FB530E12EF9AAA10A7D19BDC08F6
35A6259AE5B593A9B66B47A0B14492B040535AF9812B6C574F50649ABFDFCD7C
9BE6B7C56C9816AD1985FB7624F5E48CF6C9069AA019ACB4B2F537DB6411A896
C47BA95E71219605B0BFC4C63057D7B7DE7FF432BBC34345C13693EC4D988A44
EDBF0CEF41E2E467ED1518D82B08130625B70FF39B04BE8DDA6AC960A3C9C90D
CADE25C9DCBD080456E884A0555E2922EDB5B12AEF0F493C52096232783EB06E
11048F4C440B5BAC980CFF66BE9DA2BD1B660010CC61CE0233250B7BA271234B
C69D166FE6BDAD5E74A523C72A25E02C7BA32DE8458AAB95FFD539C34BA46D5A
1E4B9ECB7A28A440118DB7613A4CC0BEF80943F7692E2DB98E14D15A0EBF2C8F
288214125072AE15C467502382E6AB57DF7147B9234FDAEBF07631833BD20F64
E670563FC0630E014F5544E46BE9C7E0B1997E6DDFE02C0150AAE2A9AEDE8292
F21814EA7DFF4768721C5A1D2E8D12145C09268AE9B589919EE6287229169AB6
A7B679DBABC92C080321EFCC75626861C86A9C0BA0E70C944B3B21CD673486E1
84BC32D3AEC992B620A98338F962CD1669DAC8518D31D096EE2A4B193612338A
CA58E5B2FE8FE76A4A2616204BA3200CAC811474EE9FB83985B96CA9D2CAF15E
F5F7024C75B312709B288BD7DC6DCD6FD5D401B2D794B2E1E2A3624FE3B545F1
7BD80E606773B9BA44FF3197B9C6282E98DAD2C3ADE7D975F1B658A5815973D4
6E11B1C7B596DBB8AF64EC15A553C2BBCBC65EF99AF3DDEB4893ACB7DFDCE534
023FF4E38A42358632755A48CDC9AA5D190BFAB12DE3FFEFBE26C3D7909C6B79
232A64AA6A8582F3B5D5178C9C04AD8792FD383F35D1033E40049192D314E780
7F206E0C13AA68398A6E28FEB3B0BAF7D448F174AB871C254B8E7CD77058113B
702B2C13F3487334BC4638F601D167121F2EE337886D0C1D801AE1C067510269
484241A8D61FAFCCB13A3715BAAEE70345FE49791E13C0E786DC790316B120FA
B737E69A5BF653B1126CA714D9689C94CA612BAF4375C33F9F42FF4C40D9DB2C
CFD4358210F9176E156509A555171B4DB2B2F164AB96CE901DD2E8EFDDDBA23B
3C979AEE51FB9DDBF77E2DCFB83086D6AED4460D71BFB257752C5AEE42439A79
BEE87F756273333E84F341637A1BDB292EADD055C970250B6AA826B223E36E49
6B79B2C7384BD18B3817C4B7EBA5358D068EA5038FAC8EDC241DC3360844AD12
B1F34AA9B66AC6349E6D09199BA12884737714C5FF16163D34EB34835C7C0E2F
BEB1656E6DE0718D62481CA06AF5AFADCE78232A361060B3AA3D532005EBE263
002D398E3EF29F78627687D3EE4AB64AA68B396D08EDDD4EE9619F8A35471F76
9167FDB24DF017AAFE15F55856B3B27234C2CAAD10F354EA1AE122D09E820124
84AF7649C3FA87A3AE44D93FB7A0D802FB0E869A35A58844DCDBF7DCE03D6DF9
C02645D7360AD6B7A1FADD93BD3CC207D8623EB59F6B3FDF30240F0BFA8BA98A
706E2A30A8D04F8F9869AE0635F14888F28F7674C2F610A11E46A75CE560AEA4
C017EBF96D173F02F2BE08C47F7D1C871BE42E5CEDA6AFB08BED690722829E69
79D861394B757231173420B130353EAC9DCA9D8E6BEEA931F9FDD3391E0E2353
DC2EA171E90DE5650019444377E4668760649B816EFE129661D5D17037A6C1CA
EDC2E65E6577A03DE99BB78AA734A691804E169590706E40D050A60E57B7D37B
D34E620205B40BCD46133E59BB3A03BB379BDFD1FDC40E678BC42FB3835475F0
933813728C41748823421F123C9A24D07C12FCE3DB7EFC71EF96F5B69456110B
9A8BBCDA8551C3C14F979F3CB168638F184A66D911FDA9633767CC89A787F82D
8BDC1F8AA58E1B03E56F779FBEC972E383758D612268B74D8D829139E4846FE4
D215EACFCACD52145B08C936B0E3CA70E2CA7B2CEFD8BC432268AC2DADC295EC
4D11544265035EBD9EAF321A2AF2256EA0675264922F9A98E6FBCFEFB21F7A6F
998AE6E072B40F17243EDE31995D772337305ACC80405EF270A816607F248C5C
1D5C56035A8FF22C6C4E97A63FBB1D5283638A1D4611412ECF92AD5338AE9E8B
DC031F0A2F4E8ECF24A0CA6B4040383C9D96516806027CEA8756FAA7AC4AF236
1EB14BA5BA08543D8B5F2015E5AC9F68895770EC42B49A844597BBE9C898AAA8
B4B84E9B71AA89E6CD16BD3D7D2FDB94009F22704782970DC743AA2A51381BA2
75FE5987D38E1239770CCB4CAF2723934A4BD863F5874416C975F5A96973CD3F
5E9768CD7484A788E206EFAC42135E0A4E287F2B2F9EC21471A9BCDB3FB6455C
19C961061820A79F2D3B5754B18AE6B5FDB9516E8F0456FE418029A89115A5F4
3AF0A1D86F339512905730145926CFA811C2C8D980A5D834F569AC655A82096D
1F79EB70A864F99C5F148DA6AD24AE6B2ACE3FA7EACC7C062F017A75A4315459
00CC791637CF1CBB3F5E3C5B3DDBB4E00B478CEEC470924F6608EFBBBECF325E
BE97B2F1432E88BE4312B23656EF78C948DB35D1BA1D9AB7631B32125828BAB6
CAF95EDAC608B093DF95A2CF615F0BB10FD74146E53D18817B3CAD4664CFE092
FBDB6EE6152C76E8E9B8CC13EE12461979BD70C9B32A80A4C710044C03A37A68
B33EC92716DA8779D7BB604910ADFC896E17399CD64CFC759E5823642FBE1ED4
90435FC1908D7BE6B59C2CBF518E490FF120C6DBAEBD0FA821537DEA1565F4FF
14925EAC2C35B40729F5C07658A448FC502A8DBF2DD1FE842B28ED495FBA36D2
AF9D2FC5A19A74C8557175531AD35599B643ACADEE13915C5CA4E3FDE2183338
8F996D4F66290D511CE59CBA96751A38B20B691D47D393CB2FB893305D4CB1D9
96C5324C71BF2967206F62528B312F309DD39C054E392409A3C9D1C5555A6AC4
854DE2FCDE33139D56A4F4EF0BB6B301BE17CA9D996716F847845EFF4DEB6B90
2491076B7C462C1B85B412C4E3DABF94936F23D3C8E3372EE11D356BE1E000ED
C7AB370E8E19690F55D18DBF5594828EDCFEB7EAFBCF424A6CF8B15B51E7A798
09A9F616902631CC5A6F4D912C926418CC4752F24A30B1C3E6AD87C771BF7890
E391F944F26F2D6854D5E78533E15CD79189105776B7600EFBD8CE31A358933C
39B58B77D0B6E492701204FFFCDB3655554D8376654D3BEB18C17FFF1D471626
81D56F74A1177C55E3ED89E370A68767420E36C1AEF3F7B013B2F855504AC2F0
DAD2DCF9C30209FCFCB66A806BE5D52E6717CE9E62ABECD14DD2CC1F1A600139
CBBCF906D1B03F56AFCB6735C8D12EA8F635CCDF6922938913C9F00E643D97B8
5C9BB0A2EAF254ECDCD91EECFFBAD65034EE5D59EFF7BCFFC9D9EBB651A96A84
0030D50F6DC8B6DD3005D8EBA6244D7F2CD676D492816C4D96AB48817BC43D3A
1260ED71CCD65B5E31E0D7B3533DE8399688E895963D9AF91C5F6CF19A3EF605
898309C7C37258E94F58CFAE030D0C97078A004AB411DD396AF5013026AD37F0
63B6C5F725934677AFD27E725AA1AC81AD4C103C75BB9704AD2B74B540CFD10C
045215C334AAA1538A6B29584429B2882330DFF84AB492040FB9B3CDA5C68BCF
E790BABD374A72FB1B4098228F117F73B15126CF1FB9D1855E5C7D1D64FC57D5
9F9CF8686ECFDB350FF0FEFB36EADDBF7C5F983336F5862593D38E6182E8D1ED
F4ECB3B4A7302565C56B9009315EEC4A7CE6E412C27DCCE2BCB1F95CF7DE9638
012B0ECCF0E0E882658F04E8E24482E957EADD7ADB187B27A08912F09A010EEC
D90BA16633070E5EEC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2A35ACC64282CBE44BB5C5C335F3587AEDCE5DFC565CF
8858ADE4DBC6BAD9C4145F0BFC4171DA37C609A831C2C2F759CA7345C7004C20
C95C26BD1263A977889F923426DCA903BDCADA541EA9D47C160287743204F2FA
4EE3F50166F44652F257E3733A7CAB1F0C21D28BF894334254229853DE2F7A81
92CBA7D2A89B39AA9AD021C27D4AA27A96351DC61E31AC92D1D24D67DED3C5AD
F5B33C3A8496819782D70BB7AF508B4F912CD1F065FF19A49E9E5C41399BCE40
4BE25C804613386E7A4E79A2F4B2B5FFC4C87D544DE3BFEDB380026F89F98AE8
8D73D7174B84787F6A73B03A67E7C577911EC5D845FC0352DC31C19D82278676
A8577B52FE7EF7BDA438AA6C69E4568C4BD5CB265CF381F02FBF83D19176AC10
FC9132536131D31C158F4FFFD54FFB2E9AF810EBECCEC5B24B93A22675378C94
5F31C26697A7ED159B5292769952925EC997D72FDDA174C3E0F92D268D63B559
A404DCE7670FA75FC5FB483282D5589D95092ACA49DD2020416729280A18D835
4E4A59B4F7FCEBC86BCD866CDB153489680E7C90DC710C4909D50036BB8CEC57
6642181C1D459942B6D22E4C45DCCB51687CED6E30AC81F9D77E55612374EC33
9DDFEF0101A9CAD4EFEA168F36C0589E3A28C63E8E38D62A92755377D1274604
BE6109960B6F71FC815A42A6DF5A23909E98A97DD3D6B5919E2D7C52E02D7BA9
CF50549D78F86E725A9FB02142F8A47995230979D99132FDD9A2C5D5A5C90863
C06E376250670C41BEB73DDEB6099C156F65478D26C2CCE783E6417F2609A9DF
7178D1CF77A703341F4D587A6307E32195B8310BD109A1ACD027A29847D9E293
64410924932C527FEC90A0764E9027D61CE5938B121FD0932F962F76D5C95ED4
4B939B27616A053A193A1DE4BABDC5FCEE3EB40454892CE429C3ECA8635B7A02
E93CB1FCEA21FB89065ED98CEEBC0A2B16D5EBC946F9220D1D53AE3CC92C910C
AC5922F6AFB148FCE2FB2A268EEE5C776507CBFFD885C109EB32CE516270186D
A35750640D810674DC2BA2EF480B4213C0F02821D38F567012568991AFC0C3D7
4B014F39C5E151F3378FBD47B8D37E3CB1D5F4BC78BB3017EFB793B2A869D905
B75831FF3172069E6700B37C86688FAFA81FF4646D70DD0EE5E56361CD270326
4B69BD25A5D100A07295F1FEF8041C8357BFC56893182C034354025F56E1278D
EA065E0CE1EAC06C17C307E771E6A1D218CB957B114110F3599D8E6CB9E93D14
1668D361EB443AC9DAC4C28FD713683DEC1DA106227D7A36B5AA4F72ADE46E91
402D5E8C590CF59FDFD8BB1CC5A9F32DD35B13560761994A7D47CCAD33572C36
AAF5787B986DAE1922FCB9A6BA94EC16802DB8ED8C15960B4579F4965E6F3636
AAA62701259915BC2641DB03EFBAC858C8F2005BBF75779BFA8022F236006FCE
1DFC3ADD6D30A6B88161FEC445841CABA1D2A59B405B86983B4692911FF9F693
D459C15D45B4A02609393B950AAAF12E9F55887CE8299F546BDA7F7AED71F6B5
CD27B12BAE31C9C05777C5F9FCE9085CF55CE0548710F84BF1F60AC6F54DE46C
25EC04EB59158054A5F51CFDDA6B096BF92280949F74CA3768E1F016AADC734D
470B268A3665B519CDB7E2378F46DC92FF8F7970CE58CB9BAA9B7953225F7144
560DBBB48BCDDAE5E1B2CD8E2B5B970CC74AE8A08E28A3804934FFA3EF4A1691
BF445069B059AED17AD34223300533FDA11730BD7CC60F19E5AAD0C27B860831
5AB055A39C48091E7216599DA8A2E671C13C58C0200A66881FC91A4FF6F1AA25
69280A39586639D8E1C418E04748B104D2FD8D53231FB5DA9475D34528238FB6
64FACB2DF3175DD670005AB7CFFC1288DF89BE3A55A7A6C770D4F7E864F89562
C1591B12A9B82CBE1F3F03D7E973E74B0DBCAAFEAB623021FAB977DBF011E7F0
FD6C9B3E98788FF157E17D08C708D13559F506ECB281432C904833AA8E5C7A79
73DB0D3A6929C8706D29C8F9469F07521A611AB2ED5B28AD0CF0A7C36886429F
9D70DA0C55A9A1872BF7FF946F932852D3931043F260B7BEABB6B6F4CEBDD46F
ADABA26B5433D34C2AEB076031841EA028B30ABCC69AD350543C7F57523AD46B
2A36DE2F8BF9E7E9DFC0F91FD52CDEA7FAF96105243EDF44B405282862F7BF0A
301EC9F7A07DEA1D0391B73F69D03C4465AC7CB9682CE60E17947E7E675D1990
1C7E8272CE5D7F467C9C8FB7CB4BB005BB8671736BB7657CF2A658BFD6A52297
BE877AFD483B7A2E45D5CBB0102006031BFA0F2BE6C6C1B18A3183ABAE5355A1
46D8BD2E77D9972CD1F065FF19A49E13E75C561AC5582BE89C61E474C1D8E9C4
E792D5F6A3926027C477617E26697FD277D9A29A3B03EA96BC30446FA34F89ED
1837EA8273933541E1D4FC806643893A641C49948FBA78BF2F3FB8A327EFE9CB
BBE8F9B76ABA9F6F7335FDFC52288AA809245DE5FC9388B2DE22E4845C63809D
D18C122A46B866F4C7596B3D3867CBE5B6409D4903CF3DA9BC97C6834B365C39
F4F5C39DC16DF38ED4E27511B0A32355119A0FC4A9CD665ECA7277148AE89168
C8ABC00767CE1BC19F391E08E575B2EE78E04C5FEBD17C5049538CED34E669A1
62E422B331A3242DF909253D0D35319E2C674C07B0C87EA3885BC505BB0A5E91
F472AF04F2704D9367231B1B8C4102A58FD666120CC95C7D9F22D433947287EB
0A301D916686D396EC0038081B6EA8216653BA182F7FB05BFD80CDF441BB5004
C9649573B02EDE5223B3FCA7E79729589AF81DF105F7F92B98BF47C18B728711
1DA2974BB4CC54F9CC1364944B4BD1211EFAB8C3A4E98B15C2992A6DF72995B5
9718AA5429ED39CDE4F9CD1F92837B1EDAC160E1D2201CB19819C28263893057
FEFFABA2CF401E563FE66B594BB6BD224F9E55B1187997532BD69AAA7AD4FBF7
A0B1BCEFF5C2FC3FC6CA25DE86079D9FEB441A7DB7178BD882E77D1781093F95
6E26F8437E9BCE635864CA94CD5BA274FD97632C6C0F0067967A1A381F4C3F5A
3DDB5381CFCC78F31123A59E84A773A3D66B76ED2B262075077004C7AD97187C
F449C0179421B0D02FE8977B2DF4970EE03C65448E5F85C74B44F1E84A46C566
1CCCBA123B2C56BCA4F1724FD3C64E1B66C0F154D5AE1081304809DF523EFE64
D400BA4D22773660EDEE5EFC3ACC0D5187DA632D4BCC51FE58FC26FAB5DBA79F
8EB2E53E15F94647C5EABC7C20BBB90B79A821F784ACADFB56116FFB38C388F9
6143BA870537CC8B3E5A3DF04D36A0CE595241BCB90CB54AA515708E0F4F7835
97E360FB40476AD6E7850D0E405AE6523DC0CBB36045141A694DE62B95341CD8
FBFF1C35809F0B6AAFFD9C0856327048A90823CE9BCAF917F4855BE88DFF7487
5D87B71D2F9D76CEFFEF39857DA6CE0F074DF55E0355AA3178EA0A796131EA6F
FFEC99F667783B39904AC4A1A00EACA78CCDE5BBCAB3731366C3B74072044D3E
F2EBC1CF0EF62755E2E7F9C81FE8C4F9F1F2AE3B9560C9DF5FE24563A99DA07B
183366F8C35A210B248F0BD387E54F1BD6B965BE0416FE1EE4BDA71618D70740
BBB31824F936E0F5F16E7B0E575DAC7A0324909EF3EF2A4C728BC84C949B4CA6
132AC03A25067F45B16521AD0199BF61E02BEB745172C8C7D6DD63223EFC56D5
FA82C1822A63099281C1E8BCE41C4871F6CEC22A583406AA0C6AFF44BB564B4C
AC9BDEC7AD1230772D7B98333D5398A8246523886CDBF7356C311D84D4D071C1
465C95E05BD1F6B603A8E19F2515829D461CC7AC00155E932FA3F5B34063E50C
FD7892E71EAFD3121D857793F033E18F604C6AE3B8061C4C1F91A64C7EDC850C
1A6DEC3D47DBC006F2E69CA833BA22FD059C4858F97C79D08492ACE3AA3E3C9E
F2E84BCEA3A5A5A5C06132E3F92F9A7DC0AE201544DC7A3950962DD92E7209B2
CCDFC5C711A3A752FBF80C009DAC8EC55C7C1E25C98E92979341A8857C603242
6D3A136ECD5CA8033A3F755FBB8515426BB432CB6210B93F60C98E3B75616D11
8C53B8834047CAC32A61BBE94CAC3E85EE2BFF09F1D5F611E8AC05D2A5D0599E
F54054B02E8F4CEE9F976D08BCDC3AD62B13E1AF63B076ECB3C414A744322CC1
993915FA62731A558BD50B46F924568EAE3B9B3E3B12D89F8C6558622D678050
C25D4318F9620020FE59E47F31B7AE43ABEAD548324A5DAEB9AC7E77DDDF428B
ECBDD6394953021068450A1F811E0D5971206D765D271B2D2658C06D45E63C9A
5EA8EF66FCF240291EE3BABE9FEB7B66B0473396CC9E439029D8912AD08CC15F
BE5601AB7CB100B1D6F2CEA93992036C78C8D01D6B24DE1A62FF36B049CC836C
975870BFD49306F07C03FFCFB9AA06E2A1040FAF2DE1FD6AFD5FD97EAAB61495
689184804EF368BB22272D3602677A195ED7B734278171EF2182FE65AA30EF50
5F246F21D3AD1E663AF5FA6F4C6D3309A2A79E72C1E086AD76C19784527E7D43
9BC23540E72A142D78CD96C11B52FE223AC12C65643F211172488DA27DAAB60F
AF8B43F9409392E4D9197B434AFA1C9AB4CDDE6A24BF40246A18A8D921257BE9
AC6BF7CB0799477CE29B2B409995B5EB6A88A30FB007D57FEFC2BC9BE31F9C2E
C212D7741D517DCE40C6943373DB96EF2F401643A2676F9821158D56882769E3
AF7B6C0F8F856AB159CB7572C1D4B56E2EB23BBF72415D00225EAF9E7326282B
DF4AD90CAAF7A0B94495594710F7BB631D9C72CC674A7608EA78E1DD6F6FE073
28946228E1675EC90CFFBB47AAFC582CE3D91F40AC5876B209A2D6857D7C042C
CBF714C6F7FF2FC245360AFEB12779E6BD0E2D9CD6E8EA18E8A2CDD3F5477B7C
100C82E82FAEC0BBEA7AEF0E87A15B3ABD6A5E52B07A1D5F943353457EDC3EE6
6D9E7C76071C6EAC90E92FED0EFAC5D187A1416AD0FF129DB9BE2A7133E83437
9B3477DAD425B7996592FB0395E788FDAA08F8B0157396CF63CBECDB8867CCAC
10F0606750DD2A512927C51CEE40731A21B81A7AC291413C501D5C343A6E550D
7779D1096790EB7D8991E2D2BB4E21A9A90B5F9288C410487290808B88F9421D
506386AC95C519DBB53FB0BF788FC6CCD3C8503663E537B7297452786E95D8CD
FC66887FF3C563185662EEE213EC867121189889A4DB9FFD25C55A4F377E53B3
52830FA336B8CDA364BB9032C6A3A9CE03FD8D7995C36D487F4473BFADED7B2C
308E5AF4F5EC3AE71C90564DE359480E5EFB6D32A770C99ACF93AD672573419D
E238AFF3C64D29B8D538398774F4D2E991E7A981F856409739885A994617FC31
38E712F22AACF2D33AB5D9FE7BC6838B6D167DFD3C5716D21C17C7949D74660C
459ECD143ECFCCFD9F43D08225911DE5AC2088ED5D37F3F178A3591E2B70F647
AD9C487CCFC54A94F447A97175E18373A7A108C2925DEC62CDDFD1802F2EC862
FB85A143D7B299223ED8525202C1B9BA718AC1E0ACEF9AEAE22E5FA653C2698E
05E0E070C0D7C1528878E63EB87AE86DF8606145C4C0D45AE4EFA62D688763EB
DBAC71788DAF6CF106DFF90F450E7B20BDC3BA75207C66D0B692FE7C9CEED9A5
4EE6607CA154025706FDF9D0CCD55FCFA35A91FC4E741A3DD9230A486D9F58F0
CF991AF88820F1237A88AD72D8953E25AD54A1AB98EE106D34CD0D4E15BC0A01
8DED92CC65DA0071A4B5A932A2D6C73CAAA1E221AEBB54D3A7D5D8E4CAD25B53
6FE10E5EE241DCC3777131865BE761841AF5E460F08A7A5474AFE4A542C8641D
7D957EDDB999219FB9F7AE79D6CF34EFB8455C231D0F83DA849DC65BBE3920EA
29C527F58A87186DE1B496C4C928041D1CA723188D82905F460393B143D807E3
5B8CDC1B3E1DC2CE2D28AAF2C67CC1B2F46DB8AA8C2ED75C9D266C339E04836A
9477F961C63CCCC7D4581D1D357E52311AF227B3E316B42A7D2A0FA46031B8D1
1FEDD10EBF2FFEC29CD83DE07CB780F053CD2601C5A7C39DE7FC5A89FB868D37
9093C7694C5F059C0C2180824BAFBDE47BB46F54EDD7D7FBE6B568FB27393E94
DD3DF00391AF696A2E581AC595954FC01D0AD14E27155FCAA8366DB087010925
95D44011BB4BE1F35D930B080735E2D8211868BCBAC5AAC7ED3F108ACE635864
CA94CD5BA274FD97632C6C0F0067967A1A308AD941BF7F78928EF8D8528C8F6D
B7B307D720243DF50FBD63939AEFC3033B88B33AB67C5499D2A60B5321A36FC1
B70A9ACDB172BAB4BC144943B3D3FE06E95C6B6EE3EA90FA8A632DA2E3BC27F9
476CB699295F324F6902F36AB036C8793C7AE960AC0175D62683C5C6FB8B9C8B
521BCF0C8F77445B3C774A1A6EAE77D7675BDD727266673838B3362BDE4FC9E6
00BD41E30B56D88F2DB4AAA2F98E319A809EAE7BCE9A7AB5B1E77B1B8CD7F561
861C74D3AE374A72FB1B4098228FB6D6B41F8FE51016A41EA2C5C0936B813E3B
E2A9303C579CA1031E1026549AD77140BD3D26FD8D7C552C5FB55694647D0F58
9FB14A544FEAC7C86996B95C59BA14D3E597D9BD47E5D3B31777A9386F560D26
88EC215913996F16584BB29CEA625933E8BDF53F6AD9DD8DD4705FF1F152B62B
C341084E1B19E7D921E727EFDB1CA6A63F460F5B31AACF1C19C21C3DAACDA6D5
59A3646AF2B83590B2F1AC3A3F1C9E8D4655DBB1EB9820A92F8C86B98A36AB95
6ECE9F5C562071306642D74F177EA0EBC1EADF96CDA6EE4C53703763505FF273
C296A11ADF59C4919F63C78F9B7C2FA998F5BEFC631AB54DFEC01D96FBD7D076
357FD85F26EEF6C10AAF99A763980C768540A8BB14D390F350DA0CEBF7927D5B
9FE8E123C3FEBF42BD06F669C0CA2187337E87C6ED70DC12E8D9D29D53AF3EE7
1A2C1C2758596AD40E704DF34BDE39DD517431692EE1FA1132ED0087D8EF5E30
FD859485B932FDFEBB8A80ABD3372BF7B61D458BBC8CB555CE9F3B371BEE01DA
1A65D57E0DB229D3CE861D48CFA74072BA624C499BC62FE7B4734070F8C123A6
33E5159C65D64B02C1798DF351EE40FFDDCF72872069A157A031B6EA14CFF0AD
50200A157151F7625E63296E325E2C35206853EDE445DD11FF240B19F6FB6C51
4D23A7A4F543E217CB197A7DF573B91E5481522C7E5449ED049CDF2D816F839F
2C2FB22529A38153E830445FFF661BCCCA754D023E1E056F8239952812EF8514
C403FE3558E431CF6212A4F4719E66EE3C64292C209A832AF504B1BCEFB144C7
8B35CB48DA6611E0ED9D102FC5598792E6234F8C067569195FAEA379B9222DDA
32C67BE4C5F9AAA6971CACE007CB4E8CBD1B1EF055DBB7929E9666F539079846
5801FE1D95ECFE48911B4F84FF71A7A260E60CC675EF4B6D38AEC5E8546E530D
D792843E0D7F4F38ECC398D1B6120D8C8EB11C4114060FADCEFDF326E2FA25F2
4D796C53F40C89B75E7FBC53EF85680076F0A90CBC58D06763518690F5323C48
054E47E3F61DD358C69835A3191729A2B681F0C590D7FB9E51E09C85C5BCDE30
D15CD9ABEFCA73F7D99BFB580F4481CBC0E5EC84A3D9055FF80A5B576CB67B92
DFD2184A508BA545215157AD16CCAB7922A830A52AA3E631B7417F217B0BE86C
EC32409D8B6039E5E73CC759AC64F3CB8EBF8B5EB56F41B247F3F19315FA0828
548474134736DC80EF55BB1D5A1D7873601C11ADE13D9A8D6890F4E2E9F09632
FDA612B34B33A9AEC8D47AFDBA2F6862D8B67673B5D047799EC5765A12BE5143
844F51FA314E48DEADBA1FABE0BFD016F19EAFF8BC1164657D64B43EAF4ACBAC
482D06AFD458F0DC3F42FAC08C592E158DACD4D9005B983760C79C08C1265831
E22BC368594B7B90E07CC72DC667B7655B5AF313C6245000E62533F9F3689D9F
8CA2BFF3F9D381CB388A15FCB600EBD20E34B1B3929EA15A4FB8D129DA0E15E6
784B152A9163D796AD65EEE0ECC9ECDC61FB079040BB113263F553CF1E33F6EC
39837B204FDD6937F45C869DD22F3ED2474EA252AF193E5E9B30FD11F04D70E2
68F1D4B405AB3DEBED0BAB636582D103823BEAC6FE0A2813A352B58924803BE2
1FD28CDDB4DF465DB9A8B025BBB4963407C305EAD99CEEF4E3A931BD5EF07485
FE4DB5B47A23C0B230BD40ABD4B9459C4AAD0A5CD393B69534D6E2FD58EAFDA2
D8193F43FF146ACC2771C893B96FE305B9A9349B89847F8EE4A2A279348346C7
BC326C4FB78A42C96FC1C8E26B1ED180DD93E65C3ECAA7EA8887C646734C6C6A
02398BEB5AE74D0A83BF387B876ADABFD96E5F33507BDEC90B959AC3A19FA9D0
303DAC5BE0058B7AC46EFDC5DC1DDEFB3CE2A36D9ED09C845DC23AB5F12FF470
C770E26F9437C9EF0EB983125CD8B1117596E6FFDF4E273C7C890AE6E9307F31
47D78D4FA40F5388B9759429A9B76FC04DD60F4A12976872F59B63BFA4451E02
60FEF3C080602025A3E11EF9BA85A5C0ED82E75B075EADFDA470CEAF464D6C86
F05088BD36B92F4FCE9B19B7B199697C12A8486882520611165AAF3711B005AD
3DFBE56FD5467BE4D799425D869F75A82E117CB23CCB5DD5AC1C40B3C3DF29B2
2F885988C306058ED73421F9D738DBD7BADBE01ECEDB5E0C03AE37BD7ECB937D
F74507591F85053DFA3E3C8B0A5A5124AC92D53113C9773D6E27F87E6F707628
9065C1D0E2663FA57A88150633F3F937E9606C45762531D6C664F8CC76003C39
0E4C666D8156FAA3F6E17BE7B36E3DCF1C4DC905B343BB72416574240E31C647
4DD65547A0EC71D4169ECC5A9AF15C361F4CA0CB898646224799C0B710586D3E
3DDF28A5864D566F5C5324A36400FD0985C57E723DE55A2ABED9B40D7BE67411
8DAE93439450F121F0DEC0F06B38C966A0AB56FB40FD3D12B171273D0BF3A3C7
921F473013C85B689D316D3D363E3871ADCDD2D2CD922A19655959CA79B74895
C88B769309E234E05E9C82777BDE4191AA254EDA92887905BAC7C7DDA28F18BC
CEAF2AD29C826602033327589A7E00F36C2F3DA3BE87F87ACE26A40B708D9F5F
4CBD9F351FD9E110748F81DFDE2C7EF5B3C5422806EBA4D2DF543A00495CF0CC
2A5FDBD2127762FC7080DC7C4B1328C68A9102ED59E41847A2C431ED3DEFC726
7AD9DE87E23C241F1BED8A2A563F68C1C2F0196F30AFA55779A6802E2CCA3529
7AAE4CA32E601B41F9CBFD4336D16C2F7100315BB0FC8CC688F21F4F14EBBEE9
ED27DB30878A978AB5B97A4E93EF4D2B88C75F569346AC2B878782D12F90951D
46CC8437A4D888FA4FA4772845A518108C5548A8E7299F6059AE84C186BA3DDF
8A3D03A6269D7BB21372458A3AE294B3EE43660E70D22D1F9F4F865B7E3D72C2
0A2266163F4D72FAF2D79EC8F4D4BF3D849D27EBDB2B26B91925A93EA842C6E1
53CB0CEFD9C08E466E283361854AF351F4D8FC4782D9F7D8B8807B5AD4103C9A
FF6CAB64E76F662CE8868C1CF7905F6286FA59341E68A6054BF38D36023DEDB0
CC9AE428714DDD6619AF0785E90C2B3E28F20F423A30C79C5CFA483AF99DC125
1FA8EDFCF39BEC94EF94D9F2096E76F1C558F40812444C6F0F4DA8E37D15D168
F2AC55F33A1977FA4D3C0B6E5655214FF3EEF359DFEB9F2CD9452CF89BA16E5E
C1E16F206873FB7FEAE141E38E374DE01977C142E0ED10318333382EA008503D
FA570C5289218D585E3957F8A5F1A9FFB71AA63AECD0BA8720C1A79360150284
80F2CE7EE814B92E5F363432D0327FDD1B8EBE6504EA7C1337060BF4040640F9
5831DC620F62B87A086EA669CA7CC9C0DBDF10DAF01D029DD6AA15B6DD86726F
1107016FD88A03A679E33FE958749C1EC8B0A623BD35418A3FFC6882551FF6C3
1922840FF765CB849F8CECD243BB1A43DBC273DB1BE1C4710D8B5EEAD8E0241A
38E993C5466FA10496515D1B2D13C3DAC17E79B6D697D9F368D9279DF4860951
277F5B6E3ADCB47B5C404D62BF45C7F684E59B9AA6628DE7594BFF80E0543FB7
5D1649D0A728732E3701A8BF70A3C2FD75B549067212058FADC299CF292FE789
840D2BC045A97E8E21739826750855816309A71C82A089CD2DF10F79302E1EEA
4F86EDB1EB6F4647F4B1AEA267B4E0A71D69F7FB3DE18403A6E9FF8767A3C6F9
DFB52CACE234ACFF43A9850AB9E8BE225001F0CB10F8DD82910F9A54F627B4EA
A0489C6D09EA559B9E0DFCCA1A39673371E80543C6B3B76491EFB210B2AD7503
D23492E7E980B2C430E50E890674CF9CF62D79BB3521128814A1B75DD571F46C
70D276E51D9D09F54DD261312274B6C6F0EED9A95D4E4512662695BDC4004A3E
71F16BBA9E4094DCC92786C2B64E27F6AE19EE8D7572AA6ABD408BD9C0E8653A
847490C3076661D0BF5541EEBEF456FF9B867B6994E2B845E771E2C3A0967AAB
17B53D5897200E0D2E0CD90244E0444F469709A6476CBF11C97862C34607A7DC
287183FDFB58F9C71DCA9348746900FE665375E9C805A494EEFE6801A7BCF422
C9A4A46BCB3A9089D8B41B2CB3007B83148ACDE600EF35D20AE7CEC718C4017A
DDC3D3BC7DA1EEB62954843A34841FBFEB762EE097D8190E80B9F649AA9428D8
731ABCF5D2C83FAAC1AA920326C75F62F5B0C474E8F4E4BDF74C53268E1A7ECA
73776BA42DACC401F1A94760FF7862337BB4A2C3A8C8803E49B6071264D86952
389921BF84B06A7F9D4ACC50C374D88734FBD05F66B48A6B89B6C1D135B6E8B9
038DEC76B0CB5271DC2C2D293EF880D1B9147A7CAA0B6C48D3ABD53A405015BA
2FBE842146ABFA137726E88C5405668BD979D0E18BF03A4957485E52C2815090
CA3B1221A12F749E5C4191679568B1D02976D700F1D4CAD5C1319B772F7BD8C9
13CB3B885D3693094FD2953D7CD808AD1982EF675877ED133D5449510B39F1E3
A64CC6AA92CECF2BE970E6C4DDF87DBF49F20E7ADF22AE9612796DEB9138059A
4C12D4A95F4DA6120EEB299C2761995007D2B275FBE9E9942C2F07027D6B3318
F24922645004DC681C4C204721E87F9D237939C43BF179895E1A404580399E65
C1EC0F6755AC45EE919B881181642CB1F6C34FF817FA8E8118AA580812B07676
2EB0A14CC90432386E632476DE5A98F7324E9B1E7D722287DC781F4BF75E4742
8000E45517A32339FEF49C371BA351372DDB97AB64FCCDA6F82933AE40D00204
B4E0B767D2CD53DEE547D7DA10D5759EAEAC2FD95D3A4E975A340EFDA6FF45D8
1E5DCCB9C26B9FF9D41D2D58D145119526B2C3D294FA26FF1D3965B4AF6562BE
F69C90FF5C9EF7B504550A98C06A18D3DC68E1353BD4882E24DAA8DBD8E81D9D
7B6FBE67A34A71235FF03D040C70BB6CB4CD118419E5AE7A0C417CE93EC6C640
3F5C315BE818E45E6D967E1BDD31C1116B6943E00696C36B7253154FFDDD3322
A2B0FA0C1AB82116D999DBF4C0A6E7F6BB01F0C56FCC494F773EA3CEDD717B7A
B5ABCB4466E0E639B048A38D0D6B9C0C7CE81C66030F18331218021E2A234AEE
CEB93E41A44DBCE7822AE6146DF6943EB67602F6FCDFB887A83C42C50F08E66B
611F54314CC683B7B54F4D085798E459B5F96B09DA6000AEA0E6DDF1EBA2F6AA
C3F6FD242C25F6952AC55C24ED123A69EFB746678C956D013FB0402EF2F6C3B0
6EEAFF00FE26046999C47C2EC1C285506A1AF4C7592C471FB73047F2C0E879FB
EB40EF57CD4DDFFCE7B9035E2CE43776643E402D535F3E251647F3EFF443E8CF
D42368663888593BED5C09839634A81ECF5A229D2B16EF77A39178507E41D90E
7A809C75D22373802023DD465F60E5E5492F1761599235511B47B3B6FDB110BF
87F8ADA28B1791D94239604268B458A47AB5FDB14365B551D5489030C1FE9277
46A134B857E80BB677C002F5B67650D9D434956C7787ADB73181682ECCDA4AA2
CF829BB74C20C39E157567538D8C50D4E5526B66BC38B0CC9669D8D3BCEAEC92
58D51FE535EBB2EAC247BD9D5A2469FB68EB42502E847F9B9B7902E74E8428BB
BB487D799F17A28722DDF48A5182FD26839F741128948A218EDA86F30574CAEB
B8230076EE91D131F1BF0447FF90BEAD2AD29936E9CEC739A1402019E6A9E583
703F6DB868C99D17F0EC62300B94D15AACD40F3D8B7306E4DCA49805DD8D2073
1DB26C86ABBABAFF7ED36BAD40F1C39ADF1F3636A28B7A4FC8E7CBA25FBB22FC
DFCC8C652DD6C9608F45AF49590E08F405AFAC7B3E33CB439446AF333242F316
A00A621DBCBB84ED824FAAA231F0FEE5F90D5AA9E862E30E05197AA0700E5D31
7672445BF85B73660BC2B57C89B3CFF6C85E86E42F923B41DB2B2DB1BCD88F7F
DE6F59961B6BE0AB7233315351B1FE7D0D6EE6721F4F33BA41B670AF286F4322
3BB308AB101F8D4793C4204D7D421367224D757CECF556A4B3CC8B621B0D8D5A
8EC2EF922D917CDB0ADD125F3A081AB213854CB51175B088CCFBF6EEB46D7BC3
B3B23B321C0FD9E3062F4EBC4405EA4B88BB5F97F04924E8CE229930B988DD82
FFD4612011CDDE53EE22DE1EFB9A859CE73A9F1990A0DB13C2E33342D40AFEB2
4E186AC111E1A6A7E8C3BCA79544B1A2F756D81ACAE235A58C64DAB4D6208CBB
BD76524B4084D5DBE1934628528987ED9AD8A842BEFDD0C2DDD8202F90FFD859
98015F4B66336E4A63EE0A5930150D0AB4682B25D8FBBB10124FFCE4795F9D34
9D73AEC17997374EC90B69293A064442141A41B9A6187A8197CAFF1544C76C12
8632A537E9C871617E881A399072B08EA7FD325496990FE31E58128CEB7E5D7A
D5D2166C4A311A0C52ED00D2305C70A416567F5EEFC42B1203840F037B4146F2
BAB25A95E1B0429A0F9DCD5CA996C2D83CE85563A9EBEC3B5A1BDE88057173C0
341AD77AF0171682E869706799A16F3755CCDC64A183E014A3325DC5A5B0D8AD
B5563588D38C1151A012779EAF0E9661EC12974B4B88A0AD2FFB4491A03346BB
7DA15082BD2AC655DCDFC20968F5BD12B078701E01F539C74CE7362355320AB4
F3E3A84E4B60EC6CF57A1A00F90F2427D3E84915A145A7BCEFF078B44C21FF3C
1151214C2B002691CF8BAE0C5A3B1227620AAABEA33E8692ED1BA821401FC724
72E528053EC041E396333C90480C82F2BD0E71D11336046B5DD23AF13B20408F
7DE2E0C6BB7997F87FABE401EDB52C881153E8228D33EFB93F057E59658A474F
1019BEEEF9DACF5F60C8D9DB5DFC8201ABE06DAAD33E56EFE60888332A3513F7
8E149823AB548C2BEFF78617DCD523FE710FF61D766E9B334BDD7EA54C5BDCF6
C552D90E472F21BBE055765DAB0DAC8449427E9AEF82B17B8AADD3CBB1CE596A
0A4D093163E531B3D50F22D0EE65944B9E996CBF597BFC9418A44915C93D445D
46F5D53A9377EBEFC6206D372675CF43235722B50C788B990B7F579C8A4DD8D9
01A5B598D721639E2A82FC866C1527AEF512224950615DA2039D4EB3B18C87BC
21D80478BEBFAF1BCF595125912F12542EFDA897594095146E03AE030063C3D3
90A2674066DBAD1A9C3C1FFEF085A5BBAA5601A9125A3B90CE131D3B48612958
B389F643AE83DAC8448B7BFBBBFB11196DE106B14216283297E4F4431835DC1F
3DA652834955472F18F480491EB93BA363D7B2A57E0206D42D82D2022D0213D8
AA16275D53AA35E30719A3CC34CD2B4F23B41E48AE0EC38B4BB1CBB26F5CDE96
581A70E88BF65ABB396A4A1D65189A94A64962F2958FC032DA85A0F4F3096CAE
AD2DDC50101AC80E33EED9E39C9D5C62A298B8BE48AAF79E7C22E2D14BDE2DA4
6BC1D1A24E7B41EBAD57574D43E06E13690F831AC3A93E1E8C758915784EF554
0B85A1ADEE63F53833C57199C829938FA16F33A24555973303D8CF2029795248
659FA1B8DFEFDA12D59DE5A8E2A2AFD63B328775E3B44F84CC7D5B5D62A97BCD
03931315E78D198FB6DD459C43D134081B6EA8216653BA182F7FB05BFD80CDF4
41BB5CDEDA7CC2A3C34064F90B5E8A643C8CA2B2F12BBDECD7802E20FF8BCFDF
1D312FC0FC0162F47FB4D8D9034DC426E82399D39EF436CBA30F8EB1A6E54378
2DABE3FF805C9DC31A438AD167AD6C39AA2FE5CCA6028CB3A7EA6CEFB7C474B7
5AFEA18EA3B3E1CCAE874D2C37B6AD9F964AB79B17E090FCC1137C613AC61B64
52571F9A33E04C11566DA89722A7ADF729F45DEE8F3E99966BA0D5ABC118B77A
96DA7C613DA219E8688EF2118F5C019999A8384094C6B5A5CE885D44BEB9BA77
820093FEAB6790870D236977AAC8583B1FB0BC61C7A26294870255E4A960FF51
AEDC316805EC51AA2954E34D1095C8322758473684EAFD84BB311DB67D0136E0
984ACFF19D2AB6FD30228712102653B00D7E484A88A248FD17FF0E7A075A554F
98C63B7EB2DD950F79DAF6854FECF2736A98EFCBCBB623FA42D2673B132906D4
F88BF12A3445794FC9DB3F1BB2CA19A0372E799AF99DEB62F1FB386855F55596
1A4765699E83598FBA5FE616E33EA2F454625BE4B1D174ACB64CACBEE30DA2A9
CE7073E02324E9A21A5BF2DC34E171718BBAE1665CE873BCFE5D090A8984E980
30FE6B21D7F43BA6D825DE96A8A5AAF64EAAA61967F079C4B3C2FE12CED485D9
3D8209C94E8875065A8D2F7D8A673AA447E8EE41E81108B629E81060CE90ADF3
FEE957603462E5E0E6F6BA80448EB6D0B6A8684436C85634AEBDBA68ADB8C2E9
96E6DFC40960E118A3C99F54BAD880A38BF73A432B9D19DA50258CFA1F636B0C
9C441A03AD99788F20B34E4E3064C94848582E13540E80A9ED419AEAB1242484
5723B5ABDD850E11E9FD1C6DF7729E6E985765D123B88F9C7E0FF099162109E4
C8B505BC4EAE56F9DB92C1A5AED7EB479993795ECA68079BC73197CAF5B6E7C1
794305FD3B60DED4EB4951554C574189EFC68663444DB7E8F8A47F843A6972A7
81290D136A9B5D69A31D428F43BFF82E5D15C8D09D13B0A98AB430342A8C76E4
521EF137A7DEEBE8D06A555B642D686CB0F0DD3CA419BC2D359FAEB7F9BEBA4A
9630ED0ABE793BEF39A7931111DAF682A0FF5641FD7860FCE9F0C7218FF8E4AD
1F20E68CCC91DD55A7419322834327A3FF23A23FD48660178B7B0D74A45AC1A6
B403C1964C0FEB8320A5264D6B64371271FD69884A1692AC598ED16C47D16F57
DA03E70605C645437C88148E53F04D4CA153663EFF8A63016F79C7D0E3B62CDD
78E4DA92FFFCF7B2D6744C92FB4F8A60FBF9C9DE27185A5575C845104FB5B528
D5FF652524CA1ADDFEF4EC9E9EBC9DD1826D55D8D8A72BE60731415D1CCF72A7
04714F0581ABD86BB1C44E7ED35B6D4B9983731C5F046357797B0546522F8019
95172279C60F8191D558D19E9BECEBC140B58FD9F6808EEC9C89DD52E2C4E995
753678CD20640A4DD5769AFCADFBF02F3B3BCF3C10263BAE5EE6335CE4DE809C
5092658E032EB1622685FDB66CF983524C804D906125178B9C2F599BD3A9C9D6
9B647FA92E2B02BFDD5A6B0E79594F1CA14632B9F6F85F7F266D95AD1FC0452C
A116399E3814C8F1844EFA97FA786AF63CDD9131A69471466029687E54807C6F
152322EED3BF20028C0019ECC8CAA5E074585831046B65F9811AD86690279FC8
F5B0F91515F3FCAB2B921A3D6A0DFEAAD917E7F290E617903792223A2AA23AE7
01A71D380E6BE5980537C58DB8E18E1A64A349847AB619DA734479DFDD78AA19
FF23F80B188F9969CE4D13F0E4C9DF59AE27AF9349B223DEBDB510F36CFA5A16
47F7FE410C72243748F7A097529B9C4495A1F67111358F429EEBFE5C0C1472F6
404B1AA6039BCA9DCF908AB3F675FF852EC27547BF62ECB5E25A0AE928DA1E40
73F2400FAF33E904886A269544DE0EDDA501893797CE29995D5C6F5C7EF10413
0515A28DBFE7F9A83A6854EE28FD1B2F50D32C813D247827B40DC36A2CBA4A70
1C45942DB1C91C7CCE08B4506841CABE171747E211861348BFA5BE91BB5E77D2
76E51D9D09F54DD261312274B6C6F0EED9A95BEF2A2FA95D10FAA84DFFE90A24
0EF474ACBB9E6B044CD0264BA0644E95818D08106F5905F67C15DECBBD1CFC52
B0FC8CC688F21F4F14EBBEE9ED27DB30878A978AB2246E0C6BB9167136A1638B
15D4BC9AE7F57F252FCB0B839F473F5D5D911F077A97BC333DBFDF76A4A16023
88A49C65A5EA6F16C25D5FA4DC837AB6757769EF2650ED238FE54897E8B9F0A0
E73300686A2EEA2E5002D7CC46D05DCD447ACB8FAA2F5A7CE0F51CCA3DBB2DED
AB0671FD591EB45ABB32D64FFBE3475AC402B3DEC385C5933FA43EB130D84AB9
618A4CA77BC722FA601A6123A48DB477CF7F93531283C6275E3B1E2C1F59B4EB
9149B3472716B77E6A07D1FFE7A25DCE7AC6EEAAE6346518C73303DC19529F4E
E7C27549767F9B30D9DCD175164ABCCF2BA090495C2F4EF40B181A1037984015
4F71FB98E2455C2224A61B1D9C682EC74ACB081A30A9874FCB8112D60D9C2D75
78459D27529F788E74D7D62ECD7B93C21B0A188A8FBC165CE8ABF57093FB0AFE
E8E65C7015DE91DC25F97B0B348E9EAAC8D14E62B83EF68D89F38E0AE3487EDE
0A148F2D79715A87199138664F360325C2A05133861783867EAA0867AD50B7AC
CDDA8AFE83D689459F860F97BA62BABCE86CF3127088FE3ADCC52440CF37FA0E
A881B42CA3AFCA0088BB227E90541B119A404CE7F52144B2D4AA133851EC3008
2831A288160D7DEEC0ABCF34C340EA150D8DD7A4233D51BD214B178B9A13E8D9
8416D772984988C4219051A2214B3BFD19891107A2D6EC68330660124E1C3258
859317FB58DA0522B1A0386E569A88B18A0488879A1FD4F01B8FB3F8FA04D2A4
B325248A35188BDC34A29875564DE45455D0ECE5F3799E31ADCFA7CD5BB81096
0EC563F40AF416C079A9D1FE506762286E5F5AA0B73BE21C91DC891ABB0F75E5
A78A36B344E43F5EE5683E3A7F18BD164E2E92CBD92E62EBD4CC7DED2405EE49
0294E01303458F742E5D683D706796D2F6B56E6DF1561215B3FB914BF3514501
9FE19ED055D7832EF90A57B7930BC1ADE2F3B45CF3C4E82ABB2F036E02FDC636
6BA2ABACB9AD1760964ADA8436700E74FB1A220AD14E1EAE70CEF7F489BEC25D
3BF60959044F062ADA05D662F7C17BCB9130CF7D71980C9059C48FED668F9B63
80CAE5E75DF3B8B749E7052BFF9D02D7ED989F7B8D82FF19251B1D373536B125
B5332E73D13193FBDE9CF4212CD878D452FFCC6326ADAAF9673181F96CDCBCA6
C7DC00FE1CF8345C827F033D03F1CAB29C97459973D3455CC6855CCA0AD222BB
F9CB375331A752041BF3CAAC0D5BDDA62504A20E6EFEB1E58E3450F2830A3A04
9BDFC6E9BDFF298B4800F65BB60C2513F3E8A5A080D9ECE69F8E6598B835A0B9
3A678CDA03C5C83BE1137FB6294E5747AF7A96E75454B63F2570E2C36D1CF43D
1AB5EC07FD02651DB2565E849AE18F9D8D903ACE520E5C7CE18C5849E359D468
9386FB4B59E7D9853223CADF1D781A7E4D07DB3D4F16AE2505F7EE30CF3C66C2
1426637245657B86A2BEDBEA23EDE0B3777F3B38D6F064C3BB1A93A92F126578
9A71E5E9E4BA90128220F5E734EA2DE6F8CD4225EB94D4436925DBAC8425E5ED
AEB91BAF1279E7930E73FDE400C7E7A7E95012314BA787EC6CB0DF0957587158
729F6B5245C3566B9306B6D6E9979556CFD400721EAC67C16221ECCD058F8684
0CB824A16D67D19A33AED2D04FF154BED027CF5BCE1D7D25524B08C70599D58E
7521F58D26AFECE2160E90A98E8461FC7F9A68707004D825BBBF84FD99940171
46AAF2ED1D90FDF92AC9F25075CE7D76366B5B28AEBF2D71C6FDF28FA577B390
03387F79289C663EDF220470C5C67DAF6DD7825A6CBD56048BE3943949B1CC8E
A1D61576F19BC2ECC2D462741B0BA00C6561DF4B4C68514317D1F43EFFC35BA3
8B0EF54AEE2E8E33ACE1F665E9CC61FA17E51E85E41E6A2B41331C56457D7B64
805CD9EF45976E736091D33F5E6D4508278FE8CB356B5B756D1AE9AAAD7EEB1D
3A3164888AFBB114923D8E28FC591EAC81CAA3F64D2E64AB21C48203C608CCC9
2CFF820CB8188C0CE749F731509FB6B908695967DE2A007A5F489A210AE4B2EE
1E29A43806C04DB5DCA0F56AB93E3A62F893C3BC235DE87B1FF6DBD93F01F4F3
989D8141816C3225866EB7FBCCCA5B71D3926A5888D4EE45DEBA1EEABC4308C6
87015B182F1811D000226A3706E7696D31CD88BFB0ADF15A01B991FD823ADDE9
3754304CF84B48AD99F07EAE14D431D216D9C57B7B8A99DC6A5D903B6D5C78B0
8E9FDB5CBF741CFA9D1CA3196622B3800D5F7DD513F0F47696DCE0AABC09D1B6
E2F91C968D4028D2F1E7C1795006F28D71D53750ED0F7B30F268BA2559C0B257
815064446637D795510E5BFA475E8051C73026B1B7D869657D0C34B0DF36A882
5B776FAAEF162FA24EB17C99F425CFBDE8CDCEAF38C0BC9E406A35F44C6B412A
BEC7341066D5BBF8FBEBF27B617F9877876BF6837DEB39CC7ABEDAF1F43B5F2C
93E3DE4D211B78DC484B802016095C8C661F75AC6C8238797C13451EF9C9E21B
9C60F64B27E0EC427027D5378898D339CB057D3E539E59FD7FBD0D2A5A88EC70
E89A7B24032854B34F5FFF1B2283621D7BE5B669A91BCF947E682976A4A993A4
13FC97F6F1331CC2E284DF0DA98FD84AD4180E993172DCFF4F82A8D7A943C3B0
A6C6A2716A7278DA0E935E45D29F19D3139BE06A658B9D5C01F8C97A17F55E5F
D3B2CD4BA1B745F37BF5624364EC48E2973C64EF8BFAF879F4274ADE69A07F95
5E8FA341BA4820E50D1AF15BFB22D3C84135823353A042DBC2011D60A3798E2A
7F99930FE769403B46E25CFC2041759BBC27CBA56E11106932087FF4370D1C25
711478FD4AC8E03BE4A6CDB5B8B90F5CE713C315E6E103561789BED35DEE30BB
E79803EA67877FDDED97FD7C9E73DE4D6D4ED370EFA66B4A04AF31AB83EAEDA6
18C70F735DF746994341A37A81B14DAD86E4A3D0F951A9357BEC5619407EEF70
0391472C1CD58E15E23EB6FFC0B492E09549CEA21B8FE271C170F27B2378201C
E997FFE0C8F20AA9E7FEC21B4E99FAE15977EEB185D4E20EAEE63CA2571CE3C0
D286CD90C83383D55FB60A1F5284E22685EDCB5AF06EE0CD971360DE367C3FCF
5311083B89C86D81AF27BDCBDABC575434E94BECB5E1A837A3ACFBBA005CD72A
3772B499539FC2FC32E3D7CF21012FAAAB5E2837E315B5547BD1FB606D9E7D92
60E89443A3941E74A7B6EAEF6F0AAE5F86D3C5A5DEBA71EED8BD7ECF7829B310
429383B5497FF39F27FEC1685A6750E12464F772F3A2CCDB482604F556E8B014
6588DF5F2653C608EEC3D845B12F3975C5EAFB9222EA92678E9659F6B7FE5E0C
68D5B2CB4B0A01DF4500977743BB86585724C654445C1E0C615A8E98AC0BD742
EABF86691E82F38F10ACD33817D7BAEB7B955CAB886EF339EC9553C3EC0EE8DD
C9546D4F64411F413D11D4F975ED13A41D27D4E2D6E2102C7FB130B8642096B3
D28F98E5E42DAC8806F28F4191E7D48C94F67BFD060EE61E1DAD76C5A984CC9A
15294FE781EB4D6148E58E0D110165FB25B2A9EBFFF45EEE2DE2CBAA132A8B43
EF2DEC53B454491D1A57B150A5B386F7ECCC0EE8E31695A336B9BCDB3F1F78AB
A6D758ACCD6827327CAD96B53D99DB84F0EA1E9D95B61F2140D5CF62135B9B4E
AA4D3CADB586936A9DAD4EEDFFA3C5163BDF6F0BB192C8BB84303FC6A84CF988
10DA3CEB40E498C201D4B151D532F29BCDCF2A27FFB96A311FFB2A6A1E302218
F9F363EE874499138CB34DAC05EF13006A116C82E1319A636C7D42C6CAAEAC3B
970BD2C42A98D7A5D999219FEB6E61D1FFCF627EE183D53571680A9561417015
FB334C602DACFDE349DC63077F80AF5E8C93069A3A27AE6AEF989BBB946F142E
16065C6247166107D6C1A4FAF9AE46BCF6A6475B4195EB162E1A32153D5C6216
D9C9385A18202E78D9E7ABAE481619096596442CE5B2C145DAE2B6128E6C913C
881554F113B044E5D336C31BA0F189C36F9D48CABEB786FEB1AD5DA0713E92ED
E9E4D41577EF58AC70B402A4427EB4731EFDC10CA164F462CA22DDA16EDFD6DB
7692A30F7FF02B2B54870AC37B86DA81CBDB85B88EF041AC4F72309E6A2CC174
B667F18452EBD489C9F1DE58AC98337E4201D3607DB7466631822AF1BAEFB301
E6900AC2B65CBA5D8D8743FC64B26BF9E44921A707C2CF3EDBA686127AEA8D19
CD37E3D1881861E2B8856ADBDBF5191C52513CA202582854830860E09994BE8D
B3CCA399DDE7FB9E504991F393457B9149586345BC1C0C9BCB39ABEED7E89CD8
B59B8A9BB23D4218042307E484EFC0157825F1B9103E7E02A4483BC8446F5E8F
38C3A65A16FA152620B3F3D886FE951954F01AC80A442A6A85E1184C2837691D
582AB436C58A28CD0FCA766ECE69CC4A60829A6261935DB32AA0023E80872307
E08BDEE03F6F7368F422D97DFC145DFD6FA4ED3D2B15998D02304F1F8BA19D60
7C5665B4168A0890CDEB4D14ED754D8D56C2BE2B6372F2D2C69C3ADD50592B70
8EB41E3E01F5978AA3DD52017F46146CC8DBFF7A20AB9970CF4226B84C566227
4AE08FAD755FB14C8D5C3926CD47F8CD3FCB12D0CC866F1414B45B2CE9991557
BCA4BCED8E6A5EC8F98B569EC47F205C96D627F7C1E2D97BD87B20D735CE102C
0F60A9D44BFF18E7188F329E2CDA61D7589E2C45A6B2402D0FC042A2D30C1697
E7A5AB01D4273EFFA969966A789FA2F37D729334F6A8AA79106C39A9F3738C63
B39DD1BC2B4707291F952183036CEE800D650FE2CD2E74C038665ECA68088E74
C7FE014341F4776CA33B3F4F759EB90DF8471970C5FC68D277777AD2F477516B
6676A165AE58B26B9DEE9F2CBE87991F755B2DBA4BD765F7A4F966BDDBC0507A
1F316256A34012E907F57A5B907BF705812BC67B634D780232937C8CDBD216CF
480044F96A1C9F166E156FE0CEA9CC5F97FCD349F8418B6A01E5791944B29686
89F1809CB5AA758162328979CD3ECC032BEADE20C001B5D53F964739AEE6D7F0
F17E613C8EB4385862257D5F9A72F865C7E1301C609871641736D8B9C714FA88
70776EA0B903DCDCCAF5DC69E296AEB1A806F0222132EA46587AECEAB4733D35
471A43C4AC733BB92B64091D3187C8FB7AE73DAAFD896177F1F70EADCF7E077F
F92CEEE279D3AD2988F79E6386062BE839C1F9D30AFFDE82CADE34933B04F72F
3CB90B285FC2AC725EB17A717495A6ACDFF2F387D0B0D95FF70261749C498DA4
98FCBE3335376430499D81BFEB0FE849E292D6FA3E7B6584779D8BB07973F01C
40B299DFE2E68556AA7917632A8D6AD1446023C27ED9069D28EE4B646196AA86
298FCFFED7ABC93DB3C9CE613B165AA5825279E7D69DC36F749242714C6E3192
DB7C4531253BFAD3180DBDF8DEA31BD5BB3282B204853E3414334298B97EA049
975816ECA43567C828283D27BCF96ED9D3947EC669D9E7CAFBDFCAE03ABFD55C
CF7762E42758C78552E5B1B77418EE03F4BBDB2F7C408A9877520327CCB89B0E
B07AE1EC07FD93D19F9C0A6CD0F1048173F52CB3EECA756C4D24FC6054D922F5
9B149466CA4D830DD778D8ACE45A2B3F6D84C530D25FB79808E183B77229E55C
C6DB71752DD0DEACAE196EB3927D82EAD55DC081E8B58F2F29E19F7D715AD567
F556BF4E6ECF25D34DEB46C4AD0D21BFC3A9A11405B0873D4E91B759594DF8CD
BDA0E00E908F282425191A69B88CB3D40AD897B252722950F1216BE4DDCCD513
27D1BACEB014C4D256654DDB145511CECAF4267E9D378CDCD13B00F96D75C05A
E1B7DA0D48A6C441568AAABFFC02ED2D82C4A8F6BF998B1BB3F96B1B5C8D86A2
4933A95DFA1CE0A848CB433B47A9D5EC6D5E9E8C3F5912BB7064F9637AC3E497
7E95A4B4BF0A8078677867DA3E9266DF3A602F5EE639C1D493EC4F3521BCC425
AC9484A067F741E11B0E4BBCDF33D30383BCD329DBE1B0C05ACDAB36EC7AF345
B1EB3B7E8780F0508FD81A1EC8D91EAC57E65CA476C09617B1CEE6A2B48CDEB0
450B99E5E008DDDF95CA5047CDB13FCDE826D3AAE15BCC039B1C6A9B7E8665D8
B9959A9855B99748A4BFCBA72B3406153231BF31121D5A26A64FE348622C6CDA
9FAC1A26DBF07A9060F479C61DC5E6BD7A0BA4E864DA31832CE3B416648B8001
6243002C75ABD706FF6272EC8B127F512CD94B4F5EDE1E3013A7856D01915A18
4EF2573168158585CB58AD47718DC369D9C0F1A3DC5248567195DA50C4BDB1AF
7C109EAA9885472587284CAE46FDDF5CD68DF5A2AA0CE55914B1B8DC1405B323
90852C344490E066B665ED505EA8A627FE21EA8A6CD551D9E056411524F1AC2C
3EB8E83B8DBAC38B02E3C78C0813A7475EB91E1BA3E5F8CDCFE558C551B79958
023F089F3941D614B61657013DF02ABFF62FDB561D45F0F8390F9CC2E0FBCD87
8316FA5F8498FD5AFC79B778CC40F4F63FA2845A5387B3F2392F12E2508F9594
9634071E3405B3E415E94564F270560C0AB39BFD238A0859BA570499CAAA419F
511C0C0356EC46A4E7754D3BB9B25BB9A929283621035D4C4D089212E7CD009A
A2C7F4C9897623B52692B023C3CFA2EC108B439C71C6BE51A9C94D9CF8F08C6E
AF9956FE20E107B0CC32FE842D8965DB60AB1F70F2794B3C966EF04EE4F6F963
3F89417C286FC1D5CD4E9ED58F3A53F295C40DAE107C06DDA5F2246D2C4F37A2
4C4C5370021C74381FB835E63479BD624BF8A298ABAE1A432799BA8A5C9E38A3
CE8A943EB455322A87C1634074EBEC25F23F8E420B0D93133DD2DC58828E007E
0C19A802A795C06C40CEDFB38717C0D90AB406A2F62CD9027E5A7B4D1720B25D
BC8C1F90FF30BDC97107DD0F2BE9148FD403D43C11DE2471C7EBE744A55D65F3
FB3C7726F68EA7F9E9F522E5DA8ABA2868658526B74727FCB164F21405F98AFD
ED17A88D9339CE85E9CFCA1E8F117A79DFEBA746355A8C9743BB806233A525CF
54BA7D96C24DA3DAA51DA535C8C84FFBA306FC5E40690E464D46673BC84C902C
09FCADC25EAA4EA92318EF052D0394C18D3AABA554C33EBBC53E28E86F108689
48EE507B47172D7B52B098280720465B6C40B5B910E41AF4F90FD3ABD529B568
E9ADF9EB05C4B5A78173F07E3FD7A174C40F2366A899776629A5DA0FB43E120B
ED34DB66E8D610F9A61C9B8F56EA1631492DBD42627082CA3A4A3D0D202ABAE1
E46EB10E83ADA49FBFF0662B93B2096355DD002464B9ED9AEF4D66184346A725
4B32756000AF03E97943129A8A6FB15CBB2229F2DFADC728A2B46321949C4A0F
AC85F211818B78B12B271684561F9742380EE8DF0026663246BAFCD57A7F5F84
5BC5F4C4C487917187C1967BF3983FCE91203D3E60C57B7C497318CDB711169E
E774783650F59A037B0243FFCB7392E4EA5BEC2AA85224F7C29A671F03219180
F3C3D217AB69A6E25B87D4414045A3317968C12BF4F3C2CCEF5353BCA7EF8CE6
151D158AA7D6F4DBE64EF72A4200B75B56BCA5D899F157DE02D11CB4A6025A8F
4BF97E1E1C778CAB39F889A684F409BD672C3E6A26B4F74F994B427019B456BB
65F17F53643B0EBEEA272FC9303A5D4E99E22D9F51DAEDF5873816653E5215E4
36CFC6E158F93B6243FF6AD2C9659F602269475DE9B02E6A67C410622D941511
4EB2F3FC4EFB8EB31E6D5FC58CADC7D4DDFF4EDA98E456F41F67A7063A2EF9ED
5AC30A07BD6297BE0099760774555ACA3D34D93B16163FFBE337094B4FFF9F5B
3A390C7084BA4E6E0D78AFDB692AB57336ECD0EE4789A37575171281D4F08559
53153234B69717453B25A641920E62DD5F8A91B4277A1F49C67E25F2CFF55EA3
3B5E7B1A6A403CC958FB840024382EF8F0841FA704E4EC76FE3383700A594ADE
0E9D59FF37C4F4E6E1712AEBE86D98234C679A1CA1503EEAC4658CE24F7DECE0
7EBE240E9B8AE837B7DDE8993804A527FA18E5C77582C9F15BD9566477F456E5
39542672B0D2AF645AAFB042D5D545AA99CF8EC08CF47C409055FA93DCC55568
3AC771F5C7C882B7BF79F5205F9E9A1EC74128D2448189EEA3D98D00CEBF2730
D812FDDDD016B803C38B8923848FE421F2D9971412E29FBE30049247EC92CD5E
35949F4B37D6D75C10FB83D7B0EB9DCE189314BFC6A128924ACE28E6339FEA24
57831A92A9B47AAA6B33894EF46C0DC437F9759ACC9DD14B661CC9D209B631F3
FA28B1C6B00023336EE7DD39FE52747FFE5802597B7E6B04B22D95F393898109
2DBEC6563E7F0586F5E3892618A1D6D530871C22CC273C435E3D5D1888046B04
E77002CEFCCA0215384C6D18B2339223DC051AD6F040CD2A177C7B27FF8BEB54
292D44D3A7CCBDBC747B40045F68CD1E40099E4C87A8C8F87AF276E8795C6CE1
075574C306FDB23602B7E183E6417F2609A9DF7178D1CF77A703341F4D587F6A
E38408C02326B40E27E034DC75E7E797B53DEB54981091EC4AC9EFDD9DA23C2B
6E2E8EA618163D2268734D6EAD6CA7DD212083440C3C61D2BF3B821B98289693
2CADD6822007395A5D78C698C7366C1C453FD7CC6E94C1E898D4AD5B5F9C815B
4F86BE50000FB32209766D44D04608DCDCCAF5DC69E296AEB1A806F0222132EA
46587B92DF892AF19D50CFF1C8E6F121CE477BC13FB3235F57EEB6331033E4F0
74D29DF85080F069561019E04A1973F403761127FAE6EE3AF85762C3960DD4FB
CD2B3AE3A2484978CC6E193F069F419AB35212ACEC0577E93BEBAED663B22968
E3D1C8F6EEEFA423BBAEE305022DBE5AEA652CA474A2AA36947F48CAE14A4675
2BA1071C3280DF020BBAB9CE7F58F01F7B0330E777FD4787270FBFFF96036765
AB41709009F4B36442600377798697CDD98B0758347B39174B93F22D21EA39CC
10C62BDCE780E617AAD05C22C3F3603C0AD8EA8B2A01CF904AE7EC5096959FA0
C82CE0F16B39D9F6898D87532EBB3BEDA782ACCC94BC44066330EA49832DD79B
D49904EC033C9F923DBBAAF20D7754FBCB60F2C047D0DB4CB9DE3E72F977FF83
A7037A6D0EE0AF9E6ACC64C32897CBB54D392EA08992E13EE42E047EBE80FF8D
71D53750ED0F7BDD110367D8938538034AD18922F86987F06A17CF19A7A376D7
92C2A13996AFE9580C5338059FCF9DF0F31B61F765B158BF942E340CFAA78132
79FA65EB962C7C3BD37B2B630007D17BD456D0581FE224A0D8EDDB7BB42B4813
76C9F7386587BFAFFD9A066C4CEA572F9EF2EFD51D0A16B9ACF9756534B26E15
00D1369EAD686BE50A26537AFD26A593B94511A5FDA74DB6FFA2C1511482E244
89304F6654D74FE98EE123229160983FEEF5AB17E4550BFA43DEEAD755DBE036
4F14962100CA346A9B1ED647BC448800EA5972E29BAB0951DD83A17CB31E922D

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (test_file.dvi)
@start /Fa 3[39 134[39 27 1[28 3[39 4[20 39 35 22 31
39 31 15[39 4[53 6[55 4[50 8[35 35 2[35 35 35 35 35 35
2[24 20 44[{ enclmec ReEncodeFont }26 66.4176 /LMRoman8-Regular
rf /Fb 138[46 32 33 33 2[42 46 69 1[44 1[23 46 2[37 1[37
1[42 16[57 1[62 6[65 1[57 12[42 3[42 52[{ enclmec ReEncodeFont }19
83.022 /LMRoman10-Regular rf /Fc 160[68 38[45 3[45 4[45
47[{ enclmec ReEncodeFont }4 90.9091 /LMRoman10-Regular
rf /Fd 140[38 14[54 2[49 46[49 49 2[27 46[{ enclmec ReEncodeFont }6
99.6264 /LMRoman12-Regular rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-175 -224 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -175 -224 a -175 -224 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -175 -224 a -175
-224 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -175 -224 a -175 -224 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -175 -224 a 0 TeXcolorgray
-56 -124 a Fd(1.)p 0 TeXcolorgray 49 w(dasd)3283 b Fc(___/48)p
0 TeXcolorgray 1856 6096 a Fd(1)p 0 TeXcolorgray eop
end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -144 1149
4049 4 v -144 1273 4 124 v -46 1236 a Fb(Erreic)n(h)n(te)26
b(Punkte)361 b(Gesam)n(t)988 b(Note)p 3901 1273 V -144
1397 V 1031 1421 a(48)p 3901 1397 V -144 1520 V 3901
1520 V -144 1524 4049 4 v -144 1544 V -144 1667 4 124
v 132 1630 a Fa(Sehr)24 b(gut)617 b(Gut)556 b(Befriedigend)461
b(Gen)n(\374gend)418 b(Nic)n(h)n(t)24 b(gen)n(\374gend)p
3901 1667 V -144 1791 V 146 1754 a(48)48 b(-)23 b(44)534
b(43,5)71 b(-)23 b(39)495 b(38,5)72 b(-)23 b(31)495 b(30,5)71
b(-)23 b(24)523 b(un)n(ter)25 b(24)p 3901 1791 V -144
1794 4049 4 v 0 TeXcolorgray 0 TeXcolorgray -144 3159
V -144 3283 4 124 v -46 3246 a Fb(Erreic)n(h)n(te)h(Punkte)361
b(Gesam)n(t)988 b(Note)p 3901 3283 V -144 3407 V 1031
3431 a(48)p 3901 3407 V -144 3530 V 3901 3530 V -144
3533 4049 4 v -144 3553 V -144 3677 4 124 v 132 3640
a Fa(Sehr)24 b(gut)617 b(Gut)556 b(Befriedigend)461 b(Gen)n(\374gend)
418 b(Nic)n(h)n(t)24 b(gen)n(\374gend)p 3901 3677 V -144
3801 V 146 3764 a(48)48 b(-)23 b(44)562 b(43)71 b(-)23
b(39)550 b(38)71 b(-)23 b(31)550 b(30)71 b(-)23 b(24)551
b(un)n(ter)25 b(24)p 3901 3801 V -144 3804 4049 4 v 0
TeXcolorgray 0 TeXcolorgray -144 5169 V -144 5293 4 124
v -46 5256 a Fb(Erreic)n(h)n(te)h(Punkte)361 b(Gesam)n(t)988
b(Note)p 3901 5293 V -144 5416 V 1031 5441 a(48)p 3901
5416 V -144 5540 V 3901 5540 V -144 5543 4049 4 v -144
5563 V -144 5687 4 124 v 132 5650 a Fa(Sehr)24 b(gut)617
b(Gut)556 b(Befriedigend)461 b(Gen)n(\374gend)418 b(Nic)n(h)n(t)24
b(gen)n(\374gend)p 3901 5687 V -144 5810 V 146 5773 a(48)48
b(-)23 b(44)534 b(43,5)71 b(-)23 b(39)495 b(38,5)72 b(-)23
b(31)495 b(30,5)71 b(-)23 b(24)523 b(un)n(ter)25 b(24)p
3901 5810 V -144 5814 4049 4 v 0 TeXcolorgray 1856 6096
a Fd(2)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
