%!PS-Adobe-2.0
%%Creator: dvips(k) 2020.1 Copyright 2020 Radical Eye Software
%%Title: test_file.dvi
%%CreationDate: Sat Mar 27 07:34:03 2021
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: LMRoman12-Regular LMRoman10-Regular LMRoman8-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o test_file.ps test_file.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2021.03.27:0833
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 23 2020-09-18 06:29:04Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.32, 2020/09/18
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%

revision 952 gt 
{
  systemdict /.setalphaisshape known not
  {
    (\n\n%%%% WARNING: Transparency operations ignored - need to use -dALLOWPSTRANSPARENCY\n\n) print flush
    /.pushpdf14devicefilter {pop} bind def
    /.begintransparencygroup {pop pop pop pop pop} bind def
    /.endtransparencygroup {} bind def
    /.poppdf14devicefilter {} bind def
    /.setfillconstantalpha {pop} bind def
    /.setstrokeconstantalpha {pop} bind def
    /PageUsesTransparency false def
  }
  {
    systemdict /.setopacityalpha known not 
      { systemdict /.setfillconstantalpha known { /.setopacityalpha /.setfillconstantalpha load def } { /.setopacityalpha { pop } def } ifelse } if
    systemdict /.setblendmode known not { /.setblendmode { pop } def } if
    systemdict /.setshapealpha known not 
      { systemdict /.setstrokeconstantalpha known { /.setshapealpha {dup .setfillconstantalpha .setstrokeconstantalpha true .setalphaisshape } def } { /.setshapealpha { pop } def } ifelse } if
  } ifelse
}
{
  systemdict /.setopacityalpha known not 
  { 
    (\n\n%%%% WARNING: Transparency operations ignored - need to use -dNOSAFER\n\n) print flush
    /.setopacityalpha { pop } bind def 
    /.setshapealpha { pop } bind def 
  } if
} ifelse

%%<bool> .setalphaisshape -
%%    If true, the values set by setstrokeconstantalpha and setfillconstantalpha are interpreted as shape values. The initial value of the AIS flag is false. 

%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/addCoors { 
  3 -1 roll 		% xA xB yB yA
  add			% xA xB yB+yA
  3 1 roll 		% yB+yA xA xB
  add			% yB+yA xA+xB
  exch                  % xA+xB yA+yB
} def
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (original)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul         %	\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { i dx mul dup xGridOffset add y0 moveto % draw the lines
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  /i x1 def 
  GridDX div ceiling cvi 
  { i dx mul GridDX mul dup xGridOffset add y0 moveto % plot the labels
    b 0 gt 
      { gsave c i GridDX mul a cvs dup stringwidth pop /z2 ED  
        w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse exch GridDX div z2 2 div sub exch 
        rmoveto show grestore } if 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  /i y1 def 
  GridDY div ceiling cvi
  { newpath i dy mul GridDY mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i GridDY mul a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse GridDY div b 2 div sub
      rmoveto show grestore } if 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 4 2020-06-09 08:32:19Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 4 2020-06-09 08:32:19Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2021 The LaTeX Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
/color.sc { } def
TeXDict begin
/TeXcolorseparation { setcolor } def
end
true setglobal
/pdf.globaldict 4 dict def
false setglobal
/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setblendmode where {pop} {/.setblendmode{pop}def} ifelse /.setfillconstantalpha
where {pop /.setopacityalpha {.setfillconstantalpha} def} {/.setopacityalpha
where {pop} {/.setopacityalpha {pop} def} ifelse} ifelse /.pgfsetfillopacityalpha{/pgffoa
exch def /.setfillconstantalpha where {pop pgffoa .setfillconstantalpha}
{/pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath
fill grestore newpath}bind def /pgfeofill{gsave pgffoa .setopacityalpha
eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}
ifelse} bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def /.setstrokeconstantalpha
where {pop pgfsoa .setstrokeconstantalpha} {/pgfstr{gsave pgfsoa .setopacityalpha
stroke grestore newpath}bind def} ifelse}bind def /pgffoa 1 def /pgfsoa
1 def /.pushpdf14devicefilter where {pop [userdict /bop-hook known
{userdict /bop-hook get aload pop} if {0 .pushpdf14devicefilter} aload
pop] cvx userdict exch /bop-hook exch put [userdict /eop-hook known
{userdict /eop-hook get aload pop} if {.poppdf14devicefilter} aload
pop] cvx userdict exch /eop-hook exch put} if systemdict /pdfmark known
not {userdict /pdfmark systemdict /cleartomark get put} if end

  /pgfwritesamplecmyk { 4 index 0 5 index pgfcheckcolorrange 255 mul
round cvi put 4 index 1 4 index pgfcheckcolorrange 255 mul round cvi
put 4 index 2 3 index pgfcheckcolorrange 255 mul round cvi put 4 index
3 2 index pgfcheckcolorrange 255 mul round cvi put pop pop pop pop
} bind def /pgfwritesamplergb { 3 index 0 4 index pgfcheckcolorrange
255 mul round cvi put 3 index 1 3 index pgfcheckcolorrange 255 mul
round cvi put 3 index 2 2 index pgfcheckcolorrange 255 mul round cvi
put pop pop pop } bind def /pgfwritesamplegray { pgfcheckcolorrange
16777215 mul round cvi 1 index 0 2 index -16 bitshift put 1 index 1
2 index 65535 and -8 bitshift put 1 index 2 2 index 255 and put pop
} bind def /pgfcheckcolorrange { dup 0.0 lt {pop 0.0} if dup 1.0 gt
{pop 1.0} if } bind def /pgfchanneldepthcmyk 8 def /pgfchanneldepthrgb
8 def /pgfchanneldepthgray 24 def /pgfcolorsamplecmyk 4 string def
/pgfcolorsamplergb 3 string def /pgfcolorsamplegray 3 string def /pgfrangecmyk
[0 1 0 1 0 1 0 1] def /pgfrangergb [0 1 0 1 0 1] def /pgfrangegray
[0 1] def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DF7740107CE11D9F1E95F04ACAA904AECA8C
66082082F59CB8E5E7A96FFD63BF90F69931F3D5B5F81C3E234904D5FE5CCAD9
17381670D1548D72FE715FFA30FEBAC715513E0525049188B9D91BF7EBFF4444
ABA5490DC6A5CD8C1BF3EF1341A126980C7890794A85EF6CE32D227A9532B61E
E1FDB83CCE8849508A3EA0FDABE92387B526ED0C9A92315083DF5BE16201B404
07019A28B699901B1A6F7C9D6981CD0DC5CBD97109E9E4E462E58A293CD1BC4E
240FF934EAE9355F75676B21D53206AB65DD1F7D423FB9FA7332AAF569948EC5
5BAD355BBD85D66D616844C0DAA6DD5D5492CA1736A52B8B9D95AE23A9C62EA6
A323C0FB989D53EB4A5AC25A0858B10DC043CC9D5E8CE27B8C4B6E8B4F056867
F1C0B014E2B65B5C3158BF4870481D8FA433728039209E7FDD13ADBB921F3715
DC8998AC0E556F16DB74C13D05E062FF9089F981D89FFDEA459395AEB1FD2A23
13C4619C3924D516D06D7C952B12E6646662A651EE4185C5725607F457AE1E83
C41C6AB175C3200BE7F1396F9CAF46C80BB7C866CD45B80656513B6871E5258B
4F80702ADB01E522A4FFE4E1A156DDF0127E2C87A8AD82DEE1B8090D5B0E4BA8
59C4668A7EAC8CFEDABB124F8CBF10A621372FAA078DC8AAB00146550EE703A1
4B531D522B476453DE7C661ED5D3477A95C24980073E63DD9C90CA8D00E81400
9234E2A36EFBD854F868BC9301D33D0762434E5810C493EEEC7F9BE98C8E56CF
86C591B705CAF70989799D9D24281EC83E6536996D29B4A70F4A479D38E0ECB7
3664581BA1552F680511B5FE3EAF7C61513691DC7010505C0F1C9BDDF1747CA2
F97096DFB28E72BEF671339F900E204FDA3CA9C2B6D2FEC695D860792433C3DF
19EE7B5C27E7BE0538ACEEDA4C755FCA8F3572C613CCC6B7436CB4445C100492
702A703EE13DCF5C2E244DC85556F666C7ED81894089B685DC8E9A731E079875
29DF23EC188A2FA2C09C41BFF8C7A113D5B796A6A62D6E8252305668494B4A74
57EB664B2262988EB310E93581AD3EA8F003B9EAFB7975741FB1F4063CEC6275
C76DE288DBA107D65FCF751C774B9B08CD2D57BA598B113BBA881782845B8A24
DD727267116D0B6F94B31AE4EDE823814D4AE8CE5BF99135ADD9A0941F443567
EF0BAAFA416C0AD7D6AB86E633726485816287751B41F348377A602A2D5CEE4A
409E83188D1E6C395BBD0F42D0CBEE87AE6D68A4C0336BE904ECD3104D0DB5CE
C19492B8498D81D982800318D338D884EA3AA8F36F17AEA7B3CF3B80E235C0C7
0C895EDF6B06A5AE0FD8755324C32808C36F09348083188D680E4353F95693A5
DC3207DBCBD73B067552BD50DC53426AB829EF0CD6495A7D1F18FC4E184AB013
8C55F58EE0B0785835070A9D8B87FD17440C828B6DDBFD43EE0DFC4330C584BF
E5F7EA7494DFCB3128BB928CB1E671C3DC1FD13D5DE9B840FDD96372799EBF4C
9FC600A9440DFAF270C91679C516D2062B949A8D91BD5C8C1CE1444B6DF528FC
A00A4CE5BB7C3E53EB9E4F129371A5BEE78D169C5D1ABA0AB0CA7F8BE2959008
DEAB3A14B39265582E5E691018CFF8D23E9C082986275483553D8A07FE60B2E8
5D5ADA1125B5E9F17B4E039CFB556F43AEDEA439FBF139A16A55342A9120AB86
377A8D401B8BD6149067CBABDE9701D657DEFB58CC51647721D4F7F3FB37F364
72F6B02B8A839E5FE1609C8111412825F41ECFCE0BCA12B0D2FDBE67B673EFFD
F8F0815D7853C6F61278341A10182862D9073240736B4F1BCE96F57A97F83184
2958E6B6567EA69EF3D840B66E2A469C54C116DCF63631E2C3E0E935E77FC076
20C1DC238085DC4E78C139FF3A8FB5FE13BDE7A2897E69408B6925AC50729A53
90AD5502B72A75EB16BCD26BD752DE5BB21DC9C7FCBF815D3166F934AED1BCC9
07868E8C5D194C8D15683EABBBC00E4F8B1F6004F89B3DE9F6FF6ED7CBE0420D
E457EE415AF56C9ED991D70B5EAAC7A6B9ABC63E49E8FA141C5A0DD35B53B2D6
935CD13B97A8784E032A84F6CF55635026597F80FF4A2967E8D917E62C98DFB0
4ECE73F5E1E9809CE9BEF643C2568A3365B3C1540A2FA248F82B9B5DAB612451
7827491FBBF0363061CA3D670328E5CF1112FFF253065E2EF911A5F51C801F28
FD33778F803BA06826F2D74C286E34F733D2AFAB8475D03A38D11BF9A3E8B0E5
080A1994B7689E5EC50F562F21563212B299C296401C85FCEFCB9B92D2B264B5
FAD42B86273D30CE80C424CB288CBB7155E850C1441D45D2F5BD0ED0868159FD
FB3820D02F460E2C2A3A8ADB5170FC710F29B4CF6AB780A4E2A1732B3620B99C
0EF79AAA866A8A7C28275E5901FE36E3E00527E6E90BDE98DA5E4D2BC78ED4EB
A41C83C1D5DA810F835D7C1D09FC3085B4B3468B6FCE2EFBA1C6F5C0EF18ED5A
E7BA60B9974A0A2C7449C76238BAD444D12BB28A533C51765E9FD912FEC68596
FDC4B7A9919594E7687D91EB5B8F0E20A4FD5984624C21F595F9DDF1D8BE745B
CA2104F0A28816B184277891B9231F2832FB3D71007387C697011834635F8609
5CF4ACDCC4C038511EBE5F047EE68288BF3DE1225D981C287FA9B5D68DEF261C
3CE14538C0AF5D07EEFCACD74368BDA00E9E9FE66E7E93F104E59979F5E38926
18A1D6D53FFFD3B7470B94624512485C1D560032862BC7FC1D40DA65CF0A519F
B5A109CA9D14EB30F6F4C1B85C7C5E074A0442E910EE2D7511DB1D70576C6942
0C33679135012B5ED6C2DCBC742C4B8EA64508AF6897483A26FFE842E222CA48
0F1F22089A38079692312519392BDDADD71BC2C8C582E13D3963EC786A6F81B2
61B532E7C406929E48045A055B9F4ADD89458DF1F326D4F23606C6B8FC607D92
DA9CCB2920FCD23AB28D932EEFF25B5D70F45018920ED59DFDA2268C726F0765
88AA122CC299D7F4C4C26AD9B5252D2C52F35DFA76D8BD28B2DD16C22B540BD2
E3D7C0B86BD25C13CB52DD4DEB99259FD77E1C34DD428D5DA022F1AFD8CCF422
55F33B399C2204BF771CEDC1ECC1EED43910CC0458A4F2E670B4F385D40ABE3C
641A9473F8BEE13C2D0B1B96D7F06197A6F6ACAED25B1D5C3E1F0F2312BDD1F2
E214177FB453C13AB1365B18BF8300E8B9ED082C66600323B2A981F6FA4A71C7
4683F2B041CC569F78BD73D380C572E5087A5556397E485D1BB4DA111FB26250
69E57129652E16BDEAE32DD467200CB15F64E9D8CBBC9C0FDC4E1CF1B461902F
D93DB83283CE63468E0AB1620CF517E98EE8437F47D2A1F30D9C5B31AE17B3A5
F26C726618551ED6F3B85C5DB458FEE7213CC5ECCA686818060AD02A38890882
836514F59717B6B023F30BDA21AB8C8AD7F1F7F6455E4CBD4CEED62960E23C18
9818822E6CD053D8118AAA25FC998752DA9FC032BD7E0F9B25F3B83258577605
2FF4259FCEB7018DCA16DD09DCC0036BC505B1CF781858BB4E0744C0205050C6
257FE1A1C18C8CF9E9596383F7C721A02DAFFB4998A327FBA3E1DBDEC1F3CE9A
5AD6E6F5099188C960BC8C90C1B132B11563CC6F2ACE52FF958AB8B6C7858C06
8ED009D8BE872C4E07B72F3DA93330C41AD12AE1057991478CD587D08576EF5B
4A94B001F198E33152FE0F2EBBB1972248F0E4BB8AE3948A408FAA0CB540634E
91B8167212FB2D1F27F55E67DB8A021F37873BCF91128D0C9D92CE1AC3301B7E
99A4A14404AF24867D952870ED2F6229EBB4FD0CDA78C655E71003C12938ACD3
2E67706E51CB96E8561C64782374B5BB113B860B5E42481E0DDA0D4DEDABCEEF
BB94D35FD6AA23331BD1EA84C63672546AF3EDE43B35792D80CE15A6BEF1CE58
11D491B35F62D185F051EC5EA7FE37F49D7B9A7192A22FEB739B5357DDF12BD0
3B73301F26B4FBF514C6B17D82A1754ECCA835959913E0EBC550382A10C46227
A84A8CD9C85741D8C57CCF85B7887E6A7F6B6E4F61160966AA39301B89F452BA
74CB6839FB6142970DB31BDF8447E79A1FE654020F34D2E4564D557FF2F59C5E
6A27F6FA039E6F56FD8086D05B4D5C88D88BEC3ED1305354BD3090114808910F
452C7FD271C1B9BACA52194DCABDB4284DEFEBE50529E1F15174DF4AE9067EC4
E67725672D654869E9BD12F041CD64AFE61BAC3A46E4A43E85BEA75A6E5503A1
42797E0F0C40C15909BA02E8127B1D6467EEB0F05E7168FA8D21D9BFE25248E9
8431CA0704C78EB4A74B28B43312D6C6E9BDFF298B4800F21C79298A7C0953D5
90A62AD8AF72281D44441E48638F40FC381EC6A177CE7C6A00090A973860FCCD
78EB11E606954B3A361084811A9AE4DF546FBC914A6FF03AAEF6FFFA6479AFBB
1004BA151F9989886227FE9F717ECE7782B2D44AC5A9AB58C71E8323199E67C9
4A7F815D27C329F7C917E165307EBFABA2D2EA1E745274DBE42D9FBD0EDC0B5A
22E5745FE8EF44163827FA82B5191DBBDC866A821311630CFEBDB485899BC411
AAAAB1F210C3C5BBFF963ADCA396EB26D00188D3E81A24DD7E59759658436A9D
3E1B53A604DF7F646E27312EFB770916FBA90A79F2CE0D07E0634D699E6C291E
B0507C9D25D99E47E39A6CA897EF92C1ABC25B8F3D000926B1E11B361B175A18
0E10ED90518D2A7DA048AB78121E81C52370272CCB9F2183036CEE800D650FE2
CD2E74C038665ECA680F6B701A3B92313C397F0A208ECDFCBEE936D0293C0106
36178B24AC8D5E909A21D52234D69B17A2799EF97B8D25866FDE14047075A8E6
1E672A6496DA97D96749677BC8FC7E4DF116E24E0B2C3DACF2BB4D4F11C5FE42
43E40BC2115789C442E6BEFDADB6D2A741F03577E7AA7BB2FE86B93CF5618D13
9605D06B8EF066B8FDFF0A4DF05BF073B456000CA98880C2B18BB20D4818C7DE
AABF9178561B86DC865938284B828F154643059B4A6BFF722B3E0D1366574B10
A0E49E61D575195A086DA3B9B30368BC424AFAAAE39499C6E4B4BB39726EC682
E85BA7C7B988B0CFA983FE0D4363CF0C68AC833BAF4B22B26EFC197D4A893A5A
EDC1970B6CB82BFAB5BB2E73ED0578D79771B9D519C1DF5E04B6BA139A251BCF
348F2A19EDEBB709068CE06695581F76468FB113F2B977937E70B7214069A060
07D9800E1FD9D3E26ECDD55EEA26BE34F14607812AE22E171759B30836388BDC
7AECC01062AB86D4EF61EA4CAB239F8720A21BE20597B63023FABFE4B71A7BE9
CC5266299A44D944B30D7A3FDC11F99AAFC2907180C659E171B0BC0FCE44074C
3B78058725777666DE7703EAC3383DC10425D898C3588D856421AD456105F4F4
FF47779A5523F607B504C36691ED7A4752A86233A5FB3FF39EE53D6C1C000C20
4B0D7C712C1367086F0E83C9A242C22593968C354B896469D83A6A168B34B0F1
FF61A2D99F8C01DF735F1CA81C502AB62EDFB6C4B0552007ED672902C0442898
574C4CDA994DBAF9958F47B3E92589CBDD08CD8ED1C61E57E6DF36D3705E771E
93F9232FEB35A8AC6CC6CD8111F42B94A43FCB541391F4952C8CC7CD303237D2
A07F3721E9AFEF36B98DB6D4EF3853B42822FAC82C374E0DAD5DA428E8809D05
D77501E1CB6CF921713E79CF048CCE28B9DB6DEAC8754AE29EAE5AC87616C0C2
6855C526CD4352A1D9E2A844124B95A92E0FD95856B048341A087F777267485C
257691281454DE56C2502181CC2E11C35644AA4A2FA8B09B5C3E973F69E89130
A188B5AE8CEBC1461957D73AD7E5F82919ABC53FB6ED78F15747138B2912B168
60D0BAABB4316DA38BDEC13C45F41D2EFEC1C8DA6FBE07E0ED2CBFC2BE61AB03
C2E158F0671CC1A3A27F8B6BBA42ED5DCA8F1C5B350676B2C4890EF4B3B29354
C0EA28694A18497458CD969A7D3CB2390AAEAD3C15E072DE0A84250A8025970F
7C91F092B209AE35C91CA49AE879DDEB699251E49B0F792235480A76AEEE7039
87F37CE218FC01923512759C1D2CAD099DD60AA7BFA31435DD57C23D90AB3900
4C577C24C163E19DF472702AFA06C37979DD1CD4A2B2CC47533B81BBA00EDC53
42656C12DD5357196F82BFAAA5FC3B713F6E52CA2B133BCD867CF27A8222D894
0066B00D6B5746DDE2AE0B93A7E9396CCCB91ACBBD98C11B4C34BD9F2A837D13
93E54FDEB6B1D267007B178DAB23BAC475BA70CDB2554C1025CC0A112E0565D1
E1920094A0509510A0DBD662C2C2DB3CEFA59153C4D7C426F0D3BF38E4E476DA
4B7C3E27B1FA06455E229C987A128F53C951E0B6FC5784C066FA218CE7AF4395
6360D95D5DAC9009FAF1D1CAEDF7D8727E5EACA0D28D6A0F247C07FC508D8349
1CE04DFA2810C0F84CE7C6842F37CFD0C4C526F0EB6929BF56986EEDBB168883
9B0C980422DA618CBFC03A7AA614FAD29F6FCAE66069D56F6579693CB65053BF
56062972DE5B5534E56A492EF0633D73C071CEA58830A18AE1C56554EB37396A
EFB764BFC86DFE3CE4A2AD2F1014CD74242AB28F9A56A4886DDF3A2EF39DE412
F292588D074C0ADFDED76033FCDECEBC47C3061DF4C70CEB5C3F6251F58BB034
EF56945C846896C782331AE75E78968646E00976BBFF9B9C97BD38382FAE8F93
AF77D94989AA693B55069B933BC3CAF0FDFF080176C321F77478E1EA7C8D88CB
5D3B0B02CDD229749F777687ED8E8879C26149F64F2406704DB1114F0DC10D39
E071788CD2ED005612D010DD5215A3E49C298C9D8BE918437C0AFC7665016DA0
D967FA134E6CBEF2EAFCA2AA8278E793C1A3ECD47AB26795567C5BCE090D90C2
9776BF27FADED563AF292C8F30EC9F67B3942225BD45F6FE01CB6C10015841B6
6CD6BF4C7594628F1B02C9134BA366936CDFD7FCD6257906262C8B1A05E4EC76
FE3383700A594ADE0E9D59FF37C4F4E6E49D533BAF37BF555A0E2E8EA5610ED0
DE91985A236F4EF626C2A05133861783867EAA0867AD50B7ACCDDA8AF99A506C
01077017D8F2FF9F6F88AD245098A9CFAE5B44CA0B0353B600DE2A8E1DB7A520
128B320F2E0F120014C7F5A7DED36BBEEA1CF22AAC9ED430593B28EAA745D46E
D8A464B57E4332F3DC5D5E4706C542AAAF276BD5E289E15B2F8A180D8DECFA4D
3A5899EBC0B99FE53DDE4100E7BAECD4A9FBA8B9100A31AD1DF7CE7CEDF45D8D
7165ECD5278ACEC4A55F1A082D537B3C1EE890A6FD2ECE067A758AFF9BFCB036
5F00265844F31B07E1408F244F260775325331FA1EB4009CFF19FB5E44A47072
D269633B0C9765F9059895E4915405709607F4B3FEDC85A3A1054C03B562DFEE
4836C38AB1F2B58D683AEB91505FAC7F168B8B045489489D680E10D295F544E3
FCF67EA5E0B442ABD55602A2234943DC1C617EF756440F870DA4B1200B114BAB
C2D268C833BEB10F205B7C98854899BDB7EA831D1EFC1616B16091EDAC559A22
0F29084DD86CDFDE6D35CDB53BA93A15B889E023A11B6C2A35FAC32CEF6D5F3B
A3C7DD774A20164C48032204CEF2949742FA5C466760C3DF99FD8A37EFDA8A3C
CF56AD9EE9F5DC02440B5C36F5261558B2DB9CC40A1B28CF2F0146C91742FA1B
6D228CB9EABED14DE2329CCBDE222B4C31FFEC8DF0FA7B9CB5032F44D11D72BA
01798903DFFA60F6AC177F2208AE2EA28F6657C76F77B64D605695615950B45A
6157AA9E2A091C9B89611F1678E6FA2F0747FA565252323C20050258CB8B3F35
F8ECC07BBB7E68F4BCB0B429D739FFF904C17DC217C7A9CA604CF8401B289C1A
FE77829CFC8DE7AEA770C4DDD15EE038371C57926BAD7877E98A79FCCEAC8713
56DAF0CB205917DFD1A8F1216EB433A13B5572C513E842F42BFBD3511F4ADEB1
E990D07CD3270C36578304F71C1FA2FDDE88E39346DF44036D0E149221FD61F3
46CAD55B0BEF461C749ACD6B2E995F93075A4B42E6D53AE3D03F5C9672AAE928
778827329D98932A82C0ACCEC903E9ABCB6ADFA4EB07AC36443DC19A5A37D486
4ECFE0D6959D5114EAAF1612C970CAA2C9472AC83C0A68C1C2482A0BCDFFD961
3AC0C46F3D057FB5F2F5ED2EF03F94DC211CB2CB94A27524A4C2516A816239BA
53B45EE08928CB8BF491119048F4C4CD320B25BC0A862A41A3701DE89F53C20F
1D823F2EF64DB77DDFB68AD43C82F32AE0088A4A1D2AD1C11F7606C5484FB0E9
D44B8A61EADF9300AE63A15A7D983219EB991B300213F18EFEF9B77F9884F052
D1DB422D245201FBD6463F31D0EA76A5D7DEF679902FF59E3B86054DF5B3FDF8
38565D5B4A84FDBB1CE21A3E9C1D1AB28BB1CAC11A656F2135EDC1DA2B2665BE
8BB2E92544EA213832624F5546610E9F323CD7F2550EB814A9E82623DBED8135
D5D787E49A2887FAC7A3D8CAB54D79BB7FF1573C2FB94057C50396B3D4677A6D
2AED73403C90884F55AF936438B21FFA3D75F725FF498C30ADAE8FB6E33CA153
EB711DC6E79AE9E9F0A879549CA69DF4EE05AA2A5F075D57D8FF04B7031BBF74
C3D3095B2DB5108BEC9C46CB95FEF4DF46EA2FEB500C2C5AF1427197EE6637F5
39123745CA8D4EC14DF2E82AF19552D766E652B80E10105FEC8DBF272E6088FA
8F5B9A516ACA5FB0217CEF8518BFCBA0E1F87EB43000C9F67679D26D08019521
E472CCDAE5AE38402B7CB8147327DD8305DE0344DF203DA7C282144D38D1C30F
C685BCF9798C2553547AEBE17B1F48E22B013F335377D8B10856C476FBFA10D1
1E87A61DFE3103AF0DAF90442F3AEFBDB0DEA139D539F1465D50C5D1DF71C76F
2D91189E9D5FB2A75DD37A909F53C828A653E838F10070A5377508BAD0A7CFEA
A913B935BA91F1682C8957F08C4C30EE867238D61D75F0437499D49B3C1846FF
96CA8E0A1A6BD5BF1F8E62D380C7849CDF06492BEC78C971F5792AB399B96A65
77209E606453DD6A5CBCFD4C333FDBC095990ABF2E14210890DEA4EC2B1364DC
3AAFE9AFB3A7627071F647D5D73708274E5718EF450F84B5A7C21840AD5E3251
97F08B2ED6DAF07474FCDF67A10B68E3DF9713E737FEF91B42E09200D95D57CD
747F029DE975FF1978CDDF9BFF0F7D37498A6E2F8AC2E4CE7FF33F692B91C940
491A4DCF54441D2E2DA8A22736938DC5D29C79E87195C91A40C2E2CA5DD42B63
71B3E9935B614A538920A98C56F7D2CAF2FB1D9F4070024656B5B31EB70F31F4
72166B18FF30E1425EE578CF04305B4C1360B02B1915CF48CD487607D1822E24
4D50E20765CCC959A59D93608E66A61B5B69129D74C011E179E1204A1F51C1EC
C09DBDF48B857AB913AB9CE36C5BD7B00C2F96C1AB2C7AFBFD69EB36665C7E12
F29EC4BB72AB170BB5CFFCE72F32F4443E985EA02D5E2266FC409B239BDF8688
A69754ACA70F3D7C5D777D6B1B4021598EAF8CB984B1784C6366C4A1EB39A3BA
77F9EBBBB25B499B75170FD638796BAB9535BCEFAB8B91B5C01229AF428F3F75
B7A2ABE2DFA43901DDCB408DEC0D682FD0E62CDA7F4B100C6893A74E36260F2E
92C7807C741302448989683AA301FACD379DDE7637DD0DC6981F3B8A7AAE82B7
97F1203FAD7D6E7B33C3F8E7097EFB6F1A40EA57044322C232B557A2CAC6BDB0
D1D481F6C795739CF53F4609A0C3031CBCD108815067BFB7642593932C9E0DCB
76680FCA2E48F732ACEF5D27A353CA51B9C692CB5CCF45C8B38CD384F37EF087
7320115CCC39DB7D3A8132670FC6F3423FDDA1A60A89EDFA59114EDF2B611497
1B191636744AE3A51B625CE37D8AC7115190CB24C6C0D49BA6630E7487EC497E
817E23CEF2A923C8DF147D5AD2E86744AF312443BE4736F2B650DABB0E06F465
0378F0FB1E70FAEC4A0A024C5FFE6777D6E374B40FC2ADE40888C5DC808B6229
E0780071A93BC36DFBE6029F878FC59A654615785BC62B369D2455765BFFD823
9D0EB37A83045EA686214CC309F7F2B693302EB8A34D972A13ABA38387B2D6B7
15B54EDFC533F5B87A0D016B3A67CAC1CE1953C9CF7337161CC382CAC59FE778
2CE421AFEF19004F3B4CB98AB0909B388054E57BAE66CE447123DF5C4349561C
BC7B15E9572DE91ABF81C8AC2B28B098DB90E754F6CB19C6F6A2103EE4742916
BEAE0D21F24A3E4D146DEBD198727ECAE1C7CAA0CD72D2269D74A4ABCBDDE3DD
98EAB24D35AA360E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF29633BF2692
41C0DA67E5BEC040A958B14BB3D7821512A664758B40E87EFB947F6EF31DCC61
CDDFC39A2771827DA897453C309B2164090EDB62EF3DB681E7ECBAC9BB218F40
3FEF6D0969CAAF54CD5F89FD89D153C58F0D60B07CF68FD0DA482FE338FF7162
B38E70ED0FA6771E3F843B8307F90041D351B844947C40B5D8C75ADA3F1A59C8
3DD82C3A35416BE740A5410D67AFE52FC469CC030962F8C4844A59841C7C7682
105E23A374BCA91885E743EB2112B04580233972D92119549CBE53B0896667EC
79D6A2CDE659C1E6CDCFCB3FD9ABF5D7BEBEA6BEA39EE90D687307318ECE8077
7A5FA529030B795AA0CE8D74EF1AB4F340C8A71E60B4CEB9383ED0A8391D817B
F93005BD72CEE01DC08FFBA8919951279F1ADF950EE828851D229848E34D0C2E
929AEF3C8034A681E5C185DB2E60922FE90FE15878D53394C0C7D5771B0E9E68
59B0E657936EF4F7CEFC601FEA3FC202C8478B0E1C44B0D90C20D8796BEBAFE3
7E2507EDD79BF25BEBB3EDD0629AD26533B65ACE0E766EED20DC204F663F61F5
4B46D1DE5D40226A559A4424E22D21F7DAB4E15611E80046700B475E00D418DE
FFF46B6697F6664AC6B6C1F5E5B5D911DE2D6085FD45B6B722FAA706F7F2104E
98876C7E44ABC9F2A6F66D76500DC159815C02D5473ED6AC9B1E97A66B2E9B93
7B85A69977BA8352BB68ECC89AA5A627FE21EA8A6CD551D9E056411524F1AC2C
3EBDEB4EDEB32E539CD690B41B639E21B547FCF698B77B190C0A30588E9E03FA
D6D901DCA2B6BAC956EB8CD2CCF0E29FA535A6C346A08DBE65B1C054C0587AFB
35100BC265759544BB71AD967C4B8437470E4D020FC6E86772530CC4A6A61A86
31F03986FC4237D845723C5BEE9525ECEC4A06140427CC6BDE166ACEEC8C9F63
BF23EB2C4187D5C7E429F423F250EB9E8AEB5BA66E6FBB5338F24FE3CC21ED5D
5C4A91CCC4E24C50984C346A441E0D4C268DD412EDF114A340951A0130FA36CB
472AB1E6FB87210319E9604E3D7B784BE985DC577101E8C0B884FF5107FB089E
9A8FC9282C13741A755DC615794571972FD93DBAAC71593ABE06FC429FE06F91
22E7F8EC158A3A9D45C3A6C7C092EA151A6F3762571629775247A6AC65DEFBCC
8C8F929599A0F81B43C52F5C88CA3242F20984B44BB38CE448008CDAE661378C
0DA010776A25E1619AB8551F83E213D0E82FC861C0D9ED98E873821095C6BE6C
A90B13FD7A8B2F7B9B62EE1105F37A99A308E7DA80A3018C5987FE3568F5F91E
E275365769916EF1BF70C062A454E7F3DE9470FFA0D0FB9916ADD4348282DEFE
DAB18C6AE08A98BB4A05545B974F452CB2DAF69AD84AC8E0F70D706185058193
9745F9D5EEEC8896BD3E465AA29E75AF8843DD8E00C8781645BD3696C4B6A1F1
F83F5E5F4EDCE5F5A4AB5C77B5FFC96866641D00B0AB0281C7CD4FBD940F4BC9
81ADF1AA24A40520A6C06816598772E12C1B1F993EC236A4D9E44AE3E5B44B2A
E9041C1553FBBD52E1B8BBEBD4A514626C26F052A95D65D942ED54E36A6DD865
4948B183DC8CE6BA6EEF1516C01D8ACF2FFF3BCED48DEDDA84A6665F8C59C1A2
F11A4F507FADCC056E26B09FCFF22A1E4783A39031556912935ADA792B9AFCC1
2AAE35ED74B5E419A575248DE3700953D590A62AD8AF0F977CD9FC6A5B91EA84
4AA4751C8E333AB95902DEF39C6837F41DC5AE4E7E779A5446B28B61224EBF24
FF7D787580D9DFF8078E771D7F1AC74744F93ADF8FE08B4C8BDE976D18C8F669
EFA8C10397A927AEFF1F1FA4FF431058CC7C5468B27A13C1B6DF62998E6BD54F
3CD5A91EF2EF703BCEE9E7745FA4477F47A25EFDB18D279D752527A0A701EBA7
32630023DDC85741D8C57CCF85B7887E6A7F6B6E4F61160966A858FF7FA0B900
0EE484675DDA6A1FE2DDD6A566C548B74B85C949CB111CF2B8138EAB21356A5A
D24A193B41953821E38D7FD89196033C0C67C9FCBD70A3B06ABE5A814BFCEE5F
20C2557425963BA635204E89F80CAB3A5536FF3BBAACA5F6565B966BF65083A9
120FC2606A9025D1793900553818527039AC74088A194CB25BA1A334F4E7ECC7
4A17D968CF0EE334272D0C07FAB282082DED26D335178E6B50D46337619F86AF
1FB6373D0CEE6B46717BF783A28AD2EF0242021D85C50EF4F0FA7E8DDAA7E09A
58461AFB91DC4E6728A1CA7BA4ACB868F9CC431C92BB660202AF3247216D8F96
EBD8D1EC18D48FEB29E968BBB5CF13A0A5F41929D75D3B1E711CE3A8AB8445DC
7B170FBBFEAE07A0CDFC782280B8436B909CB12D82ADEEF0FCE52F001742B779
171454EE86CBBA0E84F9060C62A34AA48352CD22E77594549E5810ED4B2A0141
9CC24500247F1FA63FE456F6ECE4D25E13A1FE5E1284DF66C11BFECB30667152
6361ED2C379A528BA81DFF14211B6E5AB37B93BB4DA538B31952E14D6E5B4077
B438642E42FD8A06C96396686444F42CCF062A9508DB8C7B18CCCAA74EF45787
758D1EC8FEA77EA7A810F4851008FE54E6802A98C64B5221A4CB065B2CE1ECB8
41AA4263EC9EC6DBFCFFF5F1B4DE109C3E06915E3461C79E71BD7FE5E52689B7
69AF5703F015A210D9182678AF5F984DEA5396198A9C908A72B8B06E2C699D6A
B75FFE0D0263598C96F6B80D6C152A214B85D77EA7DD6CE114837E29501C77C8
15FE83125F1EE19256CC5053025616EEEF28F24F95FB49C543211B9B6F9110AD
2795D667D3E495794B2EE286EBFB79C3272383D7526CEE1C178B1C6988F963BB
0D77A7E6B897C9761127F2236D6993269EDC2D5F82436DBD012533692C35ECEC
6D8523FC5708FBAD793E9D328A9D99C4D070AAE46948ED4831B915B8E21F6407
45A0AB64592204F881BFD29B6D9288B1F2C2AA5F487DF644CC765A8FE18A8C09
73844C950B9BDA89959372A2D1D83ADA6B92B59718AA5429ED39CDE4F9CD1F92
837B1EDAC16ADB12240463B37B84ADF9713EAB43C23369EF2AEF192594A5A344
F9EDCDECD6B5F6907657BCB470A3042A3657B397406B7A6D96510D772EB2BED7
26D5F12B4487AF44990FF088A386CB77A060B529FF519061D19D1AFE2AC77418
5F799840538DFC9B186642C1FA978B5AE27333356777BBF5FB0B0FAD16EE841C
75D94786463832323BD29A10E1EB79AEC531B4E058314D4A47F2CD64A2F09D9E
75441AFB91DC4E6728A1CA7BA4ACB868F9CC431C92BC1045A669A86933F8B05B
9236B04C3C0C757CA37AFCBA3257B8ECD536AF7A652BCF0541218D571C3EB1A0
50373090C47C7C4C9C8FA62A078F4F1683F37E5F7B8FBF27B0E9705C3F01CDDF
ED987C8BA8B72D68CA6B490E990AE4079D0A3FA3E8BA66A32F7839E4410B4855
7459EB0F31F798DCED579E0B7970CA869CE5F98AFEBC1391A919B7978B03EF06
8D17E4EB159CCC21A57879D8E1AA7A5C001B593FF7E557D1098CEEAC50EAB6A0
858F98FA558A760A1B4993AD4B09E331D14A662DA0E2251998CD0CF83000D361
FE8C805163A6957DE6AA4AF7FA6963E77AC9A24E68E74FCA43C0A00C038BB32C
43288B1149ED20948536BB63BF85BFE4DCF0C8E75BA8EA33617F1E8ACCB203D1
1133AEEA0BD95D56C03E7072927F790E4981671BAE47903447D39845856FEAC2
F1A3D0030AAE2FE329B33632FFD49A2812BAA355BE429858E0C6AAC60817D682
981F89EC703E604FBCF880215B4D1ED011A770D4A17323DAD22B4C4246881AAC
BF670F578A33286512B4C60DB6AC9057A332BBC01217DD585C9FAD7B6C7AE904
0DFB66004C5CF811080BF6B3F9E7688E31593A54ACF96E590578A33CEBD6D9D9
737432C982165ED82C45D26F55C44058F049C399BB8E5B26813C6054B0EFD355
444F1EFF5494019B5DCE5BD7A774F8DAFD20F05C37F2EB54F2D398E76345800D
D13C04021FC924C88B19890571C60821F94E277D65733295C5061ABC597FCF12
002F30135A05B929FD6D23858BADCC0E79E4EEED2A7788F44FE217007CCA39AD
0ECF36C30F76ADEB12ED4A41BADF2F9A511212B7B66198ED9793D2F90CD7D79F
27B15F50FD125C5D7C7F4526871B2C50F5B279CAF980DDCB7B8A63E3BF729E33
BA09476C504EF844C1ACFD30E3C6ABDAABB083F365AD99C1D29804D2F3134C98
17F45FD2EFEBB92545F55A34928FAAB6BE26151101B7807B2F2EE631BD20B061
64AAC83F76ECD2882B91FCF7E694BBEA02488CBF10A009283BB567375F82C2B2
0D6D893060B9CB06F8F917B354E62A680B12E95FC462DCC54C44587EC2975697
31F0B0C59DE648DB1736797BDF15C2A600ED17943DD010B6668CFDD02424F0BB
509687B0C6958967CF82C547CE18BEFFDF53C16F183E9E658A4368AEC49715FE
BDC8CF59274175416262747ACFFD9C16129FB088DDCB10080AEA9DA05DD63DAB
617CA8B941DA69A928EBE46A46B2BF91C107A789CBE20DEC1DA560FCE287B86E
393C824960DAE0DB01F1DAB166058080D42F90499B415AD8AAFD99AD3FEE89F4
97760138814249051AAADBDEE4C99F4FF668FAA1EE6FFE884CFA489035E2D061
E086D27B4111C98CC29E96CA4FABA813FDA935FA86C092E2DF9B35F469ADB943
75154A8A07D01FED1C412FA9813664082503DA28203DDF121F8F41E58435168E
C78444117FE734A95976352BC110955C6FEDAE7B54D6D13B903D2FE2D30282A1
E7B45B81368A8E087D65343CA790BAF08FF13A5A6B687F72EC9892A63B15B4AD
C1953305807B04D4C1CFD288DE312686761A7C070EA75140331D7A0DD5731F0E
395F50C3DFFF8BCFDF1D312FC0FC0162F47FB4D8D9034DC427983B37CE3EF01C
D10EBE0429935F498EC1D6DE2E51616D454576C2CC711EE6C2737F3CF7CBDCBC
1491ACF9B88B17A29A339F99A0BE9FC33A702D808AAB91FD4908BDFA0515793A
51CC50822E4C68A807C1A3FBC4EB639B4ADDE1179C390BC240DA061C9D539B20
F4FCFB72DD0B6CC1BAD5F27D6E47F4FB9602AD6E1158543D00A6C823A3DA36AD
1087A1504A5BB67CB2C5BC34973C66955EF15AD70B215C01EA61946012C986D1
7A147289DD4C38A3B2E7E5B6A63B0039BE04F56586456A82408AC41444355DF4
8F98DA8885B49EEB34067BFD6D4B1CD777C88DFCA7EC67EC0E5B42D56879A4D4
FA6C5D16F01DE2034212F040ACCA2D429A3F91352AE88ACF1CF225B164F92ECB
85EEB95B1A738E62B64B42242C18F5BCEF3BBC0BBCDFFA0A87351BEFEAE26D64
1D49B7A3490F09BF16B8D179F983B4D503F271A9E25CDBDE8F162EFFD0DC6962
821120D6130BEEB425D3760296EE13DF23B383E39712D0277F0EFEE14336FC9D
A7B204022166F1C1DC489D5F234732EF90FBFE5BB42A7150737F7B9FAF7E0D5C
9B7C3D6931366AEE430D9DA4B82969DEBAC38EB82CF68A50A7578C62A8B873A7
339DEE670AD4769B9E763F69F5F53EC4CBF3EB2C994C0DB80E2A3617825070AA
ADF3FC71121DFF10683829AD9700B3205A433016971AF248EB25722FA3798B40
18CA0C7AF81DAF1E403F552653EC2A9E0909000A56507544F5B8FEEF1DC4FE43
3D4881F0977C9EACA853D35415BF8CDC08CAAB216004EF466C70EA68992AE7EF
C516CF6FFD07E726AC794C0AD4C64DA15F0FE86A913DC694DA7DCA8F8DACF03C
B8AAF73775122C66EC7E05812E57D5B88BB9D233B5E47EEF26714A4CC8923A93
9C07E0FBA6D2813AFFFB6256C6A72975F6E5AB21231D50F539E3774A65EB9D47
82B0B8251CFDF3D178017820F9BB3774D44B5FF7010C93C6FFB55D0FA449D50F
D597911E55A83B0B422A7C066A6992A50A7F4E244DE44F1EA72B9EC1823F4235
94C118A712A969CE49D328BA0C1D2174FF790933ECF029B26AE04CDE0D28488D
EAC62730E0F36C603FA96532FA00F88FCC7A95AB5E44EB877C6C369F8A4ECC0D
E847ABED596854D54DC3CF3DE605BCDB2CDA1DDC8378B733B62ABF805C2127CB
041F52C6FCFCC88C2EF579A535CE2816498D130303EAC1F4215147038B11AA37
9A62EDFB1378A82FA82511BF1887387A293593E586412ABE0FE0C8BA6B1417DD
A84325C4BD172D1BAD82F4647D674AEEC41A3E496FDEC2C0A1F90C1F4FF12978
26FEF8370A38E142AAD5349BC4773E95182C70A6E6BB14D0E86241AB753C3221
4F6A8B3B924B6F0B443F234768B7FF086FC52C07FAA5BB36405724BE29C2C161
E87431D622120D6EA45038626FBA51B8409CA6FA9B2A1B5C82AC13268CA45E35
3D5F4E3378154FD0C9971F45C0B950A961EE6CA0528232C3E420EC417AA69D74
A63A139CEAFAF073372C318E145D6DC515C88CCA341494A4D367D68214B348BA
51DF871A83CECEDDA1F3DA634E30EC01E9AC5C2ED25F6290723DEDDAE294DA2D
AC323AF8B6FF0B0D28B049F33DA50B0FDF4FA8F2153C368918E9852E6DD59F4C
B5511FBA10D2D792D2FC8C2F49EE8494D7583A0288C1874BE8C0FDA1EE929D0E
702360464B8C3411B12176D834E8F86093A5F70B7ADBB35E0F1641F668817E64
481B4479C73E12F5A47F843A6972A781290D136A9B5D69A31D428F4289911252
5061EDF9DB348304CE2D53493AEFE8B0CA716CE53182DD8B9A3222D4F4BB9C42
87EC21452229867C90D03379CBB77C99C5099E69C8798D2CDD59871A304A65AE
CF5D118DE26D1A1F383A2E3003317B192D35E89473CB78DDFE423A00CED68405
A82F15039F0A99E6FC2793EEAC2AEB8E64D3EA95FA22EB08C999AFEDE6F666CD
97BB300605B9B8E5F686536D2C586421D462D8286E25AAC85EF8352A3B2C0C32
49870E1F82642B687E0179050DE55489FF45E41F46751953C4725CDC99096AC0
CE90DE4309F4FEF9ED2417593C51061309D2F9A4742DCB0A0346EF8F61627487
113ED4682C5B84F61C5C8986923814AE5734897477BA5BFECD08F2E9B0678F1C
75B4349A6318568D68DF1CCA64E069D10DE577C4E43F0E4BBC05C12D7598A699
CAAE9C9F8FFB86FF1286CFA04302F7BD66245FC44BB3E7F2D15EED62CC470C7D
04CA7F4386D6B228BC4FE38AF37D16325FB9929DEE8C2848745C4BAB4651F872
99638173A4543C6DA77111E903F1534FB37B7A7750B52C9CF390791BF3F65C10
31B1549089FC76A39728A424073F982C9EC093D7F96770C73499AC0AFC393BBB
D87551CE86D4E2DB7607F065FACA01BF64480CC3C1584F2EEB8C2FD43F2C5566
8185AA03631141554C3ECAFAD4AA59D7B64AD40E0E8B0D19951515A6EF4DF74C
FB33CE595AC3132C7BF0E66DA9ED6D5D72499519BB122D25600C577CDF514D89
222B39F7D09A121118428CE265CAC392E98C29986B14D002EBFFC08628185D92
C9EB8E309F3331285EB0855B7469989DBD397E1A500DB4115EE8FC185D96FB5B
AFD9B0819AB0E0CE1270A2FC838D9AF4243A03528359F9CA0BC7FD7E77265441
DBB89C9C6F247DF24CCB36C662C7BB5E8F7DA664D1CEC437E1719FBBF313312D
E7DEF9F458994898AAFD267FC4B53A97F1D223639DC739ACEAB464EF74A77F19
581D79F419698A0F0684F5EFCA127055FB69CEB9AE3082F13883F9D1E0A133B1
0F327FA3BE68C541EE8DA5E0A6923FF60DEE6A31EFA43C454B12960451CEEB88
2BC04DAD2CAB99574AB3EBCBDBEFB7B277D73B3383ABDD138A2812AC5E2D17FA
AC41229306EA37B9DF6E8DEB1C6C2BDEC9E6EAD997CE3BFF918FC60843D1751D
D0FB67FF10DD87E3187A95D3208F7304AFDDF88F35E1F428DBE74E704276634A
229DCC4489F682CAE39E3FE7543C5392CDD26DBB0B3865D2191B8839074F73F9
FD6188C4727BD199CDC8B4D4960DB8F38A83E4045F3CC8D78FA910FA0E9F2D6F
8DD21CD148D0F6B533408F3D7332E7ECB95D1D16340FF238E9DC962D8B2E16CD
2FA6701013594A3E6329448592CFEC50C87DDD905127E98F22ABFA82850CA074
2F2F7E59F8F9A105B9023FD57756ED29DEE37FBBF2E063B92610DD3FC03D2CDD
752B8311B3DA9A58D87B504E0EFFD9B985AC6B7B888559DA938D10E1009B1B33
0479BCB3091083BCD0C18B8508A6205B2C288DBB0E07B1767F7E197EBD04C35C
105BE65F39A50016FC53276DED96A278902A2C3687F5FC9BD3C66C7C92081B87
37F0A7B77078ED9F3C3AFBE218A78902CF3CE5851B41BDF55746E662C963CE83
819BDCF51575E5523F3D2AFF38693C2B86E93B41E58B2A7BBEF05ADD8096679E
7E673E448C2B64C0D7063F30CAEE917F0AF9AA32B6AB21FF4CEFAF9EB1D0CC7D
A0E98AC508DEC67BED70EBD6ADE595BE97B9FB7F47C813999C3C595AFC86CD0B
7BE65DAEDB32CA0165F244704AE2B065259EE821CAAD682B251DF566D401D202
48F857B32920AD49354FA7A748A71FC9BAE1CC9FBBD7756CFD54770E2A8D81BD
4618D916A30EC70C8013FC7012142611205589FA4C2263FAF831B150E963C94E
B8D5F3CA635184ADA4CCB77AAD095647EB850421B6845E5329215414AC13FA5B
BBAD1644C28821E5B1EFC966B114853CA1BF1C54B28F3591C1B05ACF3D46952F
83ED6BA7DEDD798652E630C7BC349B1C750B3E0DD9982410E686C92C60EA3290
75C30D3F97A3214A47893361D4B72DD12E7C5F905227DA1EB2DBBD6BF3D59AC3
708DDDE0157C0D65DC9F5F281E53AC472F4519B5991EDEC8C50DB36593756115
A92C42267082F00F3BA2031F37BF15FA9B2CD792235C20F9E592662B47629156
795D93A4704E910772CBE32656C7F7DF91E1054CFA354BBE6CF595DE4DC4181D
85CE63468E0AB1620CF517E98EE8437F47D2A1F30945EE0D95C41FA4A5AF7A01
6D3C773E040312AA0240DAE1CA71E803F077572234B5E42D053482045F9AF979
0D85A142BE0A650D81D9F7079793D6FDBFDDDC1EA9AE91793691AEE6B2BE7557
A33DC06C5284A9C8FBCC63BCF9AC014DE680D23B992D7F754479CD3697192976
164198062E8B51C5A80C5C7238AB883E083EA59959A3000F63E51D54D389E887
69691F9CE7ADA0755CD7D55E963FB85B3146F252E9519B643DA39E28622CA954
B3D7CBEC1B72BFF1FDF4B290DB23EF6E280B038948C9E26A68D6B5A758C71B00
A764AFFE6B60CE7E800BB53B7623CAC21A613448652B6106833571B321ACF890
612976BFBD68A4CCB4CA8B9717920CD0082AA584082321C221DBB89611323A0E
7221C00902D4D9B13CA2F70CDD4F96B7B9CFDB7AD22BE2C9375CDE80642BCE84
D2C73C8376BA18203DF237B839F3A3D283728875776801E720575B4FCDBB2842
19F050631E86379F959CBD9EC46414A822A022439DD43265E3EBE2CC878C86D8
63F26168E39F4050B20CD7EC751E46BCB492DEF38E2BC251135EF2058394CFA6
84AE1960057CE9D2C8DB50E2A4B1DBA934A8F76829820EAC63DD3A2278FA154E
86BFAA0D77C4D9F05A4BFEADCDE5CB6E1EE489C27CD0C920871E9F36660AA3F1
F952CD7A7F25D576445C5771F654CF59FB94240B438B67BBD41B89BCE0C1F913
CAB9E67462B1C7C6E71D9931AB179772F4E48E3B9BA8A1038D30AA554ED9ECB8
9DD65DC15931D30A1FD26A32B85153CB379944D3C36A543628FD04ED550971F9
73062A56481F80BDD9D11F23EE0A0761AF2C3A052F52F656C019CA8F2198517C
2900A26B1A9A22AC7A978856614FE7C98962A199E3D2EF8E90414A902BD770D4
BE3AA534126308036CF7950BFDA04E6DA0B63E303C932EDEC2896B4B81EE5571
0FC66FCB65E3182CB065B2BE0034536589B8BD68E809B02354FF0785CF5F88D9
C178153E0CFE77D67F2E71E4B4F1A2AD2F2CBBD1A04CAD375F74F86A864B1F3E
4859826310476781777382D05A089F2CEE01C83F4F65B5891F67307481359D63
9B354E21F5E6446883B3F4BAB54EE46C97533DE11EEE3B9FE2203DC6C75B270A
294926859634E33BAC75DC4AA0C96E6DF7A1DFA8343B82022ADC8E75DD413871
CAAB11C9262D553D7CB132099F406B7A6D96510D772EB2BED726D5F12B4487AF
423A573873D49AB0B965BEC1A8B100500554145125FB0B614BF34FF074D3C279
0A24CAC71A4186F17220066A6C762E8F15FE4F89517D4C07531E5FAE089A21C1
D49A8B4667CBD5B94F20FFB2A908AA1E450C7E20E75C2CC65DE893D0054C3828
00C28AF3CA811218068C3AFCE0E7A8D8BFCAB0DD9BF9D336F25E5799BB341C01
77F10D9732DB2797D9B7C2B7126F601786EC4B09DE2F5F30772937DB59C3F09D
46C1354E5FC1A63D9D5B91BB6B95C298D1EBB1D7E14B89EC68F4328916B0033E
155AAF48909C3624B595058E0FB0EB3C625259C36BF9AD2EFB5C64A4535A1667
C8AA7F81979ECA823142A7D3DD292646EC8AAE126FA5448C29384510137DE0E4
783A5B249D083C95403CB61E74C88A935786C5B3B061C03E9361D2E7A5E2BDEC
6D14C59B3247FA75B232E1B4828730A29C3A1F207E6C6947BD20B6E17926BA32
815E06FDCB8EE7E0A553ED1C167611B98529389D46C775EA1288902C209BFF0F
7D37498A6E2F8AC2E4CE7FF33F6D66AB4A878BC760F2F70D4299A4F76115EE61
35F0ADF0A46250E9BDE225D14171FA920BEDA47D0A3755C3CF5C3DD266B97F13
4D8887A5051D58D474644BDE0828DBA953A757FE8B29359380920E5D7FBDD0CD
C4EC6BB8B20C491F4B963F1A9B64F535687D51A0BD968257CB8DC5E9973E4EBC
AC5E73C8920E7CB11E3F00495247C7872BDF489655A43A25374C289D6EF79E75
C200D3A45D55AC4CFA726AEBA373A44E8D68DF1CCA64E069D1FD824066C366DD
BABD53E5194F860325841E2805607B0472539B170EBFE652D10DE3ADAD14EC6E
FFD2E0C7F1E33B01E12A562068857E9F00E1163530C87EAE2BFE49E32BE80339
DEC768887A87FB93E4A432F670E1EA6757CE292E0FC0F4E45FB6D1A0B2B781EA
1714CBB8EF011768F01AE3EFEAA24DE1BE94BB27F85B0C8BE3ED8F1783C422D2
40E7727EA3222207E864C7F39773638E3BD2FDDA151AABF31A28199245893310
CCD9B4FC3546BB0240F44A53B9CDEDCE5B0FE5ECF23DB04FE974772A2224FC3B
C894E379AAB9E3DBB196942DAFFF669F444AAF97BCA6F94951CEBA89FBD98CB5
18CB63F1867A7D6E44D9E4187886C64235F261538F608C93ADF044C39BD2A560
B752BB859C8EBDD1C6675850CA8195A4F9FA9C539B62C9F305D9C7D43675A648
0A4DA327E19E0926C632218410359D0BF3BF67E7AFDAD204076F8CCF23742E84
0863A338C86516FA9B9A830D9EE3B769AE3C3A02D205856C171BF57C73DC0D04
27C85FFC696A24139FB230FEB2047BD168BC3CA41A8DEAA4A4DBC7DBA32A1B02
BAEEEF09FD73AF94FBC319C9BA41189819C5B29F568B88C78EDA7C6A3CA1DE9B
D7D2A66BA0A805CF2EBE2A0FC65020446B3C96FF9C99042164C633B9FF63BCB6
4761BD6BE7E4F7F8D6287C0468E3249DF33250DF73915DAD6A7754BA711BE3B8
3A6B2F6E8722178520C8935A68F619168079114FB61683200673A7B6C43AB03A
95D6C0193F1837B60E0FDFB175B8815F321407ED2E3CACE3663AAFD236FDD824
E7C71AD69173FAE067B8FC146A85BC6EBAFDBE642C963411707E41DA572B2601
547814657CFDB94695D45D8582AE345AFD978844C404A5C7E0602C8FDEA1B0DB
4E681C77F9494B0A27DADA0582703DCE6F32E4252662C6190E20F3B931E14289
E29F24148E1427E6B920B5C9593B11A4996137E25E9417EB980795FAB6855FCA
F8CAAAF626A7A6D5933620E13A01D0DC2CAA3B88CBC7D8988E689D0FBFD65E30
09A8B7D8E5C3EF01DD24445C7C712CC2B5AFB7FFFACED5AFB51E844407E0410E
9CCAE5F3D4B2CAC2E8EDA8362FE97F209BA574B5D5D039A77BA4659033D489FB
10C7BE1D5563DD47A48048AB09DE710899B92B422B37C053334806B316A54FF3
78DA0558E3F663932C8E9D5356746074519505DBC4F8AC480362656BF7276B19
860DEA2988E749819787F04BA7A9CC3EDBF9CDE1C7B3B38CEDA174CA001B3121
41BA6CC5B99C850C4A7C4C523E082B155D45427E2A28377D1336FBD8CE3FC594
A6EE0E3DA7FA3B3D360E533AB579875F36487D54CF0AC9923FF4123DC1F6674B
508B50A1B889980CCEFA92BA36E4B9F5FDC218C305A5CF3A81942435388ADD4B
DCA2FB8C55FACC7617D6BA28E7C99EADF0C0B1E8BCAB17788B7FEB0A5BCB8A96
755A83EB0F6EA03C1D873F0A7ACEFE2FCEF3BF6AE1658A5516E42B76AE14CA81
B718C8EB2CBCBCD86C19A7863E6450220DB42782902C651FEFF799C7E50470B4
7D10DAFF65EFCB027C9194827F4FD5BD084CF2DF175B3F3903B46170863400C2
1D852DDD77AE92BB7528C06E964D4F9917BEE8EE8CCB1DA1A852152D4BB72DCA
67ADF52922B63DB3338A892839466E31F198E98BBE0DF9C8123981A7224212F6
086D865C491EADBE21EF5DAEA5041C62275B684DE7C79850BDDDEE9EFBC6BD9C
192EA36BECCC730800F5921FC73097D0B47D9104DE5CD76002E641895AE43CB1
AFA9A96D3518E5AD9ED32CDFF084D1C0E485289AEAC3F1391D72DB08B0C95A9C
0ABF06921828C1D63C9538830C4C8235DA5F8C16BF26533B564B2A5DD9AECD81
2DC01704A1B7852C0770A8B48D694619D3B6F77A7DC28C2277D665B99993A80F
BEAD46BD124EE5DCEAC02C2BC9A937B9DBBC40F6BB6BFBD9CD7021261D2C8114
AEA0F4AB6498FDD8109322DF0CCE8FE0405D523BD80205E45D35F910A75A1ABE
13802EBC5EF7908D61DC7423FCCE3A9BA1A15D808C23C2CC46088C001E13D2E6
E0C612A2E5FD49AB7955B7A0C9770887DA7B5A12323956582F784526D5861D01
84F4956DB9D9BEEF25BF024278906CF41C5C51645CE99CB2DC8231C47A7ACC12
7AED43ADF5AAB91D5C4B8B57034B45ACE66AA0DB269DADD956EEF585942AFE7E
F2933796CE14B1F9392D5CA0921E275B3FB14DFD7902194490A4C13C0904CAF4
03BB449F19BE418B41F69BC01816313959F724DB2A8D5B9649141BBE104795D5
D90AA454C1E99D846797260D1B0187CDF780CAF45A0E1B3BEF43CCFEA5E0D5C5
EA03BA7993FF364BBAC20192CFE639AE778ABD33EA38EFE1CDE4068044700DD6
839867942A9438F48757E4EE6455593435953A6EFC384C5DAC762566AC9954F3
605AEF3D0DFD699A8218937C81D5E966AD506FE37D474ACBD82C35A086E87312
F15BE510A5824839B189294B91986083721EC9CA95E00170A4403889970572C9
9E714BB2D8A32230BE8A3C755848A8E53A13AC9FCE3CC664E4652539A9092422
F8550342E56C98651609E284BBE73BAD8AB01387078AB900626C7488A61231C7
BE4C83A07719350CD3F2792ACA6EE48DB376528012DF50DB540EE355D3FF4F0E
CBF3CF7E895CEA8918A69EE67899BFA6B607E20D973B0468FD4F84E83950B76B
1A05B4DC730083BB29DCE9B243C773862E06BD9EB89855E00FA4F2651AAB5AEE
70F5BDB495EFF99DE85EE281228C7336E07F104ED8F6DC2F65EC78BC20D377D6
77098BB57BA9879B6206F449F2E42EC97AA528E02A86440572AC4D2FC8DC099C
24925942F2B346FBBB16491775268B2CA93F5A1088F02B367B1D2D62FCF69D42
0DBFA94F98BE39F5EBC58CD69DE180DD7550442AE3E0F8C1178EFEEB5152EB51
2629B7B99DEEF54D2F40E408D52A4C81F48489A872736242A42D7788AB7E8568
810FB21565420EB76E074F0E0B3AA4554ABEBBAFB687A6942C76CEFBDA45C40D
16880AC6D87BF0D60C43FE3B459CB90FD85AB248BDAAA692642BD3701D39FFAA
0EB5951882A0D5AF2D15E33E6FDAA049C11E62A017221DC491D51BB5A98971D2
3C2E49C96169CBE9C4D36105FFB1AAC71AE416FD939D5C75E8E447D6736AF8F9
6CB830F1A6803E15A1118118D834B7DD097D7290777354D14539E76BD3A978AF
C92D6D52BBBD815700DDBF74140C3D46C9BDEB8551410ABFC1BAD9D79E03CAE7
4D6724924923A4198F21E9A8CACDC4E3CFC62284C890183DA9129A948489E1BE
2ADC448C6A6E3F7F5D5EA430E8AB227A2269E6C1E74A0A98894A305740A95F55
F8631717124D2437E7276AFC607364D550859170B4CA391D713F3A00A36870AC
6C912760D8954E6DA83478938CD87551DAB75CDE4632D82C0B4926CCB9B73A88
47B4EC479380641C1F340E52BD82DBE4730B36A9B89006981089FFA13034B8CF
FF3B9EC3E9AACB6E1659234A264036C6017B46AF959F79620D150FA44AC6C6DD
D2C12840E74F65461B5F14AF73EB770937C4375FFCDA28EA3C9DE2CD0877AF05
06562EB920E5A81279B9C8FBAFA6B7261D0693036EB714F6518B77D3B8DFF178
1F569F036CB8BC3B65D2DE0427F7A455F7F445E45E5D650A4EE5405F92C0CAE0
749E97B2B2A4EFF68077131EC3E95A693F7FA901E8967A14F6F45DDC9A1D21DC
64FC882372B81445BEDD4CCB91A7A2441FDF25BBA16E596FABF669E73CEEF4E3
36DCF9F08440EEC0E3356119D1E4BD658E9EB5C64396D14E541FDA29F2D1337D
CFA27576320CCD85B077DA331A705CE078FDE842776D0EB6C3A88D10A1DEF8E1
94E095090958F9C5AD7EDB111E96164AF8420A7A563D795D8E9E60F5222A28A0
216B17742ED304B2996DC77BEA528DD00039AA512EAD443ACFF14E43979D2050
F4FB3291B5B67CB0F122F11985B1511FA92152982FBCB053294CD4C133B0D152
B3F0D3047F9B83E6372F4097086DEA2B5F23722A1F14860F21BA6B908524F664
9B5987967B344ED58A2AA206B2B36057E00EEBBCF206EF6A7B729380BEF8AAE2
55B22CFF282A651B6282D3DBD1EA51A98D632626758C95959D9B7C6C2CE48910
D18041571B8D78EC12E8AA4A70A7920E0BDE7C64BBC23EA554AAC9BA95BA5760
3A8CD6253113ED93775BFEF4540A9941FF240FC0DBD2A65BAA54DE1F82292CA0
7F3948B726E9D3DC6F3AA19E84C3EBDB6FCBF266295BE92A624BCE6EE9EEF095
89FEAD476699F25AE415F460780114F9E0E089B3BA3FB5F7E22E992735A7D112
AA3F39BD94F21DCD05FF887330D1BBD1313BF78D4A55409F16111EAC8BFB0D94
6E34E5623D6EBB2197D96A813F173B2FAC2C9808D3AD60840594A827C5095592
691CD1E265DB2F523B702D4D0DBA35BE10A214E2EF1A77DFF0D1E5B9EF8C1406
A58B14B398414921E10D333B2039FDA78228FF7FFF7767895FB02F823B290320
63EFC962FF21D09AA2AE309E6310CBBC224F848A3DB482A9DC56945D411176AD
1A8848F979F052CE26A1707EA440F3987FBFC0689BE4C0407E9819FE68FC2C4F
C40FC684F961694AEA08DA49E2F9AD0EDAB647E3DEF246B27AA4ED2C46CAAB6D
B21DFAD5C1EBBD4F70AE784FF6640364DA6BAA1DE78163E0947365B17DDB1A85
BFD1BDA34001C878C8267C6EF1A61D2B91CCFF1BED30B8F0F11C297CCA95B6F6
55020E29D8DAD1C16DBCF5DB212FC7EF38B817CF587D494A273665C9E9F32977
6E7121F4954E2BB45832F774E99250452E349A97F949853808E16316089C85DA
B2FCE4B01FDE418380A16AEF2B0C50CAB47B1BF2ED05434845636BBC2B8F77CD
1CA62FD7E5AF7951EA18CE83B143CE5C2E92F4A9C78C0B074F8E374100814C93
C13E587844F40FD2CFF0CFA97BB0E76B366370BA0B35D8E8E9F01A276C94347B
1633DE00663BC920D6EDD0A1277E75B0A8C76AA6C998C9AD482CED7C243C9688
3490FF9715E931351C18F0C93A1B3DF68E32ACD44C6D26CE5F3E37FBD5B599C5
6374E60D7593AA0FEB8F3947AA62CEF7FBE51CA23307F9B8AAFA6ECDF3F9D381
CB388A15F925488E429AF9B1DC692F852BB697E9DE42E2782FED487EF02B5E1A
22FE803AFB2171FE5A3E58B2FB781757768652FEBCEEAF5C10EC704A68FF2436
4E70E1749DBC2DF18237C50F5C540614DD8821275D0924CC26A113D63D3A0243
EBF8AD222059F0D2C6CA85A55471154F3020A16100D65798B76D7E03B03D71F2
377B3F1F1427F5826F5D00BD603C8E0FC735A9ACF77DF9696E5F3C75320B4A2F
B4C322929A703A21EE096C45FC6BA3315D4C717CF34DC2F50D45D391FA8209DA
0278761295ED92B36E27C507BA04936832B7D88CAF43AFF86680F4004C27DB20
FEF95B0BE467B5B7F436B4534A5BDE4B0D29AAAF0817C72707E20B57E4BDF333
D06BC767C93E01992AE7F8D0C563A05EBDFF06ED11E5CC50593AE1B23EBD4E3C
802D8BEA7EEBE241E7C7DA1E413AC82605D2837918E4FE0D10528AE392FD75F5
D0150108902E54E2CCFB9AA802F3002A2931C348D1002760C35865A72CDDDC79
0071E37B0DFEE066BDAE210DE5078AF87ABDB9C6A9285C2350088D00C56F7D1C
459BB90886A9D3F3B3D28B3D3272BEB5EB9167E32EB02DD33B92A53D58C697C4
87E3C9F825B5BD086A6F13FAD3B7470B94624512485C1D560032862BC7FC1D4F
35725F36FB252F0335FB50B3370C94D0AAFC1CEE5C12B36EE56E90A48FDBEA68
8E80FA438D78057EA80AF98EE12C136570B4C3191D8A4E83102B81DC22CDD896
5A3E592C5C7B1F1047F47883359E4FFBE3857AF495A7F2B5210EEF343E48EA15
A6D4AD59014E61259C607ACF39E0B3C415283E72EC447BADD5BD58B053A11BD7
70399E30C7A192D83A577B77F81BAD985C73B05A79D3C8661A9C2AB6DBA695DE
4E68439B79B33FBBD44312EBA9063EA2FE380EFEAA6C8CE3B066A7C6A2626635
CD202D49907646611A22FB9D4A8EB84608A5E95A2593A77AC3B48D44E118492D
391EC21DDAFB91C39EB134F0044F75DEA0EF8975A7F79A9656F1A784A312051B
7DB15BE39E7EEE804D1C7CA9E56D53C9C3DF232F843B8B63FD9D6FE9054CA96A
B2E5D5C17A42A296FD74E455A8D1E0553E0BE93F884A17BBB0741AC2E477F3CA
B8FDE6C5279097919A2254314FCF21D618A11C8FE5D2ADE3DDD5D3DC32A37C5B
D00DD016072EEEA098A86BA19F5010F279A1233DC0BFD48266D36F25E6CCF2C1
077E514553D1F9BEB52F816EFDBA9C03C92F1644F5865A6C51DBB5BF2480F34B
D16985E637939CAC73D8AF27FC3190F256C78D3EEF3837812F4032FD9ED7DD68
CCFB5D5B1A90ACEADECD6EAB82112DE23F581EBF011AF71EB967B7805C00C8D8
360CBE005E91FAD6A3E7B3FE9D19DB6AB1CF0D1A2BEE1E1B87180B5989F17068
73C971CD90C9144800C3756DB044E20D49152A88334556AA37E76263A1593AD3
5710EFCF4C5C08ADB28D34EEEA1AF6B2BF6C62DC5CD602106AB2194BC7D183C1
89012F6DFB33FE5B07B87A3AB8C7B099075A89FF8B6AF914A6B0EA18446EF7A4
AD4F426E594CB35EC1D5895FA6E22A6302FD921FF9F855CFEDCC9667304926C1
C6930262316542674055CA83279445E5BAA80366BDF9D404B7EDCAA936824217
A1FA558FEFF0485CAF90627DC9C5956BB081015A048EA8A5BD31E2FD4A3C65E0
4F45CFA08337BE930D8CC9EC66930E5533FF3A7328F0675312E9B167133F9C47
E58A0E5014E9C2670788FA0F0A5CB3768C60247792EF3D27DD71FBE170668877
AD6F45E4FC1910406932AC7FE354DCAB04E154FD94EA31F1DFDE6DF697FFB56B
A802FCC80266ACDECB128DAF4428EDBAB841A5BD9E017D60FC01B5B7F6A2D74A
3452DFD50B2159A6F38C5F0A642327019123B848B12EC062206BD4502EDCD184
AED4C222B2F41A5B13BE5AAC20C683D9ACCEAEEC9DCD89DA8198C06AFA1406F2
D5FB445134A9805F40B22288A89F2570D905A90F247B9FA8A6C654B8440ABF09
C86D73D317A84B0C8332C0AB111693C2FDB3FD4C41CA2785F2FD33114E0F2660
3C0376D8D3BCEAEC9258D51B9520882177D42806D5DC56CAFD7BA86892B7BAB3
BAB73C5734087E17D7717C9EB78CD3364BC4D5B263A7B256875236F16E783FDA
DA674B361F951D5152C0011FE0BB07DA2FBE443764E6A62177C66ACAAA20500A
09579E6558327EBBE0CDCD40CE7AC4971558FA6D60536BB61B4C6CD1BBE39DE2
1E8A4FA5B04224166A3D72BE6482579AABC918F59C9D6967AD053D7B484EF5E6
955F9BBA365964A125A6114F6AA2146D75497D79D160CBB55CF3BD47456241B3
96083EAF823A4650D794D14775C5749E968CB439B0C07E24D1DEEB9F2CD9452C
F89B2EDDC66A2FA3A02FB913F2C4E92680905CBC1BC00AA18DC3FCF79048F0B8
2D193D683A028034E7114C85C349BFED99BCDBDB7CF502E051A1FBF6440EEE1A
0ACA54722827FBC24AEF2D234C72B60CBD6DC48B14608383E6812EFF98379DB9
544FAF1051BA1E82887980E844A121ADB5E725ABE897F687EA65934CB6065F16
4A5242F9ECBD282712E60AE0003089FCF2663644C985191135F0156722F0BF1D
FACDE19EFA5B281A08DB3C631E95910F965940AB8DB67D0336B8CAD85B7D6983
16376B95D3BAA48A5D0DB5622919CC5A349BC8795C433D4E18A02ABACB639077
01C4B5EAB168E100988EC809C809B201205FC17D0F3991E2F7529FC68AEBF25F
1D023EC088BAE715381BF247D955C5D6C8C269359114E9D719A72C8546E5322F
ECD2F1FF85CF470F1B3B617E06110B0DF03F4D440845869689478C36962BBC65
39625B792313AD025C9F7479F64DE90E4A3DB09F7D4988BEF2B66F0000F05BD9
039DFAE90751B085BDF6F5AA9A634B5BDE965138CDB360066803092C41828FDF
FC40EC76529B35179F414CBCCC6580590696D0585C6A8BD7970E1AB75C1B03E7
1987561E6E4CD95008D557CA7BFFDFB68A41E821D46895BD3EA938DE26B6844B
3C83CC4049B8C28C874595361DE89BB7623FF9BE5D7D65490102ED605DB763CF
50C53602BCD3BC1833E3BB4DCF75A58E95F774F78CE858D3278B573694ABD67F
6FF81F6450D2E633583990036621C31A77C0C11DDA2EC873A9273A3602358183
0C5806AF5C3FC7423E606E11D9BFD06D4AEB3D90EF11B08721C358C415BED872
C96C375C212393E4428547E4A313909459423A9405C8BF13998C676F5633D428
63F0263EDD8FCDF7A81D40C566CF1D783EC7B15B4330A37FC9C1BF23CE45E973
52DBBFAC0581982D7EF27B675C6B14C5440F3DD5ABF172C05B74F523248B1E8A
05F9174F51D45EB4EDF6B8A643912E16BF834DA5B13327538D51A4BAD1812A81
1C99F0EB29A3AA9FC93F8B84C3460DA911CBB3BD57F500502A6E966FC3B1D50D
20A736664B5510BFC1C16428A9D3898B72059981BE8BECF9CA51DBBFCEAD8D97
1572AE64A05E7668CF5780F9C24F8C948AC1D9838EA18351DE99BF4F4587E0F8
9EAC202FC8A67764F9637AC3E4977E95A4B4BF0A8078677867DA3E9C5134CCD2
C4E4103FEB184076F816ABF37783C71E328C159D68D62FDDDC616ADC7E9F13E6
B8A5628C9C33326A0DEC93F4430AF3A4E3BDA695AC6822C4F42EBED74368FCD6
3EF594D6D04687B8DA91E8858B8E533CDCA7E45DD67981230D0F8A676B928A88
84081996FEA9AEEF42017F3FD79FA4C4E5A2A2C775BC5001E4DA81747FD266C6
2C796AC20A57DED246BF8AE7CD9DAE438A5E3A743451B5EC267E68ED11C7C5A9
7895C63B7B93E614D29823613984A31A1B4110F3599D8E6CB9471AE8D72822C3
20E613C72F6E22A261422742D7AFFE888B7379A13C242BE74D76FD0C7A5203CB
5C00D65B42154F9AE5827A5B89299EC09650AEAD8210F7AC185109145E011743
4BA38AE08C30E8E9E32BBBC255BC629D0150F4BC0293BD16FACB5C78714AE6F7
76AD12743DC4B3E208FB0BE90CCB0A25791BDA87894A159A4706023CBAA1A772
0B024E6CBB67C8FB76CAA4021E3DEBE09BB23B6885F93ECBC06D21CD197B4C7B
75948DE075B321B73A951B8EF21A0D5DCD70D140B498BA43863C45D94E6642DD
04C29EADB571B8737F3554E2CA08A329867C70854183F155E73BE33921DA5D3F
2E4484D88CEF40CE313C8754B853EDFE2D7EEE695F8C92EB33721D20B075501A
B35C72B2C27F3DFF0819C797A78DB97C0E03B65365305348CD49837AB3B44544
C1A94A526B9938774C9F054CE6F54FB243BC6C6C03BF6D313032C031B298E84E
A6F33C2AD3AC042AE92C0A1D7EDEB0675981A56FA092FFD7E0ED86A61279D54D
2B4303E7291357E4C4F9A6725247F3ACB290054C7919DDB00F25113B884DA2D1
596E14FCC7FE2B528806F4DDE0911AEBF22F7CC829A95B90E4D2AE72DE069335
6B5C67022950A86415391A609A7ECF4FF731353DCBDBE247E1693EA547E7DC86
A65773110E7CEB4D7891054C2BAE58DBC816801ADBE116E0E90E6199B6C6B359
4E3B700F652F0CC507E56DF287386DB11E7D28098837404CBB2CEB373DCED6E1
20C8C3C96A3D38602788F373219F4721407B499BEDF488AB5E9CE2EF3DDC32E9
218A21DC03CAB6AA087A14C454EDD95B420D2953487E551D1193D670F1685946
FC1E739B338138672A11EB591F776A9568B6265AD8F682CADC56552345D69D55
3C339ABF1E4AF89319F6B0B5F32883144D56858DBCDD6CE4DB591F812C272C20
E6767E45117F52001F9FED95B26CDDA0C7850A553C7C1FF72C1F2902DB13FC06
4304E006A76B29E132634A1E34B04D9557145C824496BCAFB1A1A101FCA2618F
DDDFA97FF12BFEC2D647E7130C704E6EE3AE7B84D5978185DD6619AF0785E90C
201B71D78834E6521018F245F33ABE3E8C7692EF6C06EB99BCB23F7A250CC22E
879BFD963BF8FFA5642F987EEE91D935D31618ED926015CF0810CB28D771F005
EA9DE3B53F508C74176D4E7C4CEEF242C9150928B49A31A5805EDA613947A3FB
1365886CAA5F0136DEBDD9D4265B8B8BF3A39487D1A0E5BC5560F2A9F926A585
5D4401FB1F62CD6C9CA9E0ABBB412452A1F976B7A481011C7FD0CFD23B1E1537
E7059D605EDCF4CDE45EFB46A7FBFCAE9A895D47D5DDF4811DCCADED6F1559AC
779E0392D91D3A0A44AC9125D9412B78975DA35A724B445CADB06E4F5A7BDEF1
78B16E2BE03DAF35E795A2D32193DC2E11E51EAAEC0F6DFE271347CED3448BF4
53FCD9A4F194FA648F9FC0971734B22C7CBF1F5FAF474A0F212719A259549EF7
BD5AEFFA038550FEBD6FD869276EAC3B0E5079A047920ED4CA548C73E045DDA8
5E5DD5C024B24774975B422C912C9FB61D53732BC6F699FACB6315A211016440
7930E9765B6B2F446F65AEC6141338CEECE05D4F3A3328392B5F36F262A02160
DA97D3209091D8931BC21C6F969288B1C3D74EE3EC2A59D9EE46F33362634F97
58827B199FD071EE53B33510F7F36C594CFE3E2D2A126818990D646C8413307F
6124446987CEA1944FB8E6ECD44B390DCA98ED9E0A7DFC6A7E97F60798F7C82F
7591DFFCCF42F6D17F3EF98447EFA5B5D6BCC7C9EA2F064B70C92D7236CD1D19
3CCE186E3AAB066CAEC006EFFA28C6BBDEE601C6E3B7CDD46A4A6ADE0F0F6827
1EC95D7B8236D82B57FF08D62D1AA14CAC2886F8DF4CA8DE5A6C010F83F333D7
6A43C1AB80C78E4BCFBC13732B6E0B9D3CD0EC4FEB0CCD6B99DE4A985600FF3F
A6A73530F95627542722D07141E60E4CF9A7831C627656B5B18EA21ACA741348
5D4864C1F744D7D6A4A069429EAF55359380848E91AFE5470914683E6EB88DA7
A082121911F49CEEC550DC5F17738826E365EA2EE8ACA1E9748D7CC141B27512
67412C579C9BA6F7F196461382DA742FBD4F133705F7B2358AFD603B2B7D604B
6BAF2571BC1A3B162503DD7D2784A460B4ED99D2FD11B81BD02950A7F673C239
EFEA1611106158A8C63F4E35E92E27A0C7B4B70BED4682B479723FB40B625D74
180D87434CCB44BEE8F33BB5CBC086B88232F1B99763230800E0DA4E12A21F20
0A85CDE520624B9FA62412CDA66BAE313BF50E0CB97D7FA008F760E7A3FAE5F7
F4031CA572222F976549E027F889A2896072D7CA9400DD7B0A0F8D3ECDA7B4D9
D12F2FBF40542987E8464AF764903929D670099E9AE0BE4B0DA07AFB0ED03BE7
A0A8A30638765EC2D9FC58ADA6243ADB50B5D3A6D2733A0CFAD6BE60B539D19B
78866901235C66B093C9AC177FD72A65BC3790CF7E5A24B444C7AA3009657F51
8115B6133F703CE7597AA2673C557F38E64CF1F136C8C443D92844D07629BF3D
9A5008C1DCC5EEABD62996B2D7B2CC082A7FDB9B3BA6BB7AF182FFACC2FE83A8
5811B531419704162D5CAFC668A00925D6CC3F2A580D4F68ACE76EF986C323A0
D646B3FCF35F8A1812C609000FE8D9FF6B1A5D9A032838E66B747B9F83FE9DB2
04DF3F194BF4E2DB008896CA61B24894D991A95A63CE48D532508E4E958771DA
F095329625D4B0EEAF5C10EC704A6840EE7187F2F02AC174C86686F44F6A58B3
290C0D9426EAA8C0345D05388961DE095BFE7F8D3C31DBAA0895CB59F8552DC1
C3A6CB7A5F2F60CAC8AA63522C3B0FC931DB46739C3EC1692555C6D565D5F11C
4E9301ACECA894AE0C3EF196DF409BC0DE089EF6975B3B770C74D0FD76AF1A25
96D3D474BC04A4031C519E155AAE0A509C4BB6841DBF0825CB250860DE00F6ED
F26AD396E137602765AF74B3F91C8BEDAC277F83ACCB22B55F21410F24E57272
DDEC9EDA322B7D2E96C43AD49E509479279AD80D394D7EF7375C2A99149EC657
266C5D589BF63325747E49E35860F97990993875EB95976FE455424AD395ABC0
974929624EB544A1052F8DCB5367D9FC51A77EC751618E73715258C61BE908CC
91E88C68A152B2F1690CE90CCB0A25791BDA7B143F39FF1CC919575EF35F8C28
CFDDEEA1598C7AB93513BC192E6146B12D5F4675A6BB3583A8B2A24ABD00BBCC
7BCE378E2E82FC2B984B99A6CA7ECAEABA68B010C12213A379FAE3FD613A01EA
656C8F2B7CF9A1C8F911AEDE793A43E32919A34FA602CF9317BA36BB585FF9C4
1848FC3E07A7D434602D12AA0DC74D81D8BB0D87E5DEFDF08FBE8229ABB2FDC0
260B06A1436FA83904902632AD8D544FAAB003066FCF5A9F5F7C3D3986DC3B78
B9A82297B1D5CBE8505784537621080EEE88C9CB77E4ED913B070E54F97AA21D
7A1A1302763CE5719B1C392EB8A7E06CFCEB5797DD232F909A9519C54C514341
AC1883B5D5D8080E9719E2A2CFCF5D24968FCA3ABA5040A722F42BE20DE762A6
791CC9927A07EDF5C052D7592FDD89069AD4FCAF6AFAE008D55C12301556F56D
22748E24CD3764793628646CA1B6C8768F97D7AD777C987EC843C3DA391C5B96
D779F0920DE32D96926499F9E731CBCFF5F6B592203F3529E9290CFFA39B5556
3E614929EE7C9DC63EA846EE20AFB3E0AFAFC7FB78DF54EEBBFDB12DE924634E
9ED88A7F27B1E32118AED6A6B215ABDA61D540374CB1960EE5E37F8A3A60B34B
1D6A1C52415C67CB439B528714AEC126094492E1C126C4E932B41AD056D22F48
688FFF8A202C5026CF5D0F55142149CBECEB74C128AC020AD618495D574FBF2D
92866F1A966ED3338DBEE24E254A2890C5553E6B184E1293F5E2FA5A0BA1A8CB
225053C37B7A3C20ADE026993380C9D92AD784444EEB4503612BD5B5E85F0E5A
C68F877906791082080D908E644EBD3DDC5F19DF0EDB78C26EA43DC91FEB3872
AF3032DAD9927C34DA774CCCB70C0C91C49A579483C5096BF56B7B4BFD62AAD8
00D34D9DA97E574DAFEABCFB59FDDB96431C80
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C2D74449CAC20DBDDD3380C5439DCB36E82A5A
72E24259E976632937402347FE0E201D60308E19DEA3902F3C361CBED5CFF784
282EF746A5C778F2C04047A5CBDB888C84AD3CF84D54A2CAB96E83FFA40604A0
1EC8E8810CCF5AFC45FD42ACE7AF59B50DC33F7A65D806A3FD22988D44043964
7B2BA0C7BC5A9BAA7896608E7C20CFA05F71EE0B7C7B67D8C7AEF4721E7BB6D8
AFFDC6C60F4F30BDAD96F4316349A0C9B26D646AE3703B6892B61D3CB4AB4187
842AEFF43B202FB9C5CFBABEDDC1257ACE67CBE6928F02D22F3D0EC630CFA02C
0F9C4E60E3A54474E96780A532F3F6B1F8FF071E03D1BB27C6A591AAF6BEBA12
81240CC0667E2ED796A8D6BC9CE98F2B71D9862113C69F0ABD2C8E0CD7C39008
6369D35D3E5A083C3E82E9BC568943DE1A68599E2F3EF62EA528B388FB28E80F
116D6062165B9EE0BA0C870AB44BB1683934B4D4429450A21C9EA0419C3A9D9E
4014CC17E17E0CA2B89117411197AA294D99144EF52364BBEF00969C9FA34784
61D1319CF4B7FFAA33E67189A63DFEBB88CCFE63251C667912F605356788B310
59712DFECD2A63DDEA51BCC61B14C231ECBC73C511681AD69F4B470F2ECB11C3
5BA9D7B664BEA7448A6B067FE9BCAA3B24E051FE87B31B6B7BB613ED01CA4D65
F79C7CE47DAD329C8020A4D71BE0F7AACCB3BE5EF63B1C4E79B49BED733F52A5
3D468179AC6BA242538EC564F080D8F2D112116C9B9732C4AF86476579DF658A
C6B29DFE3FED2EF67B28A1DD29D10C7BEEDAE714ACF1277D793D674E60F47D9F
89D1C1D46AF5304326F7002E83160972074FB6F90585C75CD51EDB22B4AA3644
E0B7B8CB2A919122800171B474419D914DDFDEFA36EDF85949E44024E035D446
8AE5C73036F3704B16222179BC125FB2A341ED546BB25A11C28B5846B2474652
31691DD7E1FA97D2920568999A59AD14685C049D0ADFE3ABFD04852B9606E8E0
74B6742A1847C136340CD545E53D67DC709556101053958976A09D4D8F15D141
6F278BF7C5416109CCEFEC324FD2DF976CFC21F029256926C39829DC8A2ABDFC
584BBBC8AB8932CBFDFB9FBE0269B68A357DDA4E9A4396479FD092AA676650FF
0BDE0BF634E2E96A083378107344FDEC2A1324ED781467AFD9C6B8612064088F
CC4B30D4DFB3EB1E58EC97A5F617E7831D0309FC06C6CE580564F6B90D2D374D
18181410FB6167E2955AC798BB373A6F933FA2EA68EF9D5BCD4C4FB87316BC32
7ABA5D5F5FF14BFAABDAAFF2259E1A12F791CF64CF7BD79623962FB0309E6E84
391E09FE53FAA4CD9E8C779273D47755CAB6FFF04078266A6A1133D8151A000D
95E13EEBAD4F215628C30F1A5B6C282CD2B7284B83AFD2E33DEA0218424EB16D
60F1DD6EAAA05069536268C92FB0729C26A6619E55124C58E6471FC04A203EBD
502D6C566B0425564CBBB7D252F2854291E6187C1796B0B28917D4D32AABE30A
EEB73BF979B76603510EB77DADC3A90F91F2AF4A64AE823BA1F14749B68E2B1C
F93711A744226081131E105AD89529EBBCBA731385F8462D0CDA1D4800C7450D
833CC54309BB9A7B79C4E91724F312EAE87FBB14725E4813E05782683C877C7E
C4C86D6FD37C58A5709C80980C93D33ACF90ACEF63A98362133AFB9EA70CE201
53395D1F42ACA59D013E64C2FC91D0F560ABF6B06BE4473D026CDC9CC58B25A7
09172FB03C68D6D8B617ED74243FE51E6BAD891BC2CCACF0C9E1BC50307523F9
4CC4DCCFA7D52DEA507E5D026AAE08682594C85A245A39A7FD55D42E3FFFE439
D20EF38EA4183C5D716F96B850D6FF61144F6A9E51CC1B8A86A350861F28DE39
6A0028B3296D6DDFD72ADA2801A8E30DB3E31EC9602D4654DEB38E8E94225D8F
864E791EA66890192077D7CE0A28D81DCD1E8D94F55FA1F21AD44B06600AD6CD
F4235C9298EFA851B91D5A4FCD68E107707DBE0D853B0FA15A4D58DEF4812FDF
9458012EC1AB66353911FD032BE7E564473F851F794504BF7C774E3C38D574BA
9A237BD00A733EA05D613301D6A4D0EA769E545928DDD1FBC289A18A4B9627E8
33A471EFCED484E59CDF6ED7F482F6056F4864EAC69C58860EA04A36A3BD6DFE
D9BC3104B7D31460E3FA77DE5FE5153809B0AF19ED917C49C7460B2C1E8DA886
6E52676A8EF5C892966ADC9AC306D01B6E24DBB2CFFBEF205E3A1E08C23145D5
6FDDA94D6C05701424A6D49E4DEEE399A7BAF3256EDDFCE5F0DCCA5162F7A61A
2CF30C4ABAF2E72109A764DB70C0C2B6A928553E7F0FD281122739CF2CC73F89
825E2087C5BB61C6C9FD252BEBED931F56CDC90C677070565126AD56CB4E65D9
B88E3F2968FF726EB83685DDB4D90069DB7C9F7DA84414A8FE9026B4F9F6FA14
603226BDD342BE1666E63D3CA43FA3CF732F443D1B302755CA7C1A3014CD898B
048FE3A8E1CB81221F5C1A14D41ACD313D783C2BC9C8F9A1656B85982FFAD6E2
889C7A667DB07ADDE07F1A6F2D32A270159C138B2409D3A79E946E5680042F32
6F831A69254A546B6DA8EECA492D56B2F9F55B399D36E9C7F8A9A62866F4E857
F4EA7D25CC8749B0743ED54070C80AF82DC8CCC76C007B90466167D1AB7DD3FA
96F38E5F3B91656FCEEA5466934B7B24AAD0069E1645631CA225811B174959C0
DCBC8B95F1B879CB720575618562DABD7DB8E7F400207340E5B3AB6265EDEF74
CE2B5AEF26AFE672AC811AD7326AE12B896F411E09C15B0506D1F8055A53A570
9C80980C93D33ACF90ACEF63A98362133AF7439D7B8B274B84BB526F68F932A9
6A11C32D2AE1A4C90FE98236360548F75D58871FEE5164282E9A50334FE53811
3E5BC6BCCBCE4D0F09A5DC24D41FDD14A20DA8B5A3259B2FBC52122E79F4418F
3561DA59DF57F86CF5989022DC463B7536856D831ADA61B11F5EC2A7D2C1CEE1
4D1A67BCB8CF14E5AF8026D15411CD48CC6C3D7E0E41EAF61191F8A9BB009B09
A4C293ECEB28980BBE80093D74FC73CC7A6E841922FF9B20CFBF4CE9B9353827
7EE0BB74F5C21602F35D0F54F815D0B0AD37CA58CE08B25D363D89AE740022F7
64C49FE9B49A108931E3CB077A9C53C4D8956486C96942AD652B9188F2FFA149
549397822116081691F99CB068EC99B0F5292E5450773EE17695386493D8CDAF
251045D2C257859F5DCC8C604F07F199DF379AF85714824E939267229AAFDE9C
8C387F15F064F42A8F889765C4A31A899598D22EA55DE76735D3C2DAB8ABC2D1
55984F2C2E5939F7FBD5EFBA078A330AA3D47D5D443C553A9D3FA7C7612CE528
15250A472B8DC7C58EAAAC4D94EF709930ECA646B2F07D8358D48D0A768B6BC0
47C4D34A483CDFE067EE6B3F7DFE0ABCEA24D63DBB389C85CDE9A053D6FECAD8
593BDFF25FD48046DC78E168AD4A355FBA4E4E99A88103935A91A910B6AC680A
8D82353B4D9438C2D541657DC358F6305450C4A820C8732234852F2D4A4D45BA
A85754EDDF9EC01F28EC7B1CB5FD4D2770B43776BF34BBC2FC5095D9BEBCA430
AE2068CDB5FC3D5330E6FD9BA5490A43152CFDA8CCC94C032261273E41A33F45
DF6684D3DCBDCA5537ABC8C2B536D47BBA15341E42E6366E02817082BE6FE0B0
4249A4840AA428097B59ECB9ED4D16EFFBCCFF0CF648981BB0F888CD9C8C61E3
7748CE08A60064CB42F4B5DD688729F3F2551E9EAA9885472587284CAE46FDDF
5CD68DF5A2AA0B3CB1DD2CE9FA739A2E6443BDDD8AB8BF4806C61442FBA0B1A6
8D8348723DAF4A7688F8FA1276B030E8711E213495C8304EDFFA803800B5D375
25247C5C189C065B9781EE3B26AE30EDCB46ED7952DD4F10F3A2F4EA31540D0E
785FCA8F3572C613CCC6B7436CB4445C100492702891B3BA245E8BF37CFB4BED
1C16575BF519FC93753331E25315A88FAB1C999BD8C391F4F045EE1155E8E993
3529C210725C300BA2FB19A603ECB41DC86E8ACD2DA44E3BC7EA8976F522C889
AA3F48827DD9280D36D6987358A5D1CCEA1AB910FF57513810E439B5705D8987
D32CB305380D35319E2C674C07B0C87EA3885BC505BB0A5E9854B745E7075233
49225E6B8EB758ECEDE8173B87B4ADBF310FBD37C170E37F4EDB7BFA4BA312D3
6DB126F3F767920A7799D3B4157FD1CFB3541063ED6DDE509CC734C5EAB95E50
B1D94A1015DA1F1505CDD37755796CD5FECC213A8DF6D5EB3D2751503D159D37
82053293E9ED0C1CF4FADA219D372F01CC90343FE1258E92C87FF22464C28EFB
6BA42D64A1609E07F378A1AE072D1E66EA6A8E5E8565A9AB1A0323DA3A5F6B05
A1F353A17E1A3496D1ADB584E18505891086618044B4EE0F4C3D3AB7CC8FCC42
060CCDBE18D9A9003DF1EA7A2F228667319B6262F09837D1899A47E6E69EDB17
BC08CA1B092D4F20BE1AA08540DFC17BD9B7A268F55CD5423525A001FB54EDD9
521B6B0DFDA7BF98C5632B31D9509AF593CBCB7B0B261AD7EC53659C2C8779E6
FF88BDC632ECCE672D5A6EC1128C81F22ECCBDBDB5A63297B06E72C8929D5202
D6A34CB17D81F2F662252C0709FC2C8B228CBA5632C5C642A1A387049E443835
4CC6B692896971F28513592B2818D14374234C0A8CCB717FCBA052088FF01513
6D44AB75725488A0BC7DA6FE56FB44DF02452CC4BF7E37F9117E9D940CEE01DE
39FE83DBC1A06B49DC5E9A9FFD534CD2D4A05FE319D61413D43312587BD2D16F
265FD71A55FCA4CE43165605AE3703C3F096A04154F8A7384570B8A0A3B37377
D2939F24A13BE4C74F78384E7FD399CC47BB260228A3CA9A0EAA200C1BB9070C
FFE5F27D46FD5A874C783EC73B529A8A3DFBA918D106959EBBD9B870A6E5708A
0F4C33015C8D417C0C33EB54B7A2B52527D3A8DE36AF482F2E48AA56435A4BFC
57904CDBA6BB2FB797EA19E47AE9E2B9BCE3ABE6EC68FFE98B8597A6480B6F95
EAC3A4FCCC29386254DE597AE4C6A8897F9E44E54761A75A8C17EE6E339E5C32
79B78C4BF98B23BA5E8FCB344623503EC814F522E81BDAF02C8A76BD7CAD08F6
AED8B002671EDDD247A356EF1F09DEEB5B7798D02A7DF3CA41D533C8D68D0696
621D7C1479469DCBDEA1F0AD7F53B1F9CF94C24746C3FDA17F2C848A47115838
262D4C4BD10193B73D2C7D6C71A1FBC04F6E98581B5D753BDCD4465492780B56
0D7A64F4AACF00DD611A0D4AA2A26677F05D59976EB80A650E2F6951FF4CBEB1
93B070835F9A0E9D7A0546E34F8BF633F656FE32F1FF4532326221FFED7AF2A9
13FB2CE66241C5102CAEC3992BEEF19998A0C4955C7691B72AD442BDDAD18F30
DB190E4D004300C26F6CDFBEA8F56A2BCA48DBD42C11E120CBD1E6BE48A0EE99
D6EAE72FB04C6D2B44641BEBE0A6E8A62717868E7401ABF7315851B113391FA7
94098F3F063416D4214F56DF2F6591BA911706D3AFABBF86B72A80A1482AD2BC
39DCFBB8B36B101C9796565869F375D0905B79DA5F3469BFC41E342FF7CD42F6
B821E75DADFFFC89DB5D3CEF127DB53383AA2FFAC31D3058E6044EAFD1DBA1F3
041269F715A374FA5F0478D6FBD7F0835871AF91A6288F20F47EA3BF4C901BEE
4B08759E95A8672CCF96D57350CEDE8D8720A80DB951D1D9FAC8ED3EF4D4B29C
01EC3581E275BC94ECEB7B517E88F6126B8A392F9F65CF23576A523D336C8523
AACC8882547AC619B7153AC7F91AA195D9F12E03463930D05A3D71E1E9830AC1
A75B62D699B6E927E8494ED12C35F6AE4CCC6B4D451E2F86782AE3DC264C9B58
E9057C7C31ECCF837941C0D95E5AE403770D7F40E6350594AF310CE1E9533461
F6CDF547E987A6000E77F176F7D9F36CF368FE63621F060FA8F92265A1FF6BB0
F2519C1A0486A536C3F902A6A9F2AF1C8DACE62B25324959B46661FA8917D518
51498AD5DFBBDFD2AD3A45C0FC93D273C16FDC0A6A0C69348DE5BC5F443EC06A
1BBE8E6481A48A9E0FE19BFC45A1D4C5B764583A99748056B896A27FF97F49AE
BFCAB32249871871BD55E515F7FC9F4DE75B2CC3F90DCD3BFF447255A99CCE4E
C0E8B418284452650AC9F152442521EA9578696F57047C7CE41C119A58C91E9E
8B945E36442C20E14598F0BFA3B6C2011B842784111027A50C265EF669047B3F
E1143CC184FCA7CF55E0A28F72543089F2F9D4AD0E3F3F3A4407CB3200C869DD
C5AAE04253AC240F7A64999F242193F4BAD3F33E0E13DEC23F367F3CDAADB9A3
70228BDD72D3685477F1D1B294824781CD883EABB77A8D8A93CE85F52ABE85A2
5FC2EF78FF074AEE2D574F2F1413B4C6B706E0A77D4B05540EDA577F3759A940
D23E73451C9675B14DDFC6E9A7B5EDA26186578223C50EB478AC4131EF3E9BCE
C05F698D0E71E9DE151465E0D790578EC532FD07385A4540A35CF347DAD4613F
91AEE64B11F62A03F9E6CBF7696F7B08049AA54889D43B95104214B86E9F3C39
D61CE7E43AA7FF6CC707893A4CD34B4A1D8A15B5B63E020118C720B6329B6339
4AFD15347DC7AF1347F5A1CAD9953444B29D7CB004560D0685F73E8772FDDAB8
72D2EC7BB624069C9C4288D7C772785564E019F13CA5BF779FDF345C143EB8F2
A289EA703C24663DD7C2033896ECB0F56FAC14CC191D57882855C3939CB6FA9A
DA4A6FC3F6FB52DA232DCFB65F66B2FF61B4380D93ACBB9EEC4635D9014102CA
922C49DE8429FA026796EB130B5C40C0E455BCDFAF6D1B30C9499E1D9BDAD32E
10DA7F6F6DD82D89EB71D7CA53FA5D8F6DB11C0E9D4C0DCAA264EA774750A50D
D561FFF7E3669A392CC6F47981F4D01BABA26D1743E2EC204EA0883B4272A2E6
FFFE12A187496A2D75057DDC6D246C967D9922A77F582E2B4187126B5B90D392
35C7430364163AEC6E911191B06F159BBBE9A00226DD788C8C23E5A620F4FD4B
DD641715A50B543CA52F0A4ED8DC99FE33F7A05469EE84164E7DA8ED1557A25E
ABCB7825E2156387ED859C90CD6F29A21F72B102FFA6DF8160B61716B044E5EB
7629141E928065F100485A0C9B936ABF6580C629A7592A909A4F89FBE2E3EEFC
8D2C19F0241EEAC306DB1C2695D6DAFCD4F28DF3EEA1A50C8F89883F4B3AA069
0A4194719604D655F83392CE8784EEB703E33FFF9D78591EEBE7AE8E745F8986
516493AF1470E10DA34D207E2D344277E00DEDB53F6E2B4D0732655584BEB0D0
F8488FE1851E4D2218F93467C904656C4B978E98C381556B32D9C378B348CE87
43825823F754C998AB1EBCE160ACB6D82AB81483F5A1915A280688215D43D3B2
EF67FB6AFC6817B8B15B0FA72FA7A271E8DD2F625EDA3D3CE4E4682145749830
1C03ACF66F2F79DE2FD6A95599770732EBB5A44792004E125FEE4463A3F93586
B770A532801E9DA5E812EF756E96EE74ED62A1FB8F0E317930DFA18ADFB81C8E
B75B0BFB3A2D301EF84772B9094808F6F1115CA55B7BE5F2018ACC72A4B7087D
456CD4A84360DC9B6ECB0543A5143464DF9B406DA23E71D9AA56B6AA8C7DDCC3
41E0DD06F394C35AFF99791A538A5673B23AE113B27C840C2A5C22FB0CAAB9C8
8897BE58530D5D4DEDA1E64E8F09BF449A98DB91A2A8028EFCE2EAB4676EC88D
AEE1BCCCA10DC1124EC4DFC75455A2200DBC805F99EC797F49979E2086C044AB
D19E66502FB01BB3684D274B6896EA3FC50827DBBC8BD4D92DACE0A7B4068772
E5278DC121518356983334DA7AC5BD0F503D3ABE63C3D4530E353E5270D5FA68
17A5E946E39856B07D81DF2D0C98672BD99C91405C7EF89932B38E256682C68F
3DA790E9B0ADF4D5EF841E7CE98AE9EB227FFEC63AFAB6C4C03FA6A71FC346A1
485117DCEFEE96974374BB6E9D392B51363C384BBCDAA3572D2595A07CBF1BD0
5B68870AA4FE5CEAEFF2DCF004640A5F9EF833A4B1B51E56065ABFEF1036EEAB
8E04F327D1354BA4D0877645B9308173B8732C4565BDFA3007E961806E6B3FD4
34FDE1329BEFE5A0C84E3977329138C40FBB2694CA6709EE19C11515E6E96704
3F9162C39D9E04BDA85F2BF3190FFF5B3236F14977546B1D3C5FCD2ECC0C0254
C27B0A0F8D3ECD1B056A35C37842C492DD3C7F35AA5C7691B72AD442BDDAD18F
30DB190E4D0040F9DE7D202BB69739202BD31EDAA120CE54ED0DE7EAAC53894A
801ADB04F4C74BE0C7CA9C36E787862910C4D3DD86969CD1AC9FEA3E44617753
48B3D83E1B59CC4F216CF8C3A48AA4D732405A6CC68EEA00EDB0DAB677F5EA96
80FBE092701641522CD25A8D665AB77ECF4D059C69D4AF6CA9F04D7B3A383934
E08856CE35E812EDB26D73D944E82342C9142F875ABBF0B4DA2A814D14DC1361
CC9554DB2E46B161E4E498CB067C5A78D48AD4A103B90599289C9AA58E4726F3
6D0249234EB51EB6E52C6840365835E3C5F9582E3BDEF6453567EF0BAAFA416C
0AD7D6AB86E633726485816349C498AB1EBCE160ACB6D82AB81483F5A1915A28
068825A867280B865E25B0FA38A6356EC5262F82A10575439CA62600AA098B44
C0A422D25FD07EAD975D4C14CBDFFCDD539C4F177CA5CAEA90D1B947242CE481
1DD1797530D4D3E4492E7D4C8766EB4F2B742F7643EE4CF762927CFCCCD87699
05F0F6CFF798BDB48DBB14D3A0C5FB48201578146A0398875225D8B82A82D2BC
DEEAB4147211DF02F563B1B0E65B1286946DDCEED0D97BEB1ABEED9E395F1F1D
D95ECC8B4432266F9167D37E5BC024835129BC973464E42088642FACFD91D0DF
4E88E096ECD3B8D6F6F508EC1F59EE227E4F6A352AE8B13E93B78D5A80A6327A
35B2741B0FBA3CE446FC361583D845C5C52C376833CC9C07D19BB08A569FB8D2
AA1AB3E1F6B9BD413D4CC15B85509750AF485DE8DCE8D6F4AAF465CD8674717E
87E6481701FD1E1B8705C512C016BAF69C6202E3372A2A58AAEA294648DB1347
F42BAC77371422CC273C435E3D5D1888046B04E77002CEFCCA0711FD2CD4AB71
4BCA85FE11E8B66098160CAB8E468DAC50731E725C894669FF44C8BAA892B985
A5FCC35A8891C300CCF87A6C602AE0AA7A28A50F1CA012094938952793C03F61
95A204957D175AD3210549234EB51EB6E52C6840365835E3C5F9582E3BDEF83B
1ACBE86A393BB350CADCB55BB88D44319FBA9047E2487C1CA6FEC8948DC1EF16
30EAC6A29577093099FEF901F16EBB03B500BC04C5AC8B68746DD8FC39D4F536
CABFA08331FB7423E51E00E9C30FDC2E58FCA0C9B0BD6692A8644BA7D102D09A
CABB0532B101D2206EA79309A7F87B1F8052BE36E295341A5EEE215A9235D7BE
44C25DD2EFAFC07E0928734FD72535354246F33B2E2F7F4DFCEAC871D46DFA6D
5DE3587BEBD9AD03DDF11A158B4370BD2D1AC264EFF20E8120F8B239874FFE20
72A731070FFB5095F909B1FB7D9BCC70D18E3FC72E8A2CE3051BD437DD2BD1B2
FF35ACE4F3BDB53EAE667C420CE57717C29FEE0A4E350D5F3F675BA045A8D89A
C58B77200A09C675E45379541D8CBB09467049791F9C23F4101F3EAE2CF8F223
E473598DF9132D908BA2D4057EC3592A03E259D54CE09365D999737BFCF9EE4D
ED1841F703375E81298CB839DFA366C41B8AF7CC9A7435EA85ED80D8DAA2ACAA
5B048E4977AD30BA7E592654E23426AC90B2DA708F0AAB881153E53E6AB2D1B3
339108E2D924FB26FC7F1A6123A48DB299016B627687D3EE4AB64AA66E7C7B7F
E2E7C825292AE874837BD1841D0069FA69EA9F2AC105D1C9AB15C011AD690C69
348DE5BC5F443EC06A1BBE8E6481A48A9E0D0C985E8D63E7A7D6CEBA67D8A83E
AFCF490DB7185AD2CE4701A8834048C2F40563527AC4DB5221EEF186188DC799
10EA85E741412DF41F4C59FEB8AEF11EC7D1484A6F0F91990C201FA4DDF49EE7
703D9DFE30FC3F11D35511E1708F4737959B2B859737ECA0E6AEEEF942FC33E7
79CBCFEC4B8A06F4C66667E569110DD83F4AABFBA346C94F98172F185FC89011
6846F6EC00754B2523E1F4D802B7291898CF409286611D14F279BCB345D18EE4
2E3DB7FB590B39DB1E462FE9340F8A6154CC00AA8F30511F93B3EE43660E70D2
2DEC877CC8C096DF446F07D66ABC40B5D163CB64553048800DD13C04021FC9AF
D7B3720C104B94181C324EDB3830EF5B16FA667198C9B26E654EEC38CA4CCB5F
26D1C2D5C8005D2871DCD98C39B427C0A838609EB1473D8CF92B969C07398319
845E871C4AB640AE74B8D924E48E8EEA7BAB1F7EF9D23EC5D77393DBF1EF9A2B
346D99DD16B544B5954AD8CC84D62DFD8AE62F66986E23FCC0B2CA47DE26DE43
2ABC8F6B34F19E4AAD95C4C7275FBABB5183F1E57ABDD95BF8BB84F7BC806A41
F7F1107728BF1E9A648CFF974273D18E6F8A021588938A3A5F68B5DCE6477976
0C14170CC7BB200BDBFD5615A35253D968BEC1722CE2A13645590B026A69E283
95130A44E89C39D2B132010DED4C8E79078C5BE580B78186D7F391CD91B6222E
88C0BCFF66208812202C4F355C15D20FAAC79540CDCD5CE9F800DA7293E717CA
74E9751049301D6D600224EDE9B574517228E3E6CDA9162CF6F8D703C6508CB2
DC5D586678999DBFF6A39DDCBEC5D0C7C8B6147928A0CCDB842F2F84219987AA
755A0346CD9F59A3E70196ED37E6BE3262D1AFBA823957EECDAEA25114CE2484
465A56A684012053B3D07815B6A239F16CF415B773153D9615BED1251E4EE613
63C26CC580D2ED544D78E6FE090066EE46091A0CE2690805A639CE22E33B44B8
155EC868D4F208148F4777479529A2AD7A9A9A38708DE19204584689F539BF6C
809CF549CB21818C0A197A853688E3AA3162E6138192E19652A23E718CD79098
9027AB9043E20F807BC9C2A57259E74CBA3652C076E13A8D1AAFF5A9FBFB8AD2
10C285C6EF49CFEDE7321DF112DDA778B1E50BC3B744AEE2F5C10C12024B2525
A147759BBB495C5D5B99EA24A21A41A2E09F989F1BC36F047FF6BCA7D2B30B63
683747CFEDDFEB2312CD86E184BC32D3AEC992B620A98338F962CD1669D18D50
062D8E062552AB41688EB7E6869190C0E77E0EF8523069F1E9F54D2F40E408D5
2A4FAA7E03759529B2F0D9A5FD9C2FD58F95EC30333529F06FDFCA1636023C3B
45D99837E560B8539292055D1F1BDC06C89A7EF1AB04C8E0875032E159E8ABBA
D8D9235ACCEB4E79BC37A36535F4C3ED8C840F1FAF346830FF6333593140C974
A8B13E94CF0E77EFE6EE1332C334560610DD15BFC537D546370C27D93395AE31
A1996059AE84C186BA3DDF8A3D03A6269D7BB2137244D182475FC25BAA32CBA1
B871CB766FC6160B5FCCA007394DE165A56C8F43140871BC528641F4F1621385
39AB71A51598F0BA5A856038C66F720952543DC7BD16845C34CF2E49722D1985
CE4E87716A223670753FDBA678076E48C7B2A394FCFF0A4B0D124BBBC1D8F56D
5C41063BC5F64F0BAA5B6F3E6DBEDDECE528707A7A31EAF5A8AC7D4315CCEA5F
E4C0CF761E921D7D2992EB24625547D49ECDB0D4D107A3EE7F23D1E763D760B0
241102646DE4FA377C9A4B24C0499FB1611320491A48DED20371FA6E943ECEFC
B8A59AE9FB7ECD21F133B000DA6224A2584BBF2B3A53C8CB092BB2C62876724E
2C3C9E69D1B3A6E675C30DC3D3C5CD3B5E0513A540D0C7575D56000265B7208F
65A82A1D003242430EB6FF1DBE8C3D96F2BAFCE70D26D84327CAAD11A769127C
D2D04893D0746AFB81B27D96BEB0125267D929CE8BE711ED480CBB8B9E59E1BF
5FCC067DDB711D176644423F3253E80647FB4AC5E9B45E18BCE692F4342C6346
49B5A2CC15CE58596999BAD68B7E7F387F1D4C2912B3FE793C6BC40C82F3A7EB
D957B2FDE84F05543BAF5C0E25FBBA5BD84489379218C0E071DD8160C467A7EF
CB0CA56ABC164CB4DC953DEFC224822397D96A813F173B2FAC2C9808D3AD6084
0594A8238CEFB7D23F29D5FACE40BDF7F9B0714AB9E6E655AFE40DF13AC53A51
C4843802081696785BF15D76F5457864A94B7845D8B59BF7447DA9415C4D4F92
C8F6ABDCB405540E43B64454A8FDE2E58925A0C9440DC034DAD9C19483F13498
3ACB1A35E9C925F08060154641171E00413EDF545259BE9799BD387E88D61748
DE25B2081C4DE68F185A3627402DFDC0890A4296F3E9B0D405E9DEBF3A7D8DF5
390137495FA80D6E1F61199322E0D926876A97AA990832C147716CA5CAC05D45
06ABF94C6914A674BE9B03DC078CDF0EDB3A2C7866C977678C571CCC9FFFBCC6
B70B51DB939ACC309471B28923719B58815CB1180BDFD2F8698126B898150642
7FEF687CC83EC1A2691FDD8C3E96C83D3FB66F981FF9642CBE065FC6CBFFCAE5
4065F573AE47CF016E3B3AD1A5C090108D4964C7FD5E57B0DE426452EADF75C7
7F1B4078C0B0B09675FE9EC168A2936543B901F6B601D390E2DC1104F91B54A0
6D57CA518FB5D93D59072ABA18C0FDBF3675ABF732FB41F87A67EB9988DD862C
FDC0F7B123089A4524CC7CB3DA0D395F8A525AD0C3C9ADC104BF7E6BBD9691E6
4833B16F5BD1F00E24DFBEF21AE3C1183FCABB2F4E65F5271B585DF4F91B8E54
3AD35710EFCF4C5C6CBCEBDA84D4AEEA1D1136DC40FE6D22505EC7C1DEB88CA5
BE13F85373A8733D3368B1FA86240692633B1D061E66558B3A7AFBA72B4646D8
2A512927C51CEE40731A21B81A7AC291413C501F3E3CCF00130673D6B4E81751
ADA6184B2FA4640F53BC25EDC8F2D11C5BC1C5A5A08B942528B4FDF9E42A5F6F
8968C35F2ADFD9D42E2637E8918867F04D4049A6FC4CD8E8F18D9C1C1ADD745B
02A7610D7B4DFE27B6F1ED0001DA89286C3BC2D58E281A672CE9703F8A049F05
7F1478741A8B79148259FA2E81EE1DD221D487447AB5ABCC705AFA4EDD38DB57
10EBFE0078093EA47D0DA522E23F0EE60900D14EF927A2F0C3A8BE6E4CBC4407
0FC79D8363456974971985326ABB5BF707F31ECFC84E6CB5186BA1D0194B1817
A5D4B8DDD32EFB45B567DE081A7A9EAD38365AF6FD13BBFCF23842A49DB132CD
E66F20BAEC065D8FA56E63115F1A4B4CED1CC44BB69DD41DE505CB7C4070B90E
0346E0F7873BA3F30DE02C2F5F77E8E58AF5B59BEA7F2D7BA5CD8A91C01AE80B
672831C286C900A838A9C616CE73F6320E7FBCE9F21123F70792CF315BAC0549
A27B1BD42213757E16CEFFB075813DF7B7BA6C61DC1C7EDC7909357DFB4C6FB6
446FD6AE83EA4BACEEF0296008746F7366B3855C49CB8396EE7E475F29A5573A
63D3F13A33FE49FED460A102B225FF51C3CAD527A8B834B7E13562E68C1D259F
CACD70F0CCF12E488A3F223BC20E8F138B43CFEB4C301E5596CCFA7519DBB19F
45963D0FA6AB0D63050DAFEF2B2B970EA384CB6EA25D04E767A0017A6AA6EAEF
DC44DBC7C26C6ED12FF6750E6A32F609619FCA686B5792D720974ED9249ECE9F
E8FCC56A502843FB340911E7F047483587D80D9983E48F8F6644FD998F912458
C1965BF8BED4AA857E62B7BD008DCC0C257A14FC94635268A1523DEEF3417406
8A3C7B75E44C132F3D305D4132793CDF8DB01750F4DFB79975EAD0E6EF953B62
659842A7B90F8B2165401C7010E0B69DC1F1BF860B82252D028837EDD804BD0B
761B8ED1E718488E90CF22A28B895148E53F8ACE7CDA3877D7DAEFFD7061ACDB
FF1C13FB67A3B5FB0BD500E9EBBB7881F729289A6B99EB86B8BF729B4B746748
6C673EFC9F867CFA5CF9D777F5A92C8149B0FA58B4F6101E49A6D4B8224C70EF
D210C6CC217C65F52CE2AA64F93425A12D3F99FA56EE1954E582C59264192CC1
3EA5A623CAAD1FA80328613AA15E2F565387D8D2176685B1A58609AEC90E7113
2EAED845678C956D013FB0402EF2F6C3B06EEAFF00FE2603A3E69A2B8DC8849E
90F329A9EF4B08231102E217DCC2F55936442C20E14598F0BFA3B6C2011B8427
84111022A7EE67127944EB80DC56FA968672331BE4268D2ABD64635C9A35B41B
4B6200D8F97BB703231B4C20F5355925796ADCAB88BB92D576D161A36D887387
7CF1862E8A8069398B9E18F720457A4AB35C68C07865063A2AFC57C08D8DF076
3049644039D1D3CBB0C7646DD33D9E3568F7DCEFD853133786151FD06B447323
A98E0481DB2B80339379EF9ECC22B5D7B4E8E9A11D95EFC71B5A6C6EF7F635BC
BFA39E4CBD884D4994A7EC9407F5280FE5690CC6E9B42AA3FBFBE9BB816B42ED
F445E9984AD71187BE7FCCE14A8A162BD9BB26137253BA8B581941E759A7CA79
1561065826D34C38C598D8626BFED7CB672F132E065C4400616D034B3F80AD2A
D5D4E1DAE678029CC028DB4A9AEB3513EB6E72F1C7FCFA2AC432ED575511FDBE
6AFA0AE6E8B46D051CFDD0CEBF4B0C057E5CB0FEDD062F3BA879A81A1C6ABCB4
5E5A9848A2485EC84D12EF0332857EB24FFA1EAC827EDBDDA678126D3AA061FB
3614B789A10D07F8BF51124D286E04C5E4AF642A7BE205003048B7DD7D2667C5
0A07390FD01FC6CE69EEDE25A0C58C9A0637B2405D8C11BEACC5DCE371CE0F82
5A65B22E682D85995A7F6572497A6859BB8B46B5B7ADD7CC5E36F02C2E635959
DF14405AD0EF2B7E4FB2E203561018F0CE719D211FB6DE616809BB7CEBA64388
EDBAAF5A3E1C9CB0A84EE00F29406853D8A5D64194339EB99785EEB01884A059
EC562808CB0D98FC87B893D2B604D77A609B503D76AAE210DE5DE94DEBD07C12
F50A5E7B73647BFF7067ECE8079853BC21C88A8E8AD88833808160A84F3F9F2B
9FDB75D887C411A4C185B878B8003E1782E9A3484F8CFA10E320FC6896E2F408
B840D4FB9786E782B22828C8524F72B574E18981FD2B469D303AD1CEB6594C64
FFB9D2BE219AD8063ED4C879861B97A9FF87F80D8F8693422AEC39EBEF8C5F3A
75B96D98C17AC253906BA2ACDC4480B4FAB486FE7BC2E431EE3F6186F857B2FB
2F403BEDAD915A78A8B27BD2869D59778999DAD55652CF8B3D7B5E49609B14C8
D1F96356661F43F7ECB1CF1480CDFA74AAC7D85B8B79F8673150E70C9BB7F30A
18D69C466498E983CC2A1CC2C5D6ADB354B0D2F8C6C5D809F919A8D2416FBE29
4FADE1BBF4EDFAC6E27801964CDFFFCBA64197A944F4BBB849BA89F2AE587733
9D1F2ACE6E53FF0238A3F70F7F30D3717A2301CA0EF153FA9D4AC7A752DC2042
AAF25F7B190EF15AEA7A75F7C114E62D234EA9940C03979549C7FCEE1F220DEF
7CD6F56354DFE69300CAC599A0ED00F273E0DD044A7DF055D633040BF5853FEC
07380D6677A1F2676225A2299BC2E64FAD2F51D2218C7B58C4D44A4F160CEEE8
7C7D50FB4DDC3D4E3242D9A1707C44CCFC66887FF3C563185662EEE213EC8671
211D8FB099DBED532F88CA8C433284613A150BED73EE7BF304F22061A889240B
2E196C3450BBDA9D018F6210E7B84A9A86257D9BA441C82B2E70BE926CCD7205
2D4F839593993854C9EA86DA22AB40A3B3886A6C0542C01CAC6771C9CC0DC5B4
F3268A8831F3391A7B2A17E1A8397AD347B3B9C2D22EC26F9B2761469B0EDEE8
BA22F029985BB39F3C140BD64AB6CDC615EF85C7747CFD61EFD84E2E4770D5D6
69EF4E794EF6D6320109A4205CFD1917BB1DA0F8B6269854BB3F271F2DD86AAD
6EBD2BC01221F7E6EC01E5C03C65A92958D22B63F541A5C8997C5A7CF67894AE
B8A07828702857EDDDC1030D19928F2E260434DC9F948AFB0F2BABD93922C7DB
78C54E81C2E4C11086C352061361B82E1B0B2F7D7107A377EF76DF1F1D6A1122
AAC2D60DB2D69ABA96673E399338B988234E9E9616EA3F408B120CCE1C66F548
9890731D895BC4215406A8774EAF1C3298FA99C53536EDED25435CB78EF0F4A8
EA3EE98155E7EF2DC1C36937123329824946320837A6F8F725A324680FAE5B3A
0649BB26ECFCA2F44C620BFDB72B7CAEE3BAB42C1B0A34361A1DDB23585CB941
530493AA3DE40E39F00BA99FBF0F58790DB69856591230B56C932A351A6715C3
AAB9D7A991233488B2D41B812A11DD56294C23BCA2096671FFEE9B7C4B058BE8
B5CF61805BB68B0EE0491BB50ED4D6D27399B516B372D050288238FE02014DB6
31F105D77CDF18A2EDA5801DE620C8987AF18863851AD5896ACA01B2989993D4
32EE93A75860E50AFCA2969295B73342C6E3CCC0C03A5394F51C5FC6AC8DAF25
69280A39586639D8E1C418E04748B104D2FD8D532B8B49DB25D939C03B73F2C6
4250E5EC798A612BE0066DAF6D9A2F9F96D45D538AFC13852FC7AF1DA794D7CC
6D0EBC1A68E87568A844EEA08E4B273A00CB5D81CF1969A3025B2EAAEA5F3111
D898979125D2AC348ECA164932910F2D7B6D9575F45562C3A9DE6D4EBF59482D
7A75A2AB4FEEEA5A8D3E4AA152E5C338ABBB26B25B523D819458B2A6B8B81953
37FCA53EE1174424C26B9F11A2703A38BB806B7D1146CDD7B5AF2FE2AF7C8824
D328722CBFF0B3177C55E3ED89E370A620C414D729AB077D7C9A5AB996CD51D0
2FA1999CB88EA646C764BD2088A3EF070BA1A40E38B7DC25D78E2AA6DE2D8C18
BDF9A390CB237716B7CE4F1ACA9704215BC52783310E19AFBAB852B9F8BA0648
FAD40756621200E43834B0CCA28532BB1E7A62ACCF5225E537266DF9E2729F08
033A0EB87FE3614BAB83A31D61AE3D35108D69FEF91E13323FAE6EAAC2E152A7
D0166D610667E7F03C4E9687200096F3A8D3218DFC6E3011B666F4148991C353
852B4CD283018EB513BD27F16F7394088DC50A1C1FC14A0F8E5003D4703A071E
E02788533E687A6A893A3EF3E520891FC807DDC7F0A0255BE83098F89FF38B30
D840A9079480F30EB64479F4DD5DDCC240976600A90CEEC68D8D1040036F2E0E
500960B6B0F795CC6D377F09A17FB2C3F45B2E98C37EC1F2700FDD9830B8CDC1
E183BBCFBB2C11CDEDF020EE0465C7C804F18BBC35AFB2BDE1E5431BEC51670E
F8463D39464C561AC3E73728A55039E4A7EA63CDDCB2C2AA2FD42A404AA89CC6
2667BD404A07E1BA0B051AD3EE2DEB7C60B2246755E05EBD8614AB2FA897E822
7A0BD7526BC82F5FE95A37D9CEF904EDEC7EBFB0E60995CF6457CF0F5B9BDD4F
132248742876953526D119551A8B29CCFE9B215C6C0736E62CD1CEB660425F04
0200EDAE2413F872350CCAF584B0D4AFB602504C560DC590052EAC34F2A8BF3B
D212B4FCA7DAF88EE055B2CD2711EC377DF941210821821321C287925BF53DB2
C28B55AAF8797624292F1936B61B3AEDB1755A0341E20E4D894D2DD8099F6BAA
098330D2B8FDB828986367E2C4F0243B2FEC24DAF9FF71C07BB9536B90A66DA0
A76FE2087A021FF5FC2287839B9AC4C278C920263221254213129D577BD8E0D6
A70D2757D27F511B1F01835DCA3FA88A475ED04DCCE94CB26DEFD3EAC896C9E5
0A85C1E620574519E6223753B1688648651B73836E6207CAABEE74A7306B6D86
834FA1122368951732CF296B055401F24F7AFAA256602451495B1D0E035131BE
0254292465D2A6D2D7F72A09204AED2F450DF9CB772EE2FF1E31D915C6626F6E
421543DC775216F6C88EE84941135314135CD8FFA407D97F4E938B90E7D25385
0158CF3C78E858E34B8CFFDC7A128BEC0943533D435AD8B5690C5BCA6D17B9E5
1F0E0BF50829783E951AD84E223D306718D250574E4602EC0964E1E28AF7899D
B0FF0C7BDC027A34721EBF9414261E4D0239A81A09D0E20938B639750FF981F5
C988527B2ED63600DD8BDF0382EF7A3A825B7D209A246DA1A2601635E7396187
A1D8AE67DA3476CCE84832BDA1B6BB5244DF4DCD65A9BEA3159E9E240E0ADCD0
DF9EA71FD357BA6B94419F2F22C0367D80A903CC4192686020D0716C1FE23EF6
0C8A4D473897306CDAD972101182A41616016A7C6A48F5A7B5C77653783A5119
8028FF2C46980F42821A0BC9D238A4EBFE80960FE6C0814EAE725C7A145264FD
0161DC07788F9668D0A5B09218D52CACAE1A84D650F263B0F92ED8760F0D9674
E676C31D0375A2BD427D67266BA4429EEDF56430A259066B5A387A777D0453BC
7408CC974D2B8A160DBD7A434BEF0172A38C58E2A2C6D9A8A375DDC57234A3AD
C16546D8FC7AF745BD3A0FEE660ABD17305D11C0063F7289325EC9A664CF1A02
40EEB07A56F7FF556921630FFC621341A8B3E2A8D6B479373FE5AD1F7D9D6AE7
5B9E5DD9AC2B500B37969F6754D6506FB87D745018E1EE8277207C0FA4C177C1
40D2E1DCAED1B2AE879E7BE93506C11ED89006D3FAD451B9C70A981C1DDCCDE1
C93979EE8541DAD7D03572B821D8C221A6ABD52E72CFE11D5DD492DCBB17BE5B
4DD134A04D1B7D5898B903575FA81989116900D1D669861648965002C0C81360
01A50D5AA553631BA0269464E6A0C85BBE063C135BA8B99F106C69A4826D0116
0EDA2EE1105E546E9218E17587C3DC68589CA32DDA77D2A2F3991312202F937B
D81F3DA85863D9936ADA9B15690905EFF66FDDB2710B0964E3CBA88113097050
C3828E9FCFA09C17EB2FEE789D925D2EF7183AE162753B2EA7F5E6D5AE9BCBE3
B3C645733A7D34F141A84E06227611008CA7A8425C2D0D8CF9E6619C45891D6C
D909627C2C101B883C78F81064B4DB6A7E9BBE065A9C3FC83F5B98625C758013
23366454A0BFE8FF467597ACCABF89A251E4DF8906995E7B4C5EA995CD371872
1E4C66C27C62B41E7012672EFBEDF3C1833AEDC095F0D2C93CD486D302BC98DE
3285FA7599D096FC928471D2FE294C8173E82B508A73108D6FADCECED92235FE
A97BC469309EDA85DEE4195FF895D32B4BA6205B5C198BD528B06092DF3F50B9
714FCF63624E3BA3B854C245569AE23904F7532F2E9BAC4F5F93230B9C7606CB
953B09ACE65910521533282982B86DE1078529DE942340A40AB1CBBCCDACF004
602723105C6DA6613024556EE5C6D1931349E06A560F3B3905C077262D5E1906
A2930B434E45A0C624255E2F2BC44423469EB35F62D185F051EC5EA7FE37F49D
7B9A7192A22B971DE57F7DD45F7724B451F6CFC8748E8D2AEFB25093FA5A6158
9F84D291DF298C3DA60FE3CB7207E56E71C729CC6B7FC65CCDB5FB0D4143818B
992AA1F74850D45681ED8EA2C6778463735B05E0FA606348288CB8E6058B778C
128A0A15C6653CB85BF452ABBF5E8E9D8CCF2FEE9FA576773A98E09E6A816DD7
1D80C3D80ABCB0063537072A47B30BF10D01299C451CE6DB3C8E9EED4DDD03EB
43299B66FA71E013C2311B9B8266D41E4C261B59B85D82C3FC072952BCC2E72B
7679DCDC9680F8A0457B159032629AA393DD386EACE8BEBDA946CAA3FB7D193B
21CD904DBDF192E0CACD6A3517851AEB158E72AD46680F309D9F0DCC005072D8
5A3869CCF6CD01783E5DA1B9CE39AAAA0764C1CEAEF82E0B666FCB645561E6C9
57297B9FBE60B53AE0F0BB42661BD0C1B7AAE7BA598CAE0AA12D10B73C29990F
DA7947E6F8EF2545BEF540D0233726FE20D669E65AD7D43399461FEB76701C81
4868EDADB9A3915C53AD8A5BE8C2B56F53C1931C7FC6ABA7CDCA3586D515B3B8
4D452B1B71CC988759AFEF42B2946D53124D7433EEB44C724ED69C8697D06A52
46DF0D0622F4F7627F0D39884C8625CB1922E0FC36A9A3EB472FCACBD45C6046
B7B7D837F735ED1128E747DDB5DAE0390AA544EBD074E6E39862FD5BD50B71EF
A7ACAFCA9918AF42E3E6DBBD4EB24A8D8339777F463EB8EA68AEC1A8BC8CECA6
07FF14AD073A0BA07DA2D859CC2BF2F499AD528C4282056E6EEE7A512FD8DD6E
922F751B981FCBAC743645CC09C9417A6D014C32D1DA4DC02F8945783A39416A
B5BC95B2E4A03E43E92D7E2F27A71159282266021745B6CB1AF0CDE7B27ED270
7252504B6C74D1B1215AEE7118B0337447EE38A02F76C2350AE180C2CE885D80
AD09807A5117A9461C92DE71A8B3E97803700E50900CCC7D234C9D9C11C9F6AA
26EDA3023825C0855484C8E85E48E62772092AE9809282CFA2FEC3EA063AD09C
7F6FD94DCB417A6D74E425DC25BB0E5CEA02D9E933168167E6D93A8D336264AF
45DCEE90581F422EF0AFE176BF62C737EFCA94540D3C9EDDC3EF3A4678155649
9C1E0DF0C0EAE8807016827BCF063D7FF0F9154EAA5C2558D0F717817F3007F9
1924AD93A64F1C3FE99DB9F05E99EF179218216718423B0BA2A61D75C661613D
01155E2002BAE8B740656A0071717192B5A2F9860B20D5214B61CD6B1DE194DB
09E47D371376C47B399F2136B6E9A563BB6CF6EE049BC37C9A7129F57CCAEA7D
49CFC0A63D50165FB546D16B296D7C89E82C2813504CA1EC0B3F467B33A9A1DE
FB73462035E2EB414F26C049CC42A107DB8F52DC35DEB40638634CEE1F20265E
06C2E2E8DF9532840F5737838DE907775D23A450DFC5A23E03EBEAA640CF23D8
9D1C2F0FFAB33DF50C12725A14BDB45D92379CACEA43CE73C4B7BE0F369E0A0F
6A975BE804C5563DFC3CE78508FE1B147A1ECEB538BFB7D7B85E091309B5B8EA
60594A5911CAC24C829B5BE725F2B437A8D77BC7296BAB6C5236E06AFC9A4A0A
E26478042485A4550429759837E9ACE875A420CDE4937FCF412B59772DEC501E
326724DCD4157BDBD399BB871E2B14C939B80707B471D13AD3AA70CABD8E491D
8F710C5F31260C5AD761E6DF3CF8BF9C5E893B3B3FB0FE3C6A0F99894DCDDD05
F58C3D2BCB53A5FC87668F9B70368C4ECB9C333A55FBD7F86CF5E137926F4EFE
09712D738F34416B7F40DEBF8D2F431F021AE22DFA0F0C39E5A9113C823E274D
A9C05E68F680C4FC744A5631AE4DAAC9ED8CE5B337C74F245F899E47E383C74A
223A5DC25996791C74F34B0DB7C5804D40C002EE0426694FD82DFF58B3F20F7A
29C71F9B6BBD08A3E70764E9F4A5677BDC84FF1B3A6EA4DCBD59FDAD43FD3577
A1AD92D86C8843680D33B737461DA8035833B4693A3139EB912674CA952860DB
A8BD95DA79F058A51C9309189509D784204DC79A95A09CE736FF704EF994908A
4881E4B10B040A6E0F09B9C567D856934FA7BE4383C9D8BB35B0DC109B02A806
26A9ACD7856ECE4D6569FB8EA562DDF433A635DFBB1FA3D448B363C36F983002
9E4FC44CC8F267CDDA36431BC83D98704404C2E77DE577A96E477118D5954FF6
C98BE3806CC0F428084C577312B308E5679AAAAC1804C8AB2084CBBB299ED351
CDCCFD33D488831DE391699ECB7795D77D80F41975AEFE8B871CE0269E78DD70
9E7BAF90EE6BD5ED11A148B4B841A5481E4A3C2EB874DB164065B29F71FDDD7D
BBB5F63217386CA0F6BDD0981005A27C7B295E84B832FD24F84E0C6408294692
246BC783952F7FE803CEDF206EF252821F8136B1D7F47A8D6EDBDA6749FB8220
ADAD38F76C7ACCE6A3129951391B49C6C4867AFCC7CF8CC9CFC4121A19F0FA19
39BDBC4262A26D679ED4D87F89B2D3FF1A88AEC676D49D5513CE80A9CA483589
174BB8A0D4BE97BFC28D2F5F323200C869DDC5AAE04253AC240F7A64999F2421
94AE844C0BF9AF326F201D889F40D7AB654F3C24E9BC97AB51F8731AEFEA2FDD
6E298D3EF702D657FABE1CB5051FAC99C2D6657E242BEBBC0D9C6CCDB639869D
B9B645A966CEB300D16B133A11F9E4BB0573754E5551FA49F563B9573633BF6B
A0DB285E6EBB899A87CADBB78C2BE5B7033A7B5AF6345FB09FEA0F9C5A2E5C68
139443F3EBA1120007AD8F8769321D1CC59BE090B85016AA112DC412E55BC2D0
FA9D202DC877AD4B555B8F304BAFEDCD42FD19D84E042864A3F80BB3DCAB950F
0FB842436D3B6DB6ED212E9BFFEDA7D3958C62CD9DE7FCE065A60B90AAFBEB46
42A196A54035F672BA95AFC59304CED4E2B235CBA28CA560DBD3CD5E98B2DFFD
0047253D3F45FB77524B0DDEA8B0BF636BAA4AD81F5E7D95869576ED5FD7AA1B
738870539B2919C2377FF82311DA1A9ACB3AC97A33DC6E9A072D33AD66D1373C
5EC3C945637299028DAB0EBDE09AC5559A882D8185453BBEE3691067A306C711
35D71B2F55565ADA5011FEA13A7A87E82FD6841ADA61B11F5EC2A722325633AF
BA5541FF073DB6C288515C90A87CDF649827AF17018DACEE03975B2C79CF10AA
5C651115BD6FB71D58B71AECA9F47D05BEF81BF1CC6D3A3E6840321AE5A52BFA
8AD33C0598C71A0C259F03EADAB83A4D8C332E2221AF8F6F4A4954501CB9C243
8638CC198838FAC38B735B3B4E5AE7794CAB04475D5A849C7624B4E0654D928F
A7C0B5A3F8FD8F69C0BFB05A277120C9590E799ADC2B977644E7A41BDC140387
A19DADF8662437A226C3C5F543F0D92664469F2FA1FB882207421996AECD074E
198C9C01BAFCC5F6550AF6797489236880AAFF44D29386419D4CE4AA05D1B9F0
55304FDE0541624ED433073931518F8C81E0D820458D2BCF66D53281FB740D92
55CBF903334C65740C7BD19E0AACB2B63E36C23E5F9C62197804B3CCD6315DDD
9BB53A4A07D4FDAE755F0BB9FE44BFF9F2FC398FE135E6B2D7C5684A2E0193C4
28ED18697487C3F64E52F20BB55132DDC4974BBE927F2066D4DDD5AFEC20B94E
6F02B51A7F1BF2FF2B4A153C583696EA6AB1DB5ED640730E023B08E557ED25AB
0659A0A6AF3FA57D400530CA6FAC8992BA4DAE675BF9E906EE156B849E4CB3A2
B6295473FE14C8B8E3B1270C1BEB1C4042BBA0D34125774CAC77B9364C32EA38
CBF518502AC8917F8C0C4DDE1AA36C34D50CA8B0FBCED45414AD2285ABCE7D35
2FBDE6EB1E0B18616FFC9A23B8BB4A46413D6F2AEF5FD2BA95D15B8D19A50C2F
C213EAC75A50B61AB8AFDE8A85854A512F7C3F26C67AFA21F48213B6342E4E06
9367C51173364B6E617E31D1B41083C4EF1A12393A13991EBE5777AFDE933738
1ACBE86A393BB350CADCB55BB88D44319FBA90439418890C67186CCA0576C1BC
1A6D881BB06CD0E30164F613F384E27CF7F81F43138381D177F93F8082CC9D51
12FB3FF2DECE01632A1A1E5FE7E08A2CDC45E40E5DBD202D502CB3BA262D22D1
BE79A172564F2C36D240C5DDA265D2D8F3A71464A4FDA8F96C2E130157F5D625
228B78C09C39260DF18DDAB0BA5A40946D550B7831A2EE210B278CE7AF439563
60D95D5DAC9009FAF1D1CAEDF7DFDA69D2AF20BD41F2F3494B8EFDE6E198E7ED
D8922C0A3558730A70DEAF9D6A80EA0E6F4883E39FF433F5331055F16FC20737
2135B875DF11865C20BE5944EA0642121EE3379FA8031FEEFBCF4035E4319F56
5C7391D8A7012CBF7DC0DF9E4ADEA85D9F8C77DFB4AC7ED4A60011BB7D23CD6C
FD20D74471AA7E56B805097668D76F7427FB6277CA2C9D8B35176F3154E8757A
1C21857556EE4128FB6C8848DED6E8EC6A58365D7A62C2FDBD0B7FB6D86B0AF5
02498AEB3445D8CF8CEA7FDF03568AF44E2EE4DBE87CE95DEBA7E62F33D813B1
D32B75ABCE6A6BB0307599A110E20DBD21C85CCC6C44715E1D1185646D943218
EE4370AC4CD5D68004F8B2012B1A0C9C20040175C45B33860246CEBBB54F8C34
62FF9598357074969A1FC954E06463A0C06130F8B2A4308CAC725568AC539B2A
D1B72D6E851AD5896ACA01B2989993D432EE93A75860E509C835179BDD05D0E5
0A525C31CEDBB97A9ED273DC0F5FE8F0754963C95B5D5CBA269B3DF4D77222AB
5FA955217092921A46A30ABC493F0E04106DFB8EA27D8DA1EC2E704D8F857526
A644743B53CF0B2140A5C1C441D0C9D794B9902C9C1A8E85F575BC1E78513C68
3140701ABBD926BB41B1B531E491065D57658F16C6EB4C4A1E09D4671353EAEB
628E09FF7F84DFAD139F79A1E68C3458B69664BDA49501A37987C8D96836CF49
D5469BB95E305320B7D6A69CE1B5FAE803D24BDD86436652243B879E39CED2CC
28ECFAFBB7188C0766F4F451BFE19AABF32A44BE6C9CEAD20573503B88047D7D
FC86C8F5E19646935341BD381BCC0919429B21C62F2B7C391B7BA8414DB43400
EB1B5D13A28202FDDC54827C9E0C16CC7C56982B317D8BA90F3FB4D943606641
7F1C644293A41427E2420331076F40D52533FD2A0A9341806FB9C9EBE84828D9
5B0CAFF2FF0BEA0C7F859E4DE89C32EA80DC9536334077AFCCCD82CFC223BE60
3371B8532F6918C46997CEA2F65096ADA2EA585082A97A664D15B4138F444E64
31CA5F80248B3A9AE90ABFEBABF69DA650B12B38EDA7D1CE1612205826008B99
F1F2191ED663BE4CEC9950788CD48BF59A21656D13AEB5ABCE6B122586EA6667
7D44CC856B606CC19287478B4D215DB07F7726C499C80E4735362B8538FD37AD
F93656AC4468414C1DD16FA47B69982A0D58ACB2AB0B6D52C9A745F440BE173A
B90F6F4D50B92CDE36A1D32DC13EF7D1493E8ABE49CA6D1297DBCC1535949D9E
C5F7901E867A0D04C412E93F1C5E63DB2F75101E2875F925FBC64489304F6948
E371C985BA26DD7650B28A326F8B92F4E100749B38E69F0F4613C3B36119FBFB
A42B3DD793A9A324BD504C300BB9C8AD2356AEED797948A6E414BCD190E99DE7
937AA96B56FC9A7A47882346BB3D60AB87FB47C3DAD1C78EDF649F1AEB962FBC
FC420F51A9C588C451F7F6EB447EB37A3093F8BC87EC54C4E0C42B085B61DF17
882B73248DBEFBE0E0F51C49B16022E06A761A66F57A96BACA6164963C3AA18E
F7AE2BD8E0268E6095838778501B48AFBDD26AF2D989559FDF570FB390CAFF2F
44700748064D77BF335721FFFB55A4D879BB5CBE06D0815543D17BB033432F3E
62939E834B48B4D7F9A1ECD7F54A6FEBFD1A492C418E90A879E70C1FE775325A
6F5007966113FE9E1C781C3CBE645A0F2B353C392C7D740130309F8D5690F630
7562481F0778E405A96EF36CE4F897C57426D36266B66460D68108FE92435F91
4FC894C577E9D7A862CD7E9418E0041ED1693112D48D8563E1A149198C3940BA
07627F5C5BAEAD71201EDC8950A211471C6735F2E497895500B1ACFA385D9CAC
57566163FCCEC2157AFC8FDDB047E61D7F5B5320DB4E6C7F70B76CB486438D24
7D04AF0CEF65C161371032BE4902BBD57AA5DC285EA30F1EA8B021371432AEAD
F3328894170304038253421DEDEB2D564A749ACFB3F74DEAF14979CA99648AC7
971810F4441F25CF51D3CD318F065A9D95FCFED1AC343C31DEFFF497B87035A3
444D643B1ACD115FDFB8CC64ADDCC523809226B9DC09081469223AA0219763C2
B44F4260042C26F51B34CC67D4756856651BB766773D93984440983C434E6507
9538C1F9087E6FC665136B7ABFFE8DBF1187629F300EAADA2DDE3EEB17C16713
8794C811B3D8E234895DB6427C3F16976AE33D2EB3461544D88EA05CC114AB4A
DB08CCD2E3E5F65BFE1A2B2A94520A58F6DA816CB69CED4B47ED59DB28CBB536
40262FBE15DEED450E81E397D0ABD05A9CB3E2578921F713D83149911CCE2064
C0AFB4D935B09F36A1AAE259A6FD6254E9EB5D2927F8DD71C97EB8FD9C28D70D
3857FACC8581FEB9998D7380381D725B56B38091745E4F6A600029D5FACE40BD
F7F9B0714AB9E6E655AFE030A5DB09F7284A186924F1D302BC8A984C08999491
AF9C1FFB1C157CA626EC056A68B66C652833CDCF08803A59CA514A567CDF9FF8
7DFBC5B77ED158C0EF082D34E9B263DD8D3DB70C51870D9ADD147E7E9A41383D
1E6378810ACFACDD70B4E5993274D3E69AA6F6114C7FDBF9FD6A4AC644DA4F97
056AE238AE68366A59B63E74FC255D1140C2309F541BDF8B1BB46BAB7376FF7C
80634400F1A76D4AA1598B436C0190DB0806D6AB666B48CEBE799652B73C8C80
2A1517D9C6FDA3474591F19D573EB051F4A19346C08C4908E723D17040EAD128
DB37141ACA92A9C0B795045A7372EB87999E94BB52F8168D7B194D57E811DEF3
71264C2592CCDB0D90F33A44EC9D5ED3D838857589938379CAB93ABE05747491
570EDB80902B818F3CF4C2987BDB800DA1C4306AC740184CB367D70D8AB7DA9D
6007E627E780CC9D48C83283C9179770A2FFACF15380EF1FC952E26A7E419ACC
DE04B9DC984F07687EBC1D97BEBDB5105749E30C15E1CC045CB69593E0913AED
5EA81757E4FB8D9F97617B46263F9161128AA6951DF21502BD93CF19040B8171
AAF8F655F2B71834D2BF6EFAC3CCC40D3EF3B2E2080F1484476C2C28C5E0E314
F947ABE611D0116A4040CD614F18EF90787002FA394244CDD63239F480705C1D
172991FC1CFC4551CE9D70C78EC698ADCF13947A866A8ACE63BB86ACCCB910BB
59940BAC40E626D5E1C7A474BA19F3AFCC1524704CD3EF0235E14156EB241070
DE216B7E52495A3EA5D3F1B93134816B1E636A2327F6240BFF595E24EA9A1FD7
51DD41D840427BD445817C308A3CBCF0FCFC51A3DD3BF4A11E12A76154928440
87C6D5BB3659B7E9A3B3BC608179C8BF28994732BCC57D928BC883B8E76068E7
F4BC83231A84D8BF9F4346EE7C154C34B7DCC334629BEB10748F81DFDE2C7EF5
B3C5422806EBA4D2DF543F74CD336438BD4A45B7C8FD52577A49ACDB394CBBC1
6A232508E321283534F91CFE4A015CD40CE908BE2CE1ACE57F9B5357DDF12BD0
3B73301F26B4FBF514C6B17D841B5B3DF95492E74983439AB75BC7A21F225F83
C4666F44EBD8811E1799E40445E29A10318D320D2C81AA5DCA22E98ED9BDD171
A3100D4D69D8A56566C0FA3EAC58EF24A666353911FD032BE7E564473F851F79
4504BF7C76981D54D650098C5B7DED63743F272E00F8860E60AFB76AED1AD8CE
41047A2A4284D7A08F95EF2F9B2355F429FF5013524F45903E166D92493145C5
2FB2AF2E61D48D6D7D553742FB7116B7DA9C6B9020DF91D076228D1487651F97
C1D450F67B0FFD5674E4853E4D6EA1976DDBF62F26AF4B8F10C50D3B5CC763A1
912FA4115BE17055DB49AB1569E1C970503369C085644D1DB7FAA39EB5F85E76
C5384B16934083213CC51CBF9538EEE066651BC346AD9B9D6A6B3995976FD8A5
71279BD69CAA065007743011D0CE569DA1CC532B9FC6714B59908E6BD2321871
3C632ED81565EF1E13AA97507A9841FE083B062CCDDB66699E83598FBA5FE616
E33EA2F454625BE4B1D174ACB59ADB74B16E236B1704C8D6D26B3226DC5DDEBF
D66804719F14A910801C278365895F0BE4511A6A0DB25F6E9BC055225DAA397A
7BB4C82A4F1EA6C7682F1CA89CECD0A641DFC6E9A7B5EDA26186578223C50EB4
78AC4131EA306BB97034876F7C7632A189CF44A025208FBB701371271312EBF7
079B848946ECEAC5DF7AF1044E917186B1CA112D41FB10A63104AD5F9CF990CC
BB01C6ECBE84084C0DC715CBD1BA0B0C2EF1860C2894497D79F8509C5B639613
E737FEF91B42E09200D95D57CD747F029DE970F7854C744C96F6806D9816FFA0
7969DD0CEA6C96698CAB6650ECB240F696BCDDD1A9F0465CB43B824457852A0E
53163C94B93A4C903A65E8C8A0E10F842B11A789F4A8FFF5F1C22E3C015BA8C4
6DFEA00293FCA8CAD6BD2C767477AC3BFB5ED0BBBBF6414EE5858A463D1D1546
B22772B1F38FFB08DD1B4BA2BD20A4BBF8A50510DF29BBA0A356B3A7D086CD86
CDC90F418D86E8B704D37E19D5A0603EE833C9BF277D9B3311204A3E300066B2
2D0D4F69FFBA4882A18B6602235F026F9D4CE871E5CC7EB30AEDFF37CE6941F0
5ABB349E75AAE8B306CEE64EC4905D93DF7D2040A60F07E67B8C973B1E0D47B6
353B6649060E33D48DBA0838F758B8B38DB6E3B372FF0FA910AF67B7E659EF37
960F2210FD68718C39BD2CADD6E7C35AF7BF31F66C559B0A0F3560DFEFF14230
B2FC52089CFE98A1B9D994A23E31AD7BEE7A42D3B3C8FD8E43F928871812FA17
AB4685662CCC0B92274E1F35429B37EADB5A309DAC737C05B11BB3E1CB6EBB50
D62D91FD7852434F46801D6CFEB3549541CD48489794E223CE3A1F5A84930FAA
87A50C937B5C645ABC8E80769A51F6D0206186F857B2FB2F403BEE52DA90FFC2
2AF831712233AA23BA994FB0C2B8AD99562D0EEBA2CC4A176B1EE20A0A0709D6
C9E30AC4FB02F738CCD0C1920ECCB0045381622D6D2532988B41207F5A58AB66
64FA20D07AEF6DC4C3D25B0E6BA61F704CAA3E2F9920C9F30363291678A7D920
F128855CDD17E51BD930AC4FBC23BAA5A113EC30784398DFF65DA62C90E39E9E
8CAB7BC810C8F15E1EC3EF927AD2F5908E08BECB3E010BEB7005A526481C611D
9AA7AE34F17DC740742D3A0FA8DBAF4001B1A75E37F0B8EC78EE59EF00278C49
3FAD652C8E5DABD16A1F78C77DCA1277328B7AD72AF93488628A31140D83CAE2
BA50264B1E097ED39AA1BCFDD82F9DA2855C607DCBC8D9B8184287C8D73D4901
33B73F6AA5D26CF9515090CBF63F37CA1E51253191C462F39109EDA8573FF718
CEF0E2EA461EF974D242BF0ADACC4981074BCBF911BBFBD73E1621E4508215C9
B660518C4573ECBAB48592CF0D52A2D4AFDE27014016006A8C9A2368245F708E
DA8EB4C6F3C9049AE3C9A2D155457F451A8177E92A51DE48EE07FF70EADB5D36
0EA2D514F481B877356FC523C580E5A4292A3FBB205154210C22ADE0C0C0310E
054B70E3F30CBA5DB454491D1A57B150A5B386F7ECCC0EE8E31695A336B7DFC7
825A46B6D70EB017FBDE39702B4B8B60C24B783EE1D70E8D0E067E2A3D0BE8B2
D378E5E3EAAD4EA0CAA79FE6D853133786151FD06B447323A98E0481DB2B803F
649B9991905DA0323EC2D622350AEAA20BA78BC29D83B952371BD3F69A70793D
051FFF5B94C59304876FAEF8AC5C4B3F5BD9EE970A2FA1D9D3707D84206A483A
C636D47C0AFC270F2DB77C82023C47FEE038E500C4AFCAC366FB6C96BD3BDE33
21BEE521AE6E10CF664940FAFDE8B70112DE5D58BA9334E274E26C9B301BAAEE
8A0237B19FB2E55937DF0CDB33E479A0BE74BBC7DD92D941DD69F937FA9FEB32
5D9B4567CE2EFECCADDC8A013BEBF58B7CB7D4B38FBD79364F45DD9E54B2B1C3
C2A12597527B964B5E7D9E558D3F664D554AD0EC1866268A8C63765316C359CD
95FEDFB910B6371422CDD07263005CD57093D4F836D164B7BE25F9F811A466CE
04C2CE5A774EE323836A4B8553CD9E2B63F945504D950C13B31CB7B479CDF868
1C783A24F95BD0EFFDCD8FC061A2D99F8C01DF7A3C1DC38093EF9DD5062FA35E
DA346E927271617DCA63B665449D3B57B509FE3AE55865902C743B3754A3A2FA
442033698AADD3CBB1CE596A0ABD87057973DBAAD7D11BC61696804AE3437472
B4D311BBB2FEE232D4192AB21885FE9635A0F5DC4890183DD07B316260DAE1B6
8C9C49E94E830C6EE76E1878171F4B7B88EE5C9EE0C92F731E9D02889907B23F
00D4F6A0D9B74E591BADA348B1474C040E889BBCE899347659CDD152A758D623
7E52CDE1E2CCE65B50640D810674DC2B2274925B1A2C71D220036A91CB872554
F98A3DF2FF98329B9A5B30883754178FD6E90CA2644D426C007E5688BA2FF5B9
69DF6D1B4F7AEBAFD4A6470D76612C59C8C0198D73F8F17C2E8272B8367C1C4D
D4C5BE4415388F0972D133C3E6E5B6A63B0039BE04F56586456A82408AC41444
39962C9E9140E054811B3EA3F5D23B9220A659E44717F970A46B4EE8FCB5924E
01F73A956FCA977A5793953E2C83556CB30531B1C2CBB35B441C83636911CC92
AEFC14C5A6F005953EB28BEF26A9BE5C6B9AA0D1E9EE8B39ACA37318B2B8DE41
915E54DF679F12079DF942D87F70424DCC35E9C897B23FC7B2DAFF6236CD7733
86E362EC75D0D196581A70E88BF65ABB396A4A1D65189A94A6496E5B2DB797C9
234AAAE7D3B6E3905815731051460362DB5C3570FA1A112B7CC13626AD2B2744
3265B374C4856BEC0D646C81767F331D3D3EF5AD7939E4E7541BBEB0174BEA70
8F3A11FC2712B27C3157314BB5A8D210044D0553DED0AC69A34B5F54605818FC
34559A4AD68EAC432AA1ABF6F8AA6FA28A2B5FB9653BD398287E439A0E82CB98
204DFED7A30C3CEE434832D290AAAFB6CA80087E8D6CE70F4B1783BB9D29E087
72D7C08C9D18F419A12AA1D5812DFBDFA5F2A3428F751CF45C36CF55506FF799
C7791C900E377B784592E232EEE3AC3C9907BB7B683009C74D666CAE5930FD52
D4CBED87EB5CC6194E2C471F8876C13CFE68DE879951241066EC0F779EC1A895
514DE0885D3BA5976E4D90C9E79A437B17993C173D78CA380FA824540B79150E
4DA4D3AFAA1ED3F498EB33F599A9B377084AA5BBEC4DF7FEC3E7626641060E55
159270B4794F9C0945FEAC295D1D6BA9C0D4990CC5130EC9F6DE383C674C2481
6DAE80E7820F7CF6054D70678B01042D547F91A3D046DE70ECCBF7BF132CF741
AD7BCFFE1FFFFE8F5B34581BAC224F874EC0BE7914F792338F843FA834324F7A
319242FBDAEDEF5E0364F3A8239558A9E4A2D31A46782159CD55630DF7CC5E15
3A306983849D58F61DBD9851718C37C2FAAC16E3F3DCA6DAAB758BD7FA7D29C2
66129C91A2A580472AB7BAF6C01409650E70010C2E00EF49B371BB12C5C39EFA
5A348681AA246047CA29CA6B442FEADE254C758B100F7DE922C36FD17FBCBCC6
57ACF0C00272C7BE8C8EBC8432F8B46BCDD7C352F3D0516198DF7C495B95A556
10E08F3348CB30D76BDAA84D2E933C94C99D13E74F105B5A842EF91A19C55CCA
6ADEB88B59E24FE4A96A8CF61322BB85A417BD2D7204CB6ED99662794202DE1B
E472D41474773B6175E00D6236F113677A591DA6992A609C20F851F60F496088
AFC5AF7A29C4E365335A08E4F94BEAE34BBF2B0C0CCADB597E641054899B9DF2
67A4626B5E8A4750D9F6C92EBFC774E82C81D58DD157C1E7187586E61F27C1C7
E2DD3206F64E3C821DB2CF234FC5532AF8DF803AC06E52930C5CD7FF0C20974A
136FB202B9A33D47A04B468FD1EAF6D95938F07FE3116BBF0EE87F66246FE23B
17B1746556297E4F0E4699C177075500EAA59CEA6BA6C72D57CBFAC0E2525B72
EAB5AA5B485B946AAAA5AE848EA99AB64BD7699C412588FEEA02A5343B2D4DE3
BF339018ABFE4B142EB611626AA8546E563F5AC5A1EED981F02DE8123781634F
7CD608370521C9E14B65024DEB38C1B0B7A4B70C85075B9903DAF933A1D62D2E
D1468473211A515852E0A5EF26D2D597781FA1BD30E446F5569213289417E3DA
19F62AE48A9A19F02FDA87241EFD3CE360D30095240A65B6F04D039C33FA0D38
73A107AD382EB258438D5EAFA88FAE72E1DDEFB1F5931A7A46078DB616D039A0
E96FEA51808C951039E754F9244B2933731E12524D634786011FD4AE08E4C2A4
BF988864F32FD44122E511E5FBE78561E96D1C5E62A8577249D298ED9FDF4795
28CC903CA2D05633BAEFF230E69E8D76238F5F253412259C2DBF1171B10F6FAE
48F820257321434B9337E42846577F66B459BA2A78A66BE58CD30C941A2C13E1
9972F78E851A07B46432BAA22AB2D46F96686444F42CCF068A8304D715FB92DD
E05D22AF51867E072768D1D48EBAA30844819CA1B191CDD4AFAF96430E4D1A4B
83A9884C96313CAD7561084DEC244B15780303EFD10F3C3EBD91D6C3D3413161
4029D6EEF59F87C59264192CC13EA506627E2E1048F3962B1BE355A04F0A81A0
2D5AE7CEB9482A22011ED23599D8A80728385AED7E5034670F9B40B6E9517065
13BCCC432C4919996A2A493206F74E70DB07312C8C4EB4968122961B6617CA68
76408FF3BF38705F093B93CF031A40701CFCA7CFA315D2A1B0FAFD3E87D99B99
9B8FD338A699D376BDECE621585BABAF8AB1773D34CAA55AAECA1CF28016FF64
51FCFDED1ADD99E5451648E64F6B95F9F04CBD788E725CDB7ECFBFD0CBFAF84E
2C4EBBF00E8837A4D888FA4FA477963F49A972C83B2A7721A9A9A0C947FDF332
9FFACC51178566D43ED04511C79165B53153E89827C9E1B04608BCFAF46FA31D
40E78189ADE4AB714F8CBE67EA7284E138C6F3E565C01A4C62B60019642248C5
918C1B2A897B5792771F1905C70C7B1EFDD6EB11313925FECB10CFA7EDD2781F
E368DFBF4CC6E06F7F4EB714F3E0EF21B90FFE5B9E4C0A3C0B2494DCE70B948F
7324F6FFBD1262C17A2B7E7535AAA72766F101825426D7473509EF2A55A51876
66E9D90319567968F47A1D0403469EC64431C51703DCC7D141A2FA747811E0BA
E319A1A673B9278644E61AC3D5420F4FC59A865272A24FC2C31BF3E1E327B8D1
8D6D109992428B15FFBAAD20E0F1333E17E66309ED3C215A14E77AC3360A47B7
5E23277D2748F6BA8F9C96F24B5A159A68CE624EB0D89A9EA373C268AE63B11D
15A49BEE54E38169BAAD6EDA2A8F17A172F1AD50E5BB57A9A4A903C83A271595
B09406D73E24E5E04C6EA97824B2898144E9913BCC075408D2B5CFD9919F6C5D
74CABC955D4A87BDC6545AC87BF7884EA06464504F75AB7E97F54B42BB121E4C
51C29DE24889D289A053B271B37DE7FE07CF23FAD837CA79C4D377B653F695AC
2DEDB170CDE2A8362D637A2643CFB337CB6E57C693A8211ABD56C4E1D4387D54
E6CC38A1BF0D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4A2DE9AEA203B209385B88D9E708FA615ADAD672C6
BE223D5855C0F6753649EFC00A7683A9EBCDDF1610B2D942987DAF090BF54FD4
E7304082BF34EBA0169EC3F6190879D5D8DE05CB5C6CE7C2212251BFE8824A87
3A277D0CE8C588611AF4987F7203DDCE93170428CB54EFDA16BCA73256C1FF85
2C85996873C9487906AB70DAF5E4FF2EBB5C7489358365EE072EB45FE7328E73
5D241828F39C98E813E0B142027DA0842BB3BB3A4EA8DE8EB34BB81AE7BA9B29
193A289A9EA7EC158512A268417204F047097E042BB52BDA0AA3ED16B4315244
E3BB451A99B211EEA2F1CD0A5709AC8CFC3EBA9A0C45B48925B43CD4417517CF
6F42243C234413756CA68A0F125A0E7C1CA1F6166685C3FDC27532C931AC8B86
E81FB0223686025707E5A69C6BF3D0C6660E636D6AD25B03A44355855B2712D6
F84E63A541739B3F161891F0FEF72180DA1546675AE16824DD84B6CA375598B6
C439A2E90E30B7AF6043F860D5D548B166C25921D8DDAD3398299D23D94203ED
FEB2A8899B078698314F08981397316AEEDFAF486F58FEF25284B5B5618A6762
967822C2B91D421D3C8CF5D76D071D3748C32BF1C779E9131603E8C0EDE2D696
E60DFEE5F15D5EA092DCC4D49B16373FD58807C44B06016EF5E2670A911AE147
CC5A9756F870A1716B4DC3D868BDE539079576E5CDFFAC34E165C063768ED394
770CF07675657587CB8A56596847362B00E9728B7CF7F5E85673E4B8C4F424D5
94F93A6861828F6251F206B9131C951D1ED4364A9CCE5383C0DD92E3E329CFC4
E2B36E704F5A2E99A7CBCE624FD99A6A452BDA7CE29D9E0AF72F0AAB66DFBB8C
8ADD16BB65D88A7AAD93961976DE90E40187EA775CC79FCB62135BF116DD8A23
AD2C2B39CE01BDF9463E1A8E933CFCDDCC723A92C5D81B3B8D5E7BD3C814E17B
E012F0F3C38F09982D6B98C3B129D4EAD34978572E503109C189915E0CE863C3
6799BA1D959BF559D2BF4B0F805E344EB63D558B7F57215979FA56D641701C28
1A9C176C47F7AC530B409CA2BBF912DBB455D064B3476F2EF2991878E11F38FF
36D1F1D67E0A154F2A9E4BF36A724D7F414849B63D419F4B45BB031487238AE2
EDAC7231BAA719B92786F098949D8C3D82E14CED769999035BFF29D6477B2C3E
F7CAB079820BDC7D3541756157E7A60FE8610C7400C94B3C20A29B95317E5C56
613FD2C27A6FF7D30EE720575B4FCDBB2844F2D6E018E867FDA253BF15E1ADBB
05F04614DDA7002590B8245254972A9E4781FCBAA506BD9D7CE361FF523C31DF
75579CD24CCB5A7CE967062F19345B9C2C224F6127B0F5A90B25E1B529E86B0B
4656620B9379272740D8C45888D4A0CF8AE610E7017E11E78CF5E1642F697C25
D6D88CAE47E6567488A91826159569889AFBCAF5D526CBFEA960FF97CF1B59C7
003CEA2AAA0027E82A5A72E24259E976E6FB3381FBEF9762C42C4304DBBD673F
79CC1DC21B27ABFA53F4AE2E622FDBA9FBCF2E2FECF757FE7DF45F18E7E2CC96
7C95F218BDB7463B16492EC628DBE6D3D608A7BE0B7EE204C7CEEBEA28E4D03A
6FCEC593872A973E58D66C52B4DFF050E4B1EED97B8BD936A3B4835A64DEE8D4
BB170FDAE7922D97BF0BCEDAEBBDA6BE7764CAC582CA56452810F9349B099A38
501F2314DCF08578A30A67E99C366993193033D9926EA4B86477CFEFB8533662
A2F6E7D29AB1228A867A6E1EF0E9C6F899B491DC15C0B0D4D107A3EE7F23D1E7
63D760B0241102646DE2045C6DB3F15DF83E0185CB1398EDC35E34404FCE1DF4
590D96D0908022518338243E2958069A906E35B960531F3E2F1438FF2C98CFBE
D9D1B87A8DC71DD687163963E8A9EF7165583B1AE09C3F12BAA82365202F0347
A4DFF91B1D7636794038D4BC5D6DABA9931AAA9FB32F938FC52C0AEA64752617
02FAA0ED37FED651D64059D79CEF1D6C55B3F1ED51C694C79F3FF3AC9F5B594D
F8CDBDA0E00E908F282425191A69B88CB3D4093C675E170E394C19242EA6A91B
BA8558C89D12E7FFB8C3E12E312EB7BE3084D2BA1FAC3D91C6E7195E5066779F
26081CE1DCF8FCBF985B41005EA0771D9510C2D98C3CD07C942610177BA2E331
993DF752B5FBB2911105DDAB231758BD41BEE389B057A1F7D252119901C9A84A
76F6A2812AF0DEB6AAA7984479B2CDD4CE4FCF60D33CF0386F6A52C8265C910A
F297CDEE3BCD4A16E5CBDD29930856F00BAB4302BB272DF7D1D682A1C7028DB9
A3509F974F409FA0B95E779F2E909059570A24B86F46D7EBF24DC37681F484DC
7088B6E5DC1A7E7833FED6D84E6F6554646BD59A3DF0153E0C699D71DC13F231
A3A822D4D2F206113B3C307DDB51714ECD2A909668841183ABD7EFE82B09F029
39A2D8C727F00FCF1783C386AC2358792D5140ADAAC91FC3AF215F7FF9F83739
98F118CB89C24A65BD957D5D9D9140ADD2348CA838B3A1CA68A22C5A5134CB00
24C443DC03930F36B48779449BAC308C6F43FE6CA1A184B63EA0CB7C9786C3BE
9F3808FC75BBF201A299D03379CBB77C99C5099E69C8798D2CDD59871A3047DB
D30EB70B6B0E91590635EADD02BC13F010CFFDA9B283385CA0444C480FC2B7F3
E50DEA1445D9E4CBC6C3C06070B1A215D2D34931E96950E83E418B529E9A32AA
CE33019AAA883668F3CC1181A14D5C2F627DFFDE0BF0054F72ED0CA0451E5D8A
813AD6697E53A436F451F4D8FC4782D9F7D8B8807B5AD4103C9AFF6CA04D875F
BB75E16CFFEB450CB8BC91FFBE6C83D561E0010D274A7CB5AC380B1B2006B28B
D56725C287440DED06772992CC43893291BDCEA2DBB162B85E7721E1AB524CD6
5D4404D0323445D7B0D148E1843D354DE76990C3EA5DDAC81A713A91EC4033F8
8EBEA6F5C4AAD6E114246049948C187FABF401324F9989DB792F78B40AEC09B7
B7D697A6CC355BE29D6BD5706D9F0A6115489580229DFEA4CF551103450057E2
7BFA25D69029232D67C6A3A81D429067B66D09DA1784D216CF91C51791F8E112
853F74C475451EBD128D0BDE68372C77A1E588A8C8499A8917CAB23F00BC124F
D93096DAF1E129F796770CE972003AC25FEAE68EE79FAB1ADFD0BF751EC56EB5
C80EE2A7AAF2CA12D1EB4548266CEB6DE5E452835781D1407E2D2E39A8E797DC
888B65AA9439FA48E80CD00A3DD8E93C9C279080FFAD1B25BC739E75155939C9
A1AD845676304587BCD57E944930DC45B51F736B57919256A220DB336BD4F041
E9FE46C75BA73E0411DD92F0686CAF993FDCE0113E5C9A994CF76178954A8010
B97F7BE3A270405594D3E06C17B47719E2678F0D95F9288B318E8D3296CFD6AE
32E51AEFB4E69ECA95CA7EEEA6745F62F0715C865422128A163B6C6AE0D98903
7D04E9646515EB8FEF55DBF964A5C2AA9623B8674E7C8E3DA64A01E613315C7B
ABA40D366572F5DCE57516DE6241618B71D6A0C183E57E6099B9E4192536830D
9910F06405117245C74D0FC1B495593B3D020683696B7E02958F931B1BDF5997
8009022FD528D9B213F4A4E1F6F7C2250C9AA23560EBB0AD7427992FF2802E3A
2F18BF4C044EDB9552BE2C55747D7AF3101C5F1A2A1BF6C0E6AF4D9FB5F32784
2B7C07EDDFCC655BC55C28705A1140BA7B20ECE6C9A7CEA474FA9151DA64C5A4
88EFD0D6F0A54EE56AD8DE314808FB8636AC4B4F409C806CDAEC4D2ECEE2A2D1
6FF35C3D8F5FD37B1D57603AF1ADAD3766FD635ABC8E80769A51F6D0206186F8
57B2FB2F403BE8A1C6EA3BC6CD11119603EE13A25D981B6802C7E63E7A25931C
800847F92B7E4F5DC3A1AFD438EE08BFAD9BA9B15931AE17B3A5F26C72661855
1ED6F3B85C5DB458FEE542A3598B2B5C7AC6112CF380D176DD6BC6658BB559B1
6C2DE791D9F3B2BAC8FBED7AE0AA0A7DED469C64A2A77BDA5F3469BFC41E342F
F7CD42F6B821E75DADFFFC8C6E48244E65F7A54E14EA3DEE4621E32EE2D28136
769C8868EA8D7E1ADA023B8D0506D824D250AC3F036BF57BB38999EC28EBE104
42617829C58627F62C3D65846B7171BD7D555403B83025FC259D4ABAD69050D6
4014F1B7C3C781C4F4C411F79B1D23A87ADA31D3A48C7190B3F081C3BE2298DF
BEC78BC36F7746A67EBF2EC7FFFD4E4E419FB381D71265DBE5375B06FFCD490B
11631704A069ADC70AA127E851A7FCF927153CC53609ED71175C57773AFD93BA
956EB6F385D209E678032B4B61C682AFF95C517E6F40B4A6BEE3B6989C474D18
43A471576D4893ADE6EA69D2C9016445144AC261E705AC31AE62DA3B32B3D626
925DBC56B562DB11A93A95D033B6AA4DB98BAF283F1188D3740805E36112CA62
0BE1CB7D9071466ADD30E1C13E533213DB6F6E61D7C305D7E74832DD2AA8BBE2
6286AC10868D2FC5921E730C933978FD31061251AEEFC5E8E27CF34B972AD10D
FD269E762E83D1FAF55AA923FE3B5F3789A77B21A4B5B85EF3945AB516BE7B6C
3E439881DF5C6F78E428F8061774E99961273EB9E4CEAFB13425ADF683F07CFC
E2B470E0CC73118F4082594C8D2AEB5E22D705D78BCD6EF09105E2DA61C83A8C
E2EB3B500D661B25AB58E9494F503B4CB5024B73C130A785394E29A37996DF61
AE7EAB1C061FE75A0149C4A665FBE09B8DF22ECCBDBDB5A63297B06E72C8929D
5202D6A34CB04D724B6005BEEFF3FA45A3B0827C61ABFA9DDB04CB0EA3490D7B
A7606326881C5A6CCAAC22D5454B2C1EB2F0A8DBA9510E58CAA7D129FF4957E6
012DA8F7EEA4DA893FFCB837DDD66EDD81132E44128EE1BE623EDD5DAC372782
11EA706917052C6C9B73C95538B7FDFF75CD315F25813E9A8F6B24CC94A37ED7
FE37D7D03026506C28933CED8EE2895A696AAEF0EB67902FA53D9E8BCF2B5D8C
5F2D1B67CD3CF5EF4349B3DDDE8CBDA5AFDB2464806615ACD01DBF870413913F
310ACA1AA008979407171FD1743D23763B76BD8F81F317A7974C5A29C373261F
C171C3E66069D56F6579693CB65053BF56062972DE5B553B4B751597C7C5D25E
E9D241443F85CC936AC92B6A636105D458D51B76C73173263805C120912C4A40
F9E2FB8325F5EB442BF47047FF186B26AE1DCC2AA5081B915CF2A756B226DB76
73920A2C426EEF8DA67E650EB7B1DBD122E7460CE635F185EF89D97719F5BBC3
C73C7799F5201F7F3DB9D3A9023F4CF9FF1E6D395989C35CB2D3E71AE66D59CB
C90EAF9BBBF55ECA16E6C8231463C898D17965FB0DF8B76F97E3AE0BE60A41AA
BACED09631FEE3530A04B7592D850174265A477C0683181F567F7ACCA5EF2678
9565B6D4AE9A5651A140D24002BA43D9321A3CD14F8BE62E4A4C69618FE8EE03
001B4A00839DB507649118A84DA1B7F2BDD3E8ECCE1499F3925DACEC43096857
40A5C70008DC13655D7241194A25388FEDA8896EDD83040EB580E8B7B48ECA10
C3B9FD2498D84BAC4D6496456ECB75348A88CC361FF06E984C86AF0EA429DAA5
8088826EFAA8E50F91A710D45BB0452D7895FED4BB91EC48902B51280BE9A7F7
253F7F8A49CCD3C1B4F9F918923BA2ADF89E8F9B0B086AF6A25C69013A095E5D
061651DF119497CF36780916C17E86D2B97BBBFE571A3C0D5A51CB858E8B13AB
CDE7322323B3A2A02A0BF388E89B4DFD59B42F92904B4D0DA750DFF2A83A30B0
3BC1DB36EF60B4BE4AF7B655ED7915395A1A52DDD8F6C69AD737780AE3638B25
282A209E9D8BBEA3ECFA3ED46C2DBA5CB6D681FF5C819EAE2E32F3C52E50821B
A233B7D90D3BC029C87F92D2E6F78D08128C27B99705F11276660C3F6ECC6B1F
AB337C3EAF5FEE2AA93FD2247029D55D9FA52AA333E2740FA4E11B592680683F
40299172AC3A4A3FC574137921AE3383BB89F311F38E8043FA363DCA07A10519
B0AC6DCE622EBFF358E63D9F6000F11FC2357FA3ABC2433EA2457F56703B271F
766E4E8E3E36F9D84B8B59E3DE1B577661ABB023DEDBF9A5C8D1DE9085E8F49B
126AD62807D9C7A87F8930DA173B4CA5A62F687C9C0E240A3D816CE50B05FEC2
76B53FDC21DE0755EEE6F50AB91703D458D51B76C73173263805C120912C4A40
F9E2FB8C6D72F915E90592641FE99B4D86F2CAB2B61F652CCE54506397053840
C0109C325E5820D3C9EF826C2CABED77428FD741DBE14E0C10896BEDBF25262B
1C95F281E517764E93EF4D2B88C75F569346AC2B878782D12F9096CAB780228D
BE62EDD18DAC476DE8F8ECDB944577917E2E7BC6381459BB3BD8E8BD8CDF61FE
F2585E482EE3E321E355EDE2B2B915DCA5D50A7E3512B325253FEEE5F0E06B76
B3F1CD0F88340E81D27CD4CD21584E3BADB222A9A60DB1C93E41DB7BFD00B4DC
5CE3355A50ADCBBD40C313423B361FE7CEEA92A4B32467966BD1C113A2A3EC8A
A02D746841F0E7130339F473EA0F3CD46DB4FCB965E83445CE402700E4F6522A
C928BB0867AA56FADF3E61C3148FFB0C8BB5E7D0A50B33234AF28E55765856F9
C68134BF8B5872580E379881BE02909D7E57B80AD9F00AF1F65D678008FAB032
9BDB6AF0F2AE4E41457830F8D210B17602F6FCDFB887A83C42C50F08E66B611F
54314D8FCD73F46090D631EF06BC9B62A95FE764579DE0CC5823DEE6923069B9
D6F6420D7F2AB7752FFACDD5D83C5CEEAA7202F91D76B565BC0A760A0DE66823
2978D1FC42529D4813B0A01DF8F876EDCC4F384055FD37C575726185D9B9F209
D9A01CC283B7734022650FBDC39FE0CA00AD5D8057567BF58497ECE9A3914678
EE3A7C7BE835847B4D8E1D84E1D1C15FA740A00EFAB0C19B7B6C6A3BFDD291C1
92371B70D71E5ADF19506E6A986394156D044591FB696182C2DB0937949A564D
4487EB05297392A1305A2F4D4D5A6E66BAE16BA7764D8D8582DFD200384EC57B
A8A562347DD12AFE72E2FA971F0B7F498FA3DA42D453380976A5B2CAC668D4D0
759AC9F82277403C5DCEFFB7DA00CF57932BA4C9DB0F15FAFF7CBD701050A1DB
9BC892A4D367D68214B348BA51DF871A83CECEDDA1F3DD8D1F1518D2DB628C3C
99D0EBAC0F0017D917875BD4F0D107D84F164206B35C10F88133EF9C99B76DCB
93A22FBF1E2930043D6D984D21E08349B8BE1F2C07632B51966346CC25E6097A
206C9108935595DA856256A53561874EDCAF28B2988B10841910B4843922D37E
E126411CD88B17FFD2192CA8295936A18B42F96BE5854A7003C28409E2772CAB
23D9CE5BB9930CAA6262AB6280CF987C7B8A250038D281FC1CAE2F2C0EFB48D5
4F40616650B249E8ADAF3797C2EE47AD35BBA52F360E387AA6DBD6AF825DD4D0
D8F40C7FA40791289E392A4DBCF54D19ECD6F179B2D1D4343512ADA1B78E710A
10079F211FAA5227E06D45FC6BA3315D4C717CF34DC2F50D45D391FA8209DF0B
A2F1797D6A177F5C1564850310C267A80EC51414ABA07E7894C57316578102AF
0CB3ACA252488575DEDEE759A2BBCACAD708D17987252038E89E3625E99E2931
6045535EB920339D2F1812DE926D5F5B853070BB58B87CD0844E56167966F1F6
018C8479E187C50BC36C500B101DE6C11079E7CAE8ADBDA8CE8FA7FCCEDE1BD4
B8566A268801A7242BC3D5DB868A2B8F010172B9CB2C76FEFC4576A763849B03
58586F484216A28C5BC327B71BC8E9673448C6C6EEA41838BCAC0A5E098E19FC
70CAF6FFBEB70AE878B9FC961DD8F81F3B6D2915E16B5614AABA6CA585804A8A
7FBF96F64B37B48C6DAFB92FC1F21A4EC7894E2A0D724C3B2BAA66E94AAFAEEE
C73F2A5106CFD4EDE8ABC0A23F8DFED25F93A08414E5CEAD55C5F2EC61150D2E
80B538DFA37842D60CB4A26A706440E79F43310E4B9C2EDEB216FF0E68B14901
4BB6E8E6BB46A4EF699D07E116C346F8876D538B2F90D0808FBEEB77AFE9274C
C14073847C44F9BF3075F4BAC0137BFE9F3A9FD49770A6786CD5B04165F8DF1B
E13CC06BE30D434EE42C60407656EE331C248410E84D5E5795A34E6569443676
1182BA6D5F35A8F6D515F3AADD855C9CABD5BCC174D4FBD61DE7DDB8C3C7DB1E
364FFBA48BB844B5623950E6053B0068BC64EE37B70945B9CD7B18C88E1931B1
D04524CDC4DFD91254F5F610D7A7A77C415D05122439FC3BDD16A69CE12763AA
D528D5BF0F0F1E39055E86180C7D70697B73BFADEE2DFA7C71FA95D3514F04CA
9AB516FEA662832F3B270718BC389E266EB035CC39C828E042FC059A2C0FC15D
A8D78E4806BB3A779935CB46463F4570CC1FCD2159FEFB58ECDD0EE9C6DF72B8
D560BEF7C82E6A80D6AD00F60921A11583E42F53ED26BE4B0A546C3AC0C46F3D
057FB5F2F74C50B86A307BEA398227363F529553BA75ACF5B38412C4D8F52122
B8BBB73BDC31C477A7F1FC73B49906DC2A30EBB36CB925822B8D27EBEFDD075C
C89C3E2095105B4449B7B4737AD52783C5737C44F9E81FD417458090C455AB03
39569338D455D8D355DBB8548F0D58ED841C7388E6DFC27DC13B8E42E450DA98
2FF3AC62D4E943C600FB5E882A0052DE76A475D72276E2C6A8C482236248C0DA
A528C6A92646975A56E261E3C16937CEA1C949AF55E8687425568F85BA3C5C14
0343582C9770D946F44AD789E6A2CFEAFA21AE6C39FDE40B9D08EF1ED2E41BDD
A797F649B2BC583D15080EDA86B614EFF5AC56F4B051A75975F19B8F6AC9B809
7F47863AC853E1ECE72587556177EC9913D2BBB6905704CF35D7BF8C3CB2AFBE
3092441B5FC98C4431CEF86BD83C5C530FF9E9E77B6982E16DC92EE50DA6ED4B
D6582E0925DDC2C0F2F0DA63D0CFAC78977E1210E201BBA9A805612B4645162E
F6350933FCE51076149E59A402E89436B180E0AA2FD9ECA512FAF3BA9FEEB1A4
83ED40E46D101D182AA65AD1F663FB2D74BFA8AC0BAF795333376EB4C186DD1A
8504330449B0D7125A4C76D86C83882ED85FFB721A5FCBA3AC1C1F757B713F95
1A63AFB753A6A3C4DFF9BA53B2C6F34650E6D47231014AB1AA8D98D60F6425AF
F0DE5B6428940FB6C862DBB42F3F97CDE0C047662BE6A3E58986C54B7C3D6914
F331B7C82C17C2806104EF6C23FE114747EB3CF1886B169923CEB18025FF4554
899EF60A69BA10A8E425F44940C494B0AFA172887001E098FA34E89ABAA7573E
CBD18861E5F87CDBD81FACC7DD80091F968191E7B7F968DB0E2210AE5ADE0322
DDBA57C4B946D6F167A57E15F72CA6A323C0FB989D53EB4A5AC25A0858B10DC0
43CF2EFF6EED7D5B536D9846B22B75BE321739617F870A37F50572520647FA07
B7B6A0D06F3C5A9923AA703FDE167DFDB0B46004D5550F42CA253DB791AF0708
5B236FFBD55C6C07438705279946B3ADAA44E8AA7D7C5CFDF284E7F642DAA985
E03B45448F550B37FE6FEF1645AF32032626E5A944920C2BE36820C3CB1FC79F
EEEE1DB28D46F95DBD9A0594D1CD925DDCC2EC217BECF37587795A43F322B136
C75DE0FA273D40D06AC07B567DA70D25CD25A45C9E8E46AE9BC294D1647DAF92
33EC198B785F96E664A304C65CB81245D1ABC2970655A283AC738C07D2903569
35CEB85520A70B252F935F7CDFB69A1F8A67E1018A6F00421729DE4DB2F27D92
64336152062BF9C1F7C7FE8669CC02DE9C5B6A9ED253D993C5C6E67459D92ACA
28A4A344F9EDCDECD6B5F6907657BCB470A3042A3657BA638B1612C379841BC0
4CA5D5C9E7B9326E24A0D47D65E0B1C2B245CD622A4B9456FC899830D6050CC3
2379C5C2C754F81A1A215F70C547F22F0E3C26CBA8DCB4B0DA391067F6E7523E
6288AD183ED4EF54070D7497892DDE97C19F5A1EECE62DA21DD4CA42F753F03F
AD50F50E4B55D6835705FEB79025C1CA73F8E589707FB215F7EEB3E532B1102E
0641EA168C293C33DD472FA6E37EFEF017C48AD259CDCDE93654BB87A9482A58
049F71949A181FB094212203C21A39B686F88742CA702042CE6FEE1D47796070
BF2E49EDA9528B7D8F8724EADAB1EA2DE9F6BDFE33760E8BAB3C99BCA59162FD
934D3BC1ABC8DA0BC27690ACAF0143570E5FB223ED7EAF5BDC32AFD8FB304652
7CE6665D8C4432AFFCBF37F6900013D0DD0D4B56FCA425FEF9D2CE5A85658788
795EEB8265C7F2726F8638DE6D11251F0D8BD58651E901CCC6BD34A540CC0B82
DAD5BF3E9BAB479A3F9DA76C318D6D0798203FED7C022966C4B72BE209342667
7988F8AC9F7FCDE0DAC8BAE72F67EAB46B72FFD337D62DEA0EECDAC0ACC8C1B2
58E39E0CD739E2BDD299569EE578A0F2E627F3CC4754257ED63A18FD1238EADD
3C52B5C6F80151201DF7794D747A0F2689B4B60A5055543FB599415C638471E3
F0B4BC379C7E96EBDB545806ED3373D16487801F7A6CFE211D8F9BB7A705BCD7
E2F9DD7C73DE15B222ABDF7DC3B76EEF1CAF1F3C41698192EDAEA808C1FCEEB0
A101C52F7A0D2FE7B0E8B08AB13015B27D05780681C3BC280009803F104FEDB1
E5E9315B4AFC92C6FCFDE3D7912A87B5A6E7F78A602025A3E11EF9BA85A5C0ED
82E75B075EADFDA5252A723823EC950F683A6BFB55D22DFB161E1D6B6DB67160
5319C2C9AEDDF9F3D98900FB56F5CE2E7B2B310CB21C2EE9CCD34481A046D60B
5837D5082C3A6CA52CA189CB263187BFD652DC36561D27A9335BBCA18349AEF4
29D3687ADCBF4D6FA08D7289D923565955106A2FFAFC6F4153D54E8B18DDA3B4
0B97915100352778D3D361154FD4EFB91C0F6EE88AC486232CA6612E23D24F35
3029317CB427A87086EA10A597E1623529F8734C0E096F1CFA054DB4F935DCFD
3C8933CBF9BF5DEEC32714C079D90AD66A1174136F0A04A5CEB915B8E21F6407
45A0AB64543DC5B37314539BB425959637C0BCE46EC223C08E055E37244986E2
6AA8396D696EBD94E6EF1F3ACA5708D38CA0880EECE2D624A0A5EEF780CEABD8
C958BE3A49E2FB1A9DD06EC1056E4450D7206C6F7AE60C952F882E4D47175932
0793EC60AA3AF4A3F68AA5E11F657F898F58C51774D8D53D8DD0F4A812B51D77
3ACCDF91E46DC72451837C0F15DA6C85DF863D186A011CE3665CB550EC9A2F3B
0D871C5D2C91AC39A18D0B21CEE508528C5E62F43744A26538BD1F7F090DE03C
B62E0F8601FC4D79B52156419769B91477249D08F7EC9005E5F4D03ECCDA8983
766EABE8B32B8660D2759970340F342E48FC8DA1BA199E55BCD6F436C7390B71
822D2D464A10A1B14C33FAFB1118136DE78C2925767507B0E05FA1C84E749A04
D3F3814864F00DC7B8213D06DF77BCFC05045C8410F9F4C32186CB9B4E44FEFE
EDCE7B6160978ED7FF4A5199B53D409E898745610FFAD3AC143DC9CA8CB1C393
1E36AA85702AC1102395BF4918D09A32C2F2ED1D80E2B3180AE222E7C2E23709
1723377A30F50EE2D9C8C41FCF68538E03EE79CB5E9F15DBC0F5D3771EE6B6A3
E8E5FFC09D8FE607F44C3765B43DB403D579E475E0B2864CA02F2EAF97AD2212
D0048E23B1DD05C889D021D5FC3A7279A43459824EF65E5D900353EFC3A7D5BA
1EB1F51ADF85A244C065E92DA968494217E7F75A8F8D124357B24AB26A43876D
1C783A24F95BD0EFFDCD8FC061A2D99F8C01DF71FBFBD7A5210CD859969CBA45
FAED42F2CCF34A25C1D02F429E2292913C1B263584080805CE4CA9BA6A5DACD6
24011446DB6AC8045322CC1A97A9B09A3109294271793C9646C4433B990B0AB2
67D3837F53B0DE93BCDA2435FD8F5A6DC2AE4C627276365855F11CBBA6D747BF
CF44F4BCC4C63057D7B7DE7FF432BBC34345C13693EC4D9384AE58596D1ED1E3
81872EFDDF551E2B35040B7282247F09CE1CAFDAD8FBB5062803C344D0CC3297
9A1EEEC4AAEB78D4122013757C6D445496CD9E665C4CB2B3CDA6C46A5197A556
E05CC460DA5FF8BAA066043F44D1AF33A22BE10001B3CEBD719EEB38B92EABDC
75BFF945955A624DD02A196F9653441D5D99563AD6A015995764F5ED77449203
5D2304EC4F9083716CA7906B80486BB5C79264B618C729AAF5B30735CE380AB8
14EDC24C3140E4E9006FC3F262FA279BABA8F1BB4F07B431A1EFB315AA5EC479
66BCBFC852454446457A97395E80B0B978A58EDABC6904D1CE34CCCF4CFC655D
B5818840D39D041B26E317DE5E4640BC1D08E083BA4D822D74C1473FEBC4F181
CADAF54FEFEF9B540A99B60868D8D3CEB7C2BFEBDE0F66DB5275BCB2DC287840
236DF4AC604119029F54CA569F52F236732286C17218A1C3F5D1247134B47DC1
20CBD52FD207CFCBB8DF6A15526ACC343427EC77687424493298BE004C358FE7
1DD4239B8B1730244930052FCEED30A08021D66F223A6ED2EAE1534A139466F7
F62EFEB81686273053365758F50534E61D650001BE80A48A2B1AC1C064BBCEBD
BC0C99138A50E5C0F57977D929DC9CC3321627E723536914D2D3F4BAB062831E
02CF5BB04BE33B3A52C1F8296D44549A5ACB293CCA55299C1B7FC3CD993DCCA1
BE7B257D8041C6E9DEBE123998F90487692531B2BFDCE5DFC565CF8858AD6109
37F05659BCB61EAC45A182CF7070473DED607FEA43CBFF16DD187BC906EFF22C
A4509288ECDB56336D01D8DB3FACE4484A4988FE29ACB41DBC85B9F5C5D0AA1E
F139BE26FD7B9F79EC94951E0FA9A1CB391D0DB8F09F9FEED88A340C8365AF48
99059A0A01DFB009FB8D31F7D6F5ABD046FCD1E586837A98605EDCF4CDE45EFB
46A7FBFCAE9A895D47D5DDF8DF54CB08DA0EE60EECA10F8CE90CDCE6720DA575
29650AB7A2CE3879CE965818B9269A90EDB58ABE5710062E55DD503C52AA8A07
127BE1AA3359A90834F4A5C6383A1FFACA94D78EC6097FAFD5BE455E2C97B6C5
12D0140ACE08A0855DC98E4C886E696E6B1C423F65E6034F7ABC9AC473F5E1E9
809CE9BEF643C2568A3365B3C1540A2DC8E755BD139F7D3911F48E1BE5D86F74
CFE9E43CC265E4D4AF5EE41814285EDEC18B272C7113B1118FD1A286D4EEB1C0
2DE323917F5A206046CDABD9D54EA413DE4972223E40222126B2F695F1A7E22D
58E88CE48EBB5391D34F5AD87BC27392D7A101E273541B8FFD8A9F88AF43B48E
889765C4A31A899598D22EA55DE76735D3C2DABD92E45725DEE581FAFD1F33A8
5B6169D4794B1D7394098D3A01FF403643F1D606FEE10691D19ED84FE52EA962
49D2BE95414CC366E7F06A8C3056096A34BCF507E7A1B486963F669D996A3A3F
FB3A907F3A1AD2FFBDC88285B23C2296A5510B31F2F70F2E3B2CC8F7CDCB7F42
AB4D4DBE4456186C469B5CAC9DA5727DBC8D5BAC9F3568250B78C742585727C1
2F16E867F7B692C959CDB7A45A9A11E97D8E64D01390E9E92FB6FA21943BA9C3
AA45E9559397C3052ED84AB231B88E71B9D3FE88048DAB5228DAFA54F4B84AF7
63EECCA28D26DCDDEBA956D677C9E9031355DFAD06744BAE758B478EFE5CBBAB
5138D6E4ABAE2635D18B1F5F58F4610AF210FB438A5ABF80A50BB8D55C1A426A
F818185B8F3636CCE0A293F905974A0B3702FDA482C2BF34FB77D107652BD59E
002C56B3DD423BECB30F4BCD2B7969B6F1BDBB70EFF0F6E4AF1A437A20595DF3
E67189C32D8598046EF67D9CC27499F821BC245A08D9F46A81723BB6B76B4C3C
2E2E5B8584AD015374BBA57E44CD7D920874B55A2F393F513C09D57D1775AAC8
B95C63944C672E6EA73115DB6D6453764640990DA80BECA817D591BA5E7D65FB
18BC5BB7642593932C9E0DCDD8ACBA28D197E739C1A1EC70760EBFCCF49C7D65
C9D9C7EF19E076E25C4799D60C2CC73610B087F668AEBDEEBC03B8400C375000
1FDB7D4810086B2F93321EC74140E242836BE55BACB3C737A5C73C170B6563DA
6A0785D127ACC6E0AF422C91AC39A18D0B21CEE508528C5E62F300B3BA21DAAB
34F2A1CD801662934D7876C663B79E1A84DA16BA311C9236501F2717DDAB5275
3B36705655AA3117E1E902D53E24B71DD4F1CC13482C48FD1456BB3E8969C299
1D2EAF8F1F26C506DECA2CB27E92FED95B5CD3E9A77353823CC67E36721E6AF0
AFD9EBAB73776E7CEA560D43364C2B89E30AAB7CAE12EE07B0D606F78C7AFB61
31A59CB8548D2DDD50B72F99FD64C63AD02717F165E822012E69BB0D43A1842C
41D9535EEF0550084F465E868FCE588E1E18810BCB001AFB8F065FCBF8EF6BE3
37E1C21219B9438692C501C75C62BA84B70334512ED5DD80C0D9DB30324F35E3
F41F7FCBEC699C2392CC420B4FAD9A3A2A4B3708E7272F426F700148DD7894AB
60499A5D0ED8B061E82530D793EEC3E5EFA20896B346FCDBFBACDAB73629A1DC
0ED7C058AD150C4D5BE6CAFCC7D66432E33B1895F8F935628480AE0BDF7201D4
C38744B5CE2E4890487B10BB0D95FCA6A5DE809558C5ED205EA036D273829512
761986351742BDE067A69959FCFE317B8B5CF0FA404657430F1CEC53881DF1B3
457BD811E6178C7660CDD700F88C4C679CE7730367475C40ED58FFD2DA486CBA
3BAFA6D5D3A50623049E73B1F9554C1930B42C0A2F67F347B370619420089D3E
755785915CA903C6060A12DCD840C0DB82DFEA436DEB4794ACD823CA8A121B31
527FB8826F7F17E5F5D5C98C960B3F7873A164EDC80DF978D860252ACFC5659C
BFFBAF642694D17BC8EC46AAD0B491254DF65FD37B110A735BA2759FF48783B2
2F3EDE3CD408714E8E7C016ED719D6A4D045FA24AD879ACD7FC3969BE68DAEB1
53CB883F4FA98854D55FC993A5198C488F11D9AEF8DBAB34EE26443381C8DB3F
A8EAFB9A902529AFCC3F1A325AA9776B33CEB0A96B2430427504C63050962679
C494D424A87937E19302078128E9BC588331A6DD5575409067295FF6345939F3
78CA6353AE218E6D8497C8889F77AA9337C267FB5482E70985D7780CCF76E7D4
AED20EB63AEEF38F8BDB6AEC7B66210077FF4415E6E5FCA3C6AD820A8ED4978E
6E330DA55D3511E06A492EF0633D73C071CEA58830A18AE1C56554EE4E5554C4
2DE6FFF8AC8683DD62ED727126F236C7905D268AFA754C9789DCD73BC1DF740F
437DF5F1B361E2AB006B2BAB714A362DCAECAF285C3F8DEE0BD782DBA0ED8CE9
80B78186D7F391CD91B6222E88C0BCFF66208815458F6BBBBD4054325297D9E3
72D2E38E5AC885C2330E39C43391041E76B7BC14C0E3C03464CEFE78EFC1A190
EDDF520A27D96B1E7FD78689111BFA6B2D1015854A41D028008B72B954409149
69A1F2D001A5D7C9A8DD9089A49AF86EB24BDED1134230650AD23304E0837B8B
5E40E7B6C7D1E03A83D3C39AA484C9BED4818364BFF9ADC0225E6912C16D1946
10208FC61AA1A788180E27B4C63E9CCFD57D7C54FCB86CEB4E357837935FED9E
99CB41F90D39D3DCA794E0605CADD344AED4D550C0A429D2E25634F68A103A8D
DCCBC8282A2AFCCD388B73850459C8A2F5F66523146F96CEC371AE3208AB47E8
4400D0DA0BE7B1CF87CDFBD6D00D2FFED0AC18BB48EBB161E4AB0BB6632DD56D
496A6EE3B7B99E6167EDB6FBE73CD980AF4520EB53FF674743DAEFE33E4C6725
EEDB1DEE91DE7655EFDC4FFFB8C6040C7736376F69A88AEABA4CBE1728BCD3F6
C1BFD503D55A6A7A6376AF4D646EB3674244037384B36372980DE4F1819DC2B4
F825D7F0F00376FA16D597879F762BF7CE394D18DC76D206301F728D92DABDD3
AED5AFFCF292EF387F9A4024927ED3946EF8C16BA0900825A18A3DC8F5CE8472
C0F6AC2DA72BD3C660B75EF14ABA888E8A86017FB9100ADA3AFE7424F113C36D
91336AE0304148313B27E1641665CDC62F4FE37BB372BC89FD256DF863D636D2
56FEAE0268BBFB8CA37DE4D799425D869F75A82E117CB23CCB5DD5AC1C466208
E689787EDD1CAA6A64AF8E34D611F2A805FB97225083868982FCC8BE6B4F275F
9A6B261A7082ED1CF3294477C41E3A930F7D96A3F7CBBAAD1697059C16BEC499
EFBB1594306DFE612047BEFFD06259B256CD1A08F62F535312CC39C691353609
4753AA5FE332F659D0D19E49BA6D2C529DA22A5A9F0AF66B44344F1DF6812196
26CF404F1230A8942C6B0834FB86AD04CBD02303654E4D1A0623B0AE31FE4A67
F8F65D579A7115EEE9EA10B3EB5DFA40746223773C8BC72E954983FEDEBF29C4
68F870906F7E501890C4465D71D4E6546813347F0E7BE0B8940704BEEA757EA7
676D23FC0E90F03456E1231CFB3CC4E3A60079470F5503B71479FD9AC22E7818
EF7BA8071987D7196479DB81F669BC2ABB4462835ACEE028F14B6851F4BAE0D1
EC6BD197D2FBC30A1D6064E2957B001530E51B9A02F8101209AB94F1A9224922
34D75B89305E59A0D0AA51B7ED7020B182CA42AB5CCA868AA2C332FBF17E1AE9
C5679CBA8E3483719207386A2B0F7C3C77AA35545046E8E2BFF2B6AEB736E24F
9371DF30D306995E4A539BBCD6E3DB2463DB45C088A6F648D3FBB6D5769A3CF4
EE1143170F9E55D0567500BB24646836D31621C249D28C16CAF0476F3F654C28
FE4D8F7FF429F96D0DCE41EEC1EA29EA44F4AA055623EB7D6A90860842964426
D9E506537B3F8B4188EE5D9A010ADDBDAD28D36FCAADE15A574DE45CCD50FEF8
61BB5E7F6DCA1676C889DEDE06093FC5FDEE0C5B5752134E8304B68874630C69
D64248A5D082B45F7EE1D6C22F116267BB1C74614B8280A33B0789416C155076
430679D9A74A14F0AD86E07E758E2486731EAF5B4E8AB8A6D3F3B387A734F454
7B11AE88826E7BDF603CCFF8CDB607A8E063470623102FD5476521B256812B84
06F0133DA80CE65A75CA26236DF9E5BDF5BCACFB9D679B921F0616F272F26E0B
DB8D5F6FA9E782D29794F80315901081B98FF3AC06F5C24B6A33DC92C1757482
03021BD7214C2234AD81C620ED2A12432CB1FA9713ED8BABAFE9416AA5E06C7C
4C600BF38B70C87E5ACAEA307A1D58076DF9DEE1C864902C87D7922E56CD8325
5FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2CF83F00553818527039AC74
088A194CB25BA1A334F4E136AD603888E74770C07DF34EAFE36D3104DADE5D30
F6699A706EA336F89880CE4C5B805C3C54F112F7AA206981F15A67CF1D783EC7
B15B4330A37FC9C1BF23CE45EBD4E233D81C2D1749DC634574826E5FA920A55F
F29A639177C33BCE44A458C5F5EF1602C01D3283CB3A428735090DB60B1C1598
8847BCB5B01B04F5C3A01B3BD243941059BDCBC829C038EEF4F07B14F01B02C1
A4E8BE81D972620DF3FC71E71DDFD7EB126901EF35FB6F71300BBD54B3D7E24E
2B18FA0D5A7BAAB82D3297C9CEDC20F962EADC97B01A25989972496566E492F1
0EC7B88872E9AA24785F35F75835683515AF6CD0E731942B25D5FA8C792A71F5
C40F7C7768A67B861D5FC2887F1635AACF2784E2DD83128014188B2A4F223561
072AF4AACE27DF0B8287F8EF7C8B0F31A3D5EE4D1B1DD9CA7234023BFED3BC88
4E8714597CEFEA9B07AC91CF4CD6CB1A38B7EF67B9A3ACBD6170D92DAE94E7DC
ACBF8B1F4C9268D055DB23C69EB2565E8E996E9BB66724E6E32A15B43AD6F76E
C0AF3761859189D7A93BDECC857B91CCC43A4C530DB3EA06EF9672983138D713
933F6761904207BBC94AE5888A7A4FD92860505B4F912847080E9564A44AEFE8
4130BD4D15BB2EC8597057E4EDEBCE7830CD995E07B3C24E75C142A970F63BC1
014A091DC9563ACA36C145CC25F858E34B6D27E13A4E773B8D621B22B995A896
2DCCDBA5432CFA52050EF03C0F93AFF40958377DDE111CDFEA91C7326AC7FFC2
A65A633FD0288063A8253A830BE79F5E0824AFB010DC809783AB31CB4CDA017B
517090BE92D4EDC366D10C640E2BEEA25168B07D2CA120C6E9A7B5EDA2618657
8223C50EB478AC4131E85D471C966210F711E747B22C5E73B38B7279F9D19503
4F08374CA21C1779685838150CF56953701A5445C72AB80DFBB205E243C95360
8656A6EA9191FB546BB3433C212DF20A0A721766F9D9A6769FF80B400B1EDBFC
AC60BE4FA5A856B4A806FB8CFDC77DA03B4BD6210B8B4298D61EBCE692F4342C
634649B5A2CC15CE58596999BAD0D38526AEABC40B64A430C0AA868759E4C0A2
689D828B43A565025C551AB599C3EA4A5B43EFD388D2DAB89BBB2EB6DD2D6A67
F05C3FD7CF64D8F619AE619F5CF7C0BCF8F5CC4E77F6BBDC352DDD6E3A3EE287
FF27B77308192207287F5B1708FD0685C575449D29B51B30154E150D782B6538
78A1F10CC1C84D2B69E1136A43B9372388E4EC8C39194EA386994A41063D2E2E
868BBDABD12521978FD8AE646132032C4DA87E55DF77AEA448765D626DED6857
F95597DD2BD5FC05D3BD775091C7AF6830A624E43CB4DE4968428C0E2219BADB
061F2495F29C34EDA220886AC6D9FF1F97DCD44B22CA048AB8999C582631C581
A92EB97C873969EFA049F880F8683A835B98A1D4AE5D9CA434A535EEA8881249
336B37B435FF635B80BCC4B4912AC3076B863D865D82FD721FD006A27B6DFC0B
5CB2A4054EDC8C7A27E4579705E3D91564F0AC54D70F8EFC63B94F73ACBB4CD2
7975A5655255FEDB891F79982A075E7A1654FE5F9262B463C7F71C5E6B4441A4
1ADF3961D7FD5E439843D2BE6EBCAC4F0A19E8CBD37EA99E61CCCBCC0B39312F
234D4D05A2EFE9DA87C76277F092BFA21E98BC014B32DCA80DDB7F1F19DE0AF5
41979EB73B501C6A6B6371CFDF258F19A92DD6DFD36898DD9C5319A8F1C8695F
A473D20350A49B22F6CEFD1C825402103D93B51AF7CFD55078E9123E0C62B2B9
A0705095755901A327881880298D9DB49E04ED733C65D91E8B28382FDCEEAA89
A3E0A6CD429A2A50E2678F183C1648D2C3826031A7254434ACFD46E4E0C41298
551015629711BE7B3BC62F7F0C2F956BA1A8B0E9F31BC023BB3042979D53166F
6570B05CA0CFC94ACBEDD851C981C23D2B9D8D0304DB1745BE10587DABF1A682
40F2887F7830D8096621E81AF13B3BAB884BB606362BE4D7BBCAF79B6E9F731B
075C02E1165B27648893129D9EAC97FAA58A8CAD81B805F13784740407D67C7F
5A66F20290BFEDDD36D0AFFA38282843160F36739C45738552BBB128A401BB50
021036253048497FCA3E0B61FEC3FC54BFA3A7FD94B0B235682C826D378DB18B
9B53B5ABAFA5FBA977C63E3C997140B4F20C79A7038E473F435DCC8DFED5B907
1ACAB5BB432A0F4FE46308F0A45FE9AD9231E9B5CFB2EA123F843B0087B2FC75
CAD18883113AAADF162B0233520699908DD31C1E93F5F396F67B8ACF439CABFE
EACA48453CFE321DC5A10DD5F4FBD3184047F8F52B0787EB4B70BBA221109A78
D38A8DC2061C73BD8D0274D057C0661FB6C6EE4449369E211375B1DCB60BD44D
B13FC7623589A5D3FA6680A7C734917A00C16F249A333A1F83E14DFB00108962
AAB04F4036B0208B86BFA75B50C7D3453824D05115B24DC07C2F9B79EF66300B
3F94722F0A1B4D56F6158C10BD36256D46D93485DBEF2BAD146E4DF93B37E21C
317EB2DD950F79DAF6854FECF2736A98EFCBCBB6223972204F116B2C354852A9
E33D2440FD85E483A0A0B89C4ECF3575A4130B81E97C2A9BC215A2E2A34BEB5A
C50445D2920419CBF15CD531E36D1BA17E69AD2A2A9C1F0E14EC9DCB0572AB66
7F33FE709E3DDBED5D26699EC057443B714EAB7E6875A7F9320ABC586A2763AA
D673C82EF45030632D452BC8A23D12AA1A295EF5F50B62E4E01EB01B76FFBE71
80B2E3DFE45A76D10B7C0888F4FED9014F323AA0A83115E8AED878484FAD3448
F4BBFCD65ECB94F4C28FE80BD706FE0D5CD002D0612B6AE5D6AAEF877473EFB2
4394FA5C76CC0DC9DB83B6F549C06ADBF5048D67152D4608394B82E83877E96D
5FF7F7C34ED8E0B3F61C28ED46A45A1DEB1C93FB1AEE54042F3750D1F5B71061
CAD4FF35F5419CFB55B68972EB810AF897C0CCAF4B9CEB8ADF3FEEB11F09918F
66D3E5B19628F781B20302A8E282E743B8A3543FA63030BE997F6EB5B0BEBDFA
1F8C1E883FF01BB562BF7A8CD1C6CD40BBB35A56817E5E0340914BBA7C438FE5
130439DD96BAC786787D2D93E47F7666DC78AB35AB252E997A735E96485E6D35
BB7391942E143A26C67464E6D2CE3F0D7E23C59D2CE7B86B0A677E94056D90F6
5DF04CD94D395C28EEA275244FA56F9BF5B205854F9BF1F07A7DB49C5C9C8318
DF97FF75A7BD3BF3F9B954C160DD45DC67BFF44901AA672AF08DEA08F00707EC
53E1CF114795631E3B14687B9E3518B89CB969C1C36C72AA60D2759B3D6FDBD9
B88CC93C4DAAFB186E0CF93660BDBB489FB5C5BFD22467E3B7B7EB98E028E065
F785A518971A3B51EA08C6894F0E5A7F31AFB450A258E9EFC4E9DA426F9E7F8D
2811727965C75F5F254EDE85252D028837EDD8041751447C0F498410C544EAC6
BB825CB9C1370D8E9DAF23ACD4A12C42BAF6AF642FE4CA8469C21F36BE6C3121
EA51D5220E9A49F8AF01002F03F48DB2631D405F80F2BC8CDE155AC5F7D9DCA5
2F5EE2BC41E415CBEC45468CB1776DAA8B00CA7BAAAA548D35CF0F04AFD65A7E
44E101E418C746103DC2D1F22DB076A5306D7BD8FA8C8E0B2AF0735DFE721577
703E5588268DAA865478898C64529224CFEB1D6B93C4F789008648C10D9E8AF3
C951631672AC89BE399D617902ED1186B556A11C7519B5EAAA23A12BCCB0E1A5
3D8003413392A9AEE8FC14D50E1375DC1FA05DAB93C31A438AD167AD6C39AA2F
E5CCA6028CB3A7EA6E4A805FB59561573AA857702B2A8F48F563EDA3F7392165
8B06D57725D1051C7E8344B56F83FBE176C468E63F61D1A184DBA107D65FCF75
1CF72DF4710CA42F96220862ED0B2C0AE9D1AF457BA4830AF3BC5AC25B6E250D
2E18623FC9AA1D2E76F129264A99875D3CC1A3F0416B6EAD8A6104DFDA236D8D
4E7B48130E59DA01E46A79ADAC46322D250FB7ABE7D0D8CE90B7E1BF4C2BD3DC
8A87764B494E33DC86FE535B622BE278FD6D3860CBEDDC58F00FAAC1CEA96610
D95AF6BFA7F2CCDDE2B125F5E5D26F76073A88CA14BE086F8D4E32234B96BF37
BA75E6159B089284E93D19A5833FA589993F6D8F839808711285ECDE6BD2DBAB
0E92E04D408557841A846A1C0EBFAFD245F3E2100ABB401A60B1A27DA0BDBE5A
BED44A6F0B91FE18E7A527FFDDC287D5849A44A883B5F501E3CFB2542250D66A
E39640224A518BF378B5CD26761D1ECD916FC9B676679D4266E65DE1A3A418E0
2A8BE169C5D0B1206541A29E5BCD82B4DE1097FBA4DE7BD4F60E2FE3929594B7
D9F54FA2527C9F05D84934498CB1CA294DA6EBD87E82896AF4B3203DFD65D580
C860D5E426D107C511E4DDD5D06ED59A293533DE22B29941EA1A6AE32E06C7E2
1CFC8DD6FDE612C8F2A7DA397EA2266945D9077600B03A475D00168C2951654F
E508877366B89F6FAD2BACA4908F1277BAE6D06BB1AB0AEA89B6683EFB7343EA
55CD328F60EF6E7C97350B893EF62A75CCF43BE77361CEDA021BC8C2BE23B434
58474D510E94FCE182C53165413E1D6292FB632CEBD691C1F29AFD52CB18BD25
8ADFB0B4B9535040732FE2BA1F6ADB2A95D564B19A3035E27F66FDF6C4A85807
B259FCF7E16415F4870225453753A46D5DBF3E901B021C755A31414883C29C68
C3260535835CAB005BEDE9A0B810C0D8253B244EE74C47F8B20547A2A38CFC51
5BF63CB289D701A43491C4C0838B8D797205ECF32E51B276B471D10BD5C1D8CB
B442B43FC6DB80888685B6224E42869DDEE75801F5F379101BE0E37118C5C1BE
1644A0CAA597910685A9BEE4B63ECC60B33E777959E8B318C27CD86F47EC3702
BB2DB5485BEEAC3B2FA1CAAB86E005F973B84DE94FA53BDF2A85DAA438B37EA1
C89239790F6B0B3DD6FACF052D2E1C0EB34672AA7A04CAC2B96879AC6792E812
426A33CD78A844120B5B6048B67372105F841A259EF699DB0CD08D81478BA573
395D28B248D5F6D4027FDD43242FD0C11C69E5C568E7127D048B89BFFBB595EE
95F8BE4F058CCF35A29367992968B5C62F58C1E729F224EC05FB4EC009EF48E7
E56CA2A65510208AC999A8717636059CBE56B9B2FE8226C32F4DA4B05975961F
DDA498D72C313AEE1EFF147266263ADB7F1FA14432BFB817DA2C19F0C868A348
7600CB5DCFAABEEECF9081DEC277C2C3488C24B6FFB6FC050C642359F7A222D5
80DFDF477821A9913516CB0B28F80FBB493DDBE5EF2E9479938162B353074502
EC5A9386F0E3B0D21862221B95FE357BF67271EE6EED93B251B11A906473FE66
56D441D45C249533277F5CEAE9C6C51C2252D25D17D4D8D6D3EB48C2C561FE7A
E61572E5DB369FF58F4C136F6B67D6501F9C18CF250FC5195BFE69D2AE5F9560
C3190AC388C4D02E161B1383535A41EA1350F2E5774E0A4FEC450DA5AAF1AA75
CC72516F8FF9D91B56F5F504AB332FC17EABD6E425CA19544514592F5CB1FC05
49334F62417196029929B86FB6D123E9505F719A79564DBFFF9566BEA8DFAD1C
D13FE4F4BD5FE14CC8DDA7C7C36002FF4DBE9029A1E79BD5F165EDCCF1EB2CC9
7B2C590A835A6D3C651F84067FFEF9E72F83617303AFB6E5E9868BE0ACB7EF64
88A4C772D67DDCD70C92F239E3774A65EB9D4782B0B8251CFDF3D17801782266
0F150E234D3A5C32A6EC201192FFD8BEC784F4132A574718D2DC9D321C43C5E1
7E65894994FF8ED6676E95F64E4B5CF90D1793F98D7EAE541772A11F0A66805B
E7DC8E1193419E3A48D571DEE01E6C1591107758A82502E3160EFAA41BF0A7F2
7D2A274B1D654C2683E8F0DF6637E94633BC3D109747E0911C7859CEB157765B
AF32490F58B14D482590664FBDDC6FE2E460E306C404EE4C5C9BDC1E42458543
0BEB46BF852898686E3E7E12F8942BFAC0FF6F318F2625788F2F72CEE5F5594B
3319AFE3F1E75D12229EF8516D9F749879287F2FEF81FAE0D304C8D933CDDB28
0F05DD157E37A6EB7BB45145D10BB8F10668A8CCCC9DB2CF6CEEE7B2D6E24ADD
3F8B3C8D46C803F4AAD1A3DFA06621001C51AF2CA7A39AE6BA5E46010E2FEF56
9F0772BED49967AB61994F100F9BB57B6C4FDB613F7AE8C953FBA3414C1695FA
437CA481C1414AA9D083F8A63723F7E5F750F0DA9C6BACA4A3EB687C2D4EF8B2
584CCCF3418C6EE573C0248F366C2532A8E589932BA49E7ADED478725944AB63
AE79D19680934F1314588800EC86BDBDCF2944F49B8FDA5FF5956B763CE7AAAD
7EEB1D3A3164888AFBB114923D8E28FC591CCC629FFA26F1D282EBC19257DBC8
AFC1D266C3CD4D3E21A32765CED0D79F987D963CC392365BB3DDF7350A2BA149
FC399C46C1426F4FF72A744B8EED9375BA4144083D8210E8001DDF0750125FBC
F26095A320A1071176B65C5157A5FBA9F331A24401AD23B81C7C475FDCA1F2E4
131CBD0A48051A8AA4DE3EBFC3F6E2EC78B63B17C343252BA6A2A2574BF89234
7DEE8E7A09633AF7B2E1BF706E8AD1977E4A94A814D5D7B7A6799BE69FEAEE8A
DE6857E0CA79F4D0CFB5F9C44E2C537CC0AF4C48C199E97EC262446189BE6CE5
58BCEAB2253672D95FDB5AE7905281BA4CEBB5FD0F236A17293D2A720C72FC59
83C22F49DDF77CA13C47550B39DF3DBC13329090DC59354FBA9E75EF3E53B9A0
42CBD9DE2B19F5F89F17A00CB1099696B4592F519849EECC61B4FFA86ABF0864
46AA18D71F33321EF14FF11071451A49EFD130227754FA1BC2150EB979A72077
762F4B71862C04384D39621BD0FC52CB938E1167C1D021714D304DABE2D44773
4862517F6503AD5E4974913CFE94687B5B38750616F6DADA390B4641F273928E
FDD1A53D0FB7A4EA0734BCB86FE47C846E94E39044F80F298368509D3A43EA64
942D937F2FAF5C06C8C212EC91026982512AD84206EC1ED85DD0A6F34D79C335
A07138A120A1B77304C21C3636EFCCF24A6425D4C7AAB0CC90B1E0B6FEEE1E3D
F06973DBC08C1F72289D2F0C332D4537274E5102564EE586F97C1FDE8E7BCE01
645DA227F751D90AAC7CEC8EEDAA8D41F2612CC8FB2AEEDC8C6BEB7C26498593
783878C0A96D083E18D9F88CF84186148790F54058F1C057CC45791A347A273B
4422C59754089FF1ABFE7D3672D76A748A9E277FFDD25F5477D6E29564100477
3886A04ADAF6F101831BBC5693961949A9C50B2B0BD44F9515593C1E7C135233
EFBDACB6C76462D808103E9C54875B2146E9F849F9E4AC043A1A15ADB2ACDF63
E0D6B5706557B831934ABE6D113D7FCC36B149D13733A6DF57FBC274FE9A12B6
67165B8292EAC86D7ADF81917A0935303EC1823825BF2E2F5C26BCB2EF13F5F8
C169DB7C35DB9645617AFE078E03BF9A1BCE4E462DD68C3B0FB495C0E06BA6F5
D1373ECAABDF8B746D4B6F85DF55429E396C9C0AF8D0AC0CE02F15E45F1353E2
CEF241E51F352F5ACF474B8D104A5677B231727E89E7C525D814E463358D70DE
7BC6BAFECD377B48633D01019F1EF8EDC3A3B494F3809BC20E03E4DA37DA7FAB
D009F22B036813EA9F5DBFFBD764E1E646FBA33DF8ACC3D9A7E89F917F6077D9
5716E5AC076A63945057FADE224839D79A4D644584C7B4433471A5338D30C541
5E1EAA2D5DD283482101C0940504D221F9A3BF31F4584EE9B292538E83FE9782
A6B454893AC10647CC82B1937B920E81D39062C1591B12A9B82CBE1F3F03D7E9
73E74B0DBCABA9ADCC20ADAAC3C0C63CFC3B7ADA39C0AA97CA287AA78B5D9A34
33023CE0290DB68CD3E9FB8AFF9059D3EA7EC541D10DC21408FCEA6D747C1997
953D2DE0551410F1C4BF7E6B882EFEDDC7E7567F116654EF98052AFA608240D4
00C82868714AF2B47D07416D2A51B83AEB1553E304004A073BD9C333C710AAAB
DD27CD9B2644983B1A5A9B752F9A8251112452C18F8DFC654DF8532E4A4E5F62
FEDD56CF1B5C445288723EED15A44F4804329268F4440F0B366B61EF18644E80
E57DC95D3A51508B5D2E4B99CCC18D026D6D6CAB0A90A6891CC6A139CEBFDD92
309C89A9CCF303CB484A6F2108124D00A25EDE3383CB75BAD542C3E5389AECCE
E733A2DFE5343CB6D3F245E3863159BB3A03BB379BDFD1FDC40E678BC42FB383
5475F09C7BA7156E5CE91FBD5F44F0E247D957956045B16131110678809B7735
371FE5A2F54624315981DB9E59213A11EB1D175031C58B915E7A0F7CBFFE98AC
3175DF7949B683297FB19988D10C3C49E3C34B69125CF4C68627A5356470BDEB
3D9A1BC8EC4429BF719BF6CBD1D68E3D1658297BB1DA159420E8D26ACC6FAE36
FCBFB25CDB62D70D9A99A6BF1C8E3C4D931CF57774E70909CBA2A8CCAA351D75
182D9490ABC3370D4B6CAFB8ACF7A21057D644F616DF2BF37605A1FE6FA61A1B
3F44687041F37ADD6989E85FCA2752B0E22C79E8CF744F0A8735C3247550398E
2A60F519DCA29B4B308A8A510FF245BEC7B3004A57E094DB56B8D67A2A1C6859
4F1FC860D909E575E1ADCE69C01434BA42E9A5511219AFBFABAE4AF312575682
E6A86792FF4A6CC931284BA7C4DA696046756D986278D56C22EE022E2DDD8555
8056EFDE8757BD40D52FE71FB417926EE7E44FDB65CB06AAF333F91C2D2910FE
5E427D4554B341E5EDFC7CC1A15DC14530341A1CFFEA243FEBAC6BD4F64C875E
5AA731ADC5E20D30F30CF0625DCA254C16904F75B26827BADE8C69ED7F226EBF
FB0FC609E366B12B8A33E6DF6013FFB560C6B96CCC5ACF55B7175117B32C326D
9B64C1D11596E1FEB5082D14CAD6BD770E15BE2901A37D5A3D140A3B9599A6FD
7B8FF7AD0711E9D787E7D4B83F7F66B929E90B7B3D7CAC53C8C2584E7F545EEA
110CD4AFC6903F619D27EC173517391C496165E61F9EA94972EAA24928D56792
F4ED384FAB4C93A16EF74BE17DCF60A2EDC679FAD4B4D0606885877D5737705D
7F54E1366D2CE36D64EE6A24763E06B7E03DCEDAEB6F0660EB7428737BE681B4
8C740FB060AFFB9115AC7934E990C7A5A585A777265A177A496EFCFEF63BAC80
FF603B887DC358F04C3C28C8518CB551334B31801C873D72865414E1FEC47301
0E2EDB5426552677CBAD9182446278A62A951CAF15A6CBAF32DBF8860B4B87AD
674B6D9A1F4B2C85938BA3F031B6389C0982B7DCA73101B945BA3D311CDD831B
5BD89B919FA7A5303988DE6CC8DF9CFC03F5FF651B723EDF518799F0A7C74CCD
2CF386FF3BCEF9D3AF7443A5388EA178EAAF5BEEBB25F619D672AF9CF2B19286
631E8B337B47B82488A9C2C219ED87AA72702FF2C702276681AF7D03149789BC
B467D59FCFE000B0DB3E87C3724105975A65D44ED66F67FE83BC05B1099F0EFD
68F5082F73BE0273D2BED24AE6A619794B0BDDAF6E7780F00DA6B37D778A2F0F
52C3433DAF4ED6848DEE8C52752B76BB6D7B99745157BC493A12147BC7195A64
2B5EB383542853FD6C050296ECF018895050D956DDCB5416C2806194B99B6C30
8008D28F3DC2955F8F093993DE76CD1D022D5D7F75B9EE722B9A8E36DDC53786
19F8E291E8AD75578B4C591E7288664158F7A16AACF15094F812ABF8C5F5320C
F64EBED74FEFCFE9B7FFDDB6D653752FFAC267AA6C29EEBD4ADE66DBAE1AE979
63B809
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (test_file.dvi)
@start /Fa 3[39 134[39 27 1[28 3[39 4[20 39 35 22 31
39 31 15[39 4[53 6[55 4[50 8[35 35 1[35 1[35 35 35 35
3[24 45[{ enclmec ReEncodeFont }24 66.4176 /LMRoman8-Regular
rf /Fb 138[46 32 33 33 2[42 46 69 1[44 1[23 46 2[37 1[37
1[42 16[57 1[62 6[65 1[57 14[42 2[42 51[{ enclmec ReEncodeFont }19
83.022 /LMRoman10-Regular rf /Fc 160[68 40[45 2[45 3[45
47[{ enclmec ReEncodeFont }4 90.9091 /LMRoman10-Regular
rf /Fd 139[38 38 13[43 54 2[49 12[70 33[49 49 2[27 46[{
 enclmec ReEncodeFont }9 99.6264 /LMRoman12-Regular rf
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-175 -224 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -175 -224 a -175 -224 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -175 -224 a -175
-224 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -175 -224 a -175 -224 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -175 -224 a -179 -124
a Fd(T)-8 b(est)p 0 TeXcolorgray -56 25 a(1.)p 0 TeXcolorgray
49 w(dasd)3283 b Fc(___/36)p 0 TeXcolorgray 1856 6096
a Fd(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -144 -30 4049
4 v -144 94 4 124 v -46 57 a Fb(Erreic)n(h)n(te)26 b(Punkte)361
b(Gesam)n(t)988 b(Note)p 3901 94 V -144 218 V 1031 242
a(36)p 3901 218 V -144 341 V 3901 341 V -144 345 4049
4 v -144 365 V -144 488 4 124 v 132 451 a Fa(Sehr)24
b(gut)617 b(Gut)556 b(Befriedigend)461 b(Gen)n(\374gend)418
b(Nic)n(h)n(t)24 b(gen)n(\374gend)p 3901 488 V -144 612
V 146 575 a(36)48 b(-)23 b(33)562 b(32)71 b(-)23 b(29)550
b(28)71 b(-)23 b(24)550 b(23)71 b(-)23 b(18)551 b(un)n(ter)25
b(18)p 3901 612 V -144 615 4049 4 v 0 TeXcolorgray 0
TeXcolorgray -144 4326 V -144 4450 4 124 v -46 4412 a
Fb(Erreic)n(h)n(te)h(Punkte)361 b(Gesam)n(t)988 b(Note)p
3901 4450 V -144 4573 V 1031 4598 a(36)p 3901 4573 V
-144 4697 V 3901 4697 V -144 4700 4049 4 v -144 4720
V -144 4844 4 124 v 1688 4807 a Fa(Befriedigend)461 b(Gen)n(\374gend)
418 b(Nic)n(h)n(t)24 b(gen)n(\374gend)p 3901 4844 V -144
4967 V 1751 4930 a(28)71 b(-)23 b(24)550 b(23)71 b(-)23
b(18)551 b(un)n(ter)25 b(18)p 3901 4967 V -144 4971 4049
4 v 0 TeXcolorgray 0 TeXcolorgray -144 5169 V -144 5293
4 124 v -46 5256 a Fb(Erreic)n(h)n(te)h(Punkte)361 b(Gesam)n(t)988
b(Note)p 3901 5293 V -144 5416 V 1031 5441 a(36)p 3901
5416 V -144 5540 V 3901 5540 V -144 5543 4049 4 v -144
5563 V -144 5687 4 124 v 1688 5650 a Fa(Befriedigend)461
b(Gen)n(\374gend)418 b(Nic)n(h)n(t)24 b(gen)n(\374gend)p
3901 5687 V -144 5810 V 1763 5773 a(28)47 b(-)23 b(24)574
b(23)48 b(-)23 b(18)562 b(un)n(ter)25 b(18)p 3901 5810
V -144 5814 4049 4 v 0 TeXcolorgray 1856 6096 a Fd(2)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
